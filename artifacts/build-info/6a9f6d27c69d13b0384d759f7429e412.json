{
	"id": "6a9f6d27c69d13b0384d759f7429e412",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"PictureToken.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.20;\r\n\r\n\r\nimport \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\";\r\nimport \"openzeppelin-contracts/contracts/access/Ownable.sol\";\r\n\r\ncontract PictureToken is ERC721, Ownable {\r\n\r\n    string image;\r\n    uint256 public price;\r\n    bool onSale;\r\n\r\n    constructor(address initialOwner, string memory _image)\r\n    ERC721(\"PictureToken\", \"PT\")\r\n    Ownable(initialOwner)\r\n    {\r\n        image = _image;\r\n        price = 0;\r\n        onSale = false;\r\n    }\r\n\r\n    function _baseURI() internal pure override returns (string memory) {\r\n        return \"ipfs://pieceTokenBaseURI\";\r\n    }\r\n\r\n    function getSinglePictureToken() public view returns(tokenData memory) {\r\n        return tokenData(Ownable.owner(), image, price, onSale);\r\n    }\r\n\r\n    function getPrice() public view returns(uint256) {\r\n        return price;\r\n    }\r\n\r\n    function setPrice(uint256 _price) public onlyOwner {\r\n        price = _price;\r\n    }\r\n\r\n    function putOnSale() public onlyOwner {\r\n        onSale = true;\r\n    }\r\n\r\n    function notPutOnSale() public onlyOwner {\r\n        onSale = false;\r\n    }\r\n\r\n    function purchase() public {\r\n        payable(msg.sender).transfer(price);\r\n        transferOwnership(msg.sender);\r\n        price = 0;\r\n        onSale = false;\r\n    }\r\n\r\n}\r\n\r\nstruct tokenData {\r\n    address ownerAddress;\r\n    string image;\r\n    uint256 price;\r\n    bool onSale;\r\n}"
			},
			"openzeppelin-contracts/contracts/access/Ownable.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {Context} from \"../utils/Context.sol\";\r\n\r\n/**\r\n * @dev Contract module which provides a basic access control mechanism, where\r\n * there is an account (an owner) that can be granted exclusive access to\r\n * specific functions.\r\n *\r\n * The initial owner is set to the address provided by the deployer. This can\r\n * later be changed with {transferOwnership}.\r\n *\r\n * This module is used through inheritance. It will make available the modifier\r\n * `onlyOwner`, which can be applied to your functions to restrict their use to\r\n * the owner.\r\n */\r\nabstract contract Ownable is Context {\r\n    address private _owner;\r\n\r\n    /**\r\n     * @dev The caller account is not authorized to perform an operation.\r\n     */\r\n    error OwnableUnauthorizedAccount(address account);\r\n\r\n    /**\r\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\r\n     */\r\n    error OwnableInvalidOwner(address owner);\r\n\r\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\r\n\r\n    /**\r\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\r\n     */\r\n    constructor(address initialOwner) {\r\n        if (initialOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(initialOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if called by any account other than the owner.\r\n     */\r\n    modifier onlyOwner() {\r\n        _checkOwner();\r\n        _;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the current owner.\r\n     */\r\n    function owner() public view virtual returns (address) {\r\n        return _owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Throws if the sender is not the owner.\r\n     */\r\n    function _checkOwner() internal view virtual {\r\n        if (owner() != _msgSender()) {\r\n            revert OwnableUnauthorizedAccount(_msgSender());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Leaves the contract without owner. It will not be possible to call\r\n     * `onlyOwner` functions. Can only be called by the current owner.\r\n     *\r\n     * NOTE: Renouncing ownership will leave the contract without an owner,\r\n     * thereby disabling any functionality that is only available to the owner.\r\n     */\r\n    function renounceOwnership() public virtual onlyOwner {\r\n        _transferOwnership(address(0));\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Can only be called by the current owner.\r\n     */\r\n    function transferOwnership(address newOwner) public virtual onlyOwner {\r\n        if (newOwner == address(0)) {\r\n            revert OwnableInvalidOwner(address(0));\r\n        }\r\n        _transferOwnership(newOwner);\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\r\n     * Internal function without access restriction.\r\n     */\r\n    function _transferOwnership(address newOwner) internal virtual {\r\n        address oldOwner = _owner;\r\n        _owner = newOwner;\r\n        emit OwnershipTransferred(oldOwner, newOwner);\r\n    }\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC721} from \"./IERC721.sol\";\r\nimport {IERC721Receiver} from \"./IERC721Receiver.sol\";\r\nimport {IERC721Metadata} from \"./extensions/IERC721Metadata.sol\";\r\nimport {Context} from \"../../utils/Context.sol\";\r\nimport {Strings} from \"../../utils/Strings.sol\";\r\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\r\nimport {IERC721Errors} from \"../../interfaces/draft-IERC6093.sol\";\r\n\r\n/**\r\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\r\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\r\n * {ERC721Enumerable}.\r\n */\r\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\r\n    using Strings for uint256;\r\n\r\n    // Token name\r\n    string private _name;\r\n\r\n    // Token symbol\r\n    string private _symbol;\r\n\r\n    mapping(uint256 tokenId => address) private _owners;\r\n\r\n    mapping(address owner => uint256) private _balances;\r\n\r\n    mapping(uint256 tokenId => address) private _tokenApprovals;\r\n\r\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\r\n\r\n    /**\r\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\r\n     */\r\n    constructor(string memory name_, string memory symbol_) {\r\n        _name = name_;\r\n        _symbol = symbol_;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\r\n        return\r\n            interfaceId == type(IERC721).interfaceId ||\r\n            interfaceId == type(IERC721Metadata).interfaceId ||\r\n            super.supportsInterface(interfaceId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-balanceOf}.\r\n     */\r\n    function balanceOf(address owner) public view virtual returns (uint256) {\r\n        if (owner == address(0)) {\r\n            revert ERC721InvalidOwner(address(0));\r\n        }\r\n        return _balances[owner];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-ownerOf}.\r\n     */\r\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\r\n        return _requireOwned(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-name}.\r\n     */\r\n    function name() public view virtual returns (string memory) {\r\n        return _name;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-symbol}.\r\n     */\r\n    function symbol() public view virtual returns (string memory) {\r\n        return _symbol;\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721Metadata-tokenURI}.\r\n     */\r\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\r\n        _requireOwned(tokenId);\r\n\r\n        string memory baseURI = _baseURI();\r\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\r\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\r\n     * by default, can be overridden in child contracts.\r\n     */\r\n    function _baseURI() internal view virtual returns (string memory) {\r\n        return \"\";\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-approve}.\r\n     */\r\n    function approve(address to, uint256 tokenId) public virtual {\r\n        _approve(to, tokenId, _msgSender());\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-getApproved}.\r\n     */\r\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\r\n        _requireOwned(tokenId);\r\n\r\n        return _getApproved(tokenId);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-setApprovalForAll}.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) public virtual {\r\n        _setApprovalForAll(_msgSender(), operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-isApprovedForAll}.\r\n     */\r\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\r\n        return _operatorApprovals[owner][operator];\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-transferFrom}.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\r\n        if (to == address(0)) {\r\n            revert ERC721InvalidReceiver(address(0));\r\n        }\r\n        // Setting an \"auth\" arguments enables the `_isAuthorized` check which verifies that the token exists\r\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\r\n        address previousOwner = _update(to, tokenId, _msgSender());\r\n        if (previousOwner != from) {\r\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\r\n        safeTransferFrom(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev See {IERC721-safeTransferFrom}.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\r\n        transferFrom(from, to, tokenId);\r\n        _checkOnERC721Received(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\r\n     *\r\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\r\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\r\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\r\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\r\n     */\r\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\r\n        return _owners[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\r\n     */\r\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\r\n        return _tokenApprovals[tokenId];\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\r\n     * particular (ignoring whether it is owned by `owner`).\r\n     *\r\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\r\n     * assumption.\r\n     */\r\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\r\n        return\r\n            spender != address(0) &&\r\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\r\n    }\r\n\r\n    /**\r\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\r\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\r\n     * the `spender` for the specific `tokenId`.\r\n     *\r\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\r\n     * assumption.\r\n     */\r\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\r\n        if (!_isAuthorized(owner, spender, tokenId)) {\r\n            if (owner == address(0)) {\r\n                revert ERC721NonexistentToken(tokenId);\r\n            } else {\r\n                revert ERC721InsufficientApproval(spender, tokenId);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\r\n     *\r\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\r\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\r\n     *\r\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\r\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\r\n     * remain consistent with one another.\r\n     */\r\n    function _increaseBalance(address account, uint128 value) internal virtual {\r\n        unchecked {\r\n            _balances[account] += value;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\r\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\r\n     *\r\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\r\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\r\n     *\r\n     * Emits a {Transfer} event.\r\n     *\r\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\r\n     */\r\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\r\n        address from = _ownerOf(tokenId);\r\n\r\n        // Perform (optional) operator check\r\n        if (auth != address(0)) {\r\n            _checkAuthorized(from, auth, tokenId);\r\n        }\r\n\r\n        // Execute the update\r\n        if (from != address(0)) {\r\n            // Clear approval. No need to re-authorize or emit the Approval event\r\n            _approve(address(0), tokenId, address(0), false);\r\n\r\n            unchecked {\r\n                _balances[from] -= 1;\r\n            }\r\n        }\r\n\r\n        if (to != address(0)) {\r\n            unchecked {\r\n                _balances[to] += 1;\r\n            }\r\n        }\r\n\r\n        _owners[tokenId] = to;\r\n\r\n        emit Transfer(from, to, tokenId);\r\n\r\n        return from;\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId` and transfers it to `to`.\r\n     *\r\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - `to` cannot be the zero address.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _mint(address to, uint256 tokenId) internal {\r\n        if (to == address(0)) {\r\n            revert ERC721InvalidReceiver(address(0));\r\n        }\r\n        address previousOwner = _update(to, tokenId, address(0));\r\n        if (previousOwner != address(0)) {\r\n            revert ERC721InvalidSender(address(0));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must not exist.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId) internal {\r\n        _safeMint(to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _mint(to, tokenId);\r\n        _checkOnERC721Received(address(0), to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Destroys `tokenId`.\r\n     * The approval is cleared when the token is burned.\r\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _burn(uint256 tokenId) internal {\r\n        address previousOwner = _update(address(0), tokenId, address(0));\r\n        if (previousOwner == address(0)) {\r\n            revert ERC721NonexistentToken(tokenId);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` from `from` to `to`.\r\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _transfer(address from, address to, uint256 tokenId) internal {\r\n        if (to == address(0)) {\r\n            revert ERC721InvalidReceiver(address(0));\r\n        }\r\n        address previousOwner = _update(to, tokenId, address(0));\r\n        if (previousOwner == address(0)) {\r\n            revert ERC721NonexistentToken(tokenId);\r\n        } else if (previousOwner != from) {\r\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\r\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\r\n     *\r\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\r\n     *\r\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\r\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\r\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - `to` cannot be the zero address.\r\n     * - `from` cannot be the zero address.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\r\n        _safeTransfer(from, to, tokenId, \"\");\r\n    }\r\n\r\n    /**\r\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\r\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\r\n     */\r\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\r\n        _transfer(from, to, tokenId);\r\n        _checkOnERC721Received(from, to, tokenId, data);\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `to` to operate on `tokenId`\r\n     *\r\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\r\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\r\n     *\r\n     * Emits an {Approval} event.\r\n     *\r\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\r\n     */\r\n    function _approve(address to, uint256 tokenId, address auth) internal {\r\n        _approve(to, tokenId, auth, true);\r\n    }\r\n\r\n    /**\r\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\r\n     * emitted in the context of transfers.\r\n     */\r\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\r\n        // Avoid reading the owner unless necessary\r\n        if (emitEvent || auth != address(0)) {\r\n            address owner = _requireOwned(tokenId);\r\n\r\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\r\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\r\n                revert ERC721InvalidApprover(auth);\r\n            }\r\n\r\n            if (emitEvent) {\r\n                emit Approval(owner, to, tokenId);\r\n            }\r\n        }\r\n\r\n        _tokenApprovals[tokenId] = to;\r\n    }\r\n\r\n    /**\r\n     * @dev Approve `operator` to operate on all of `owner` tokens\r\n     *\r\n     * Requirements:\r\n     * - operator can't be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\r\n        if (operator == address(0)) {\r\n            revert ERC721InvalidOperator(operator);\r\n        }\r\n        _operatorApprovals[owner][operator] = approved;\r\n        emit ApprovalForAll(owner, operator, approved);\r\n    }\r\n\r\n    /**\r\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\r\n     * Returns the owner.\r\n     *\r\n     * Overrides to ownership logic should be done to {_ownerOf}.\r\n     */\r\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\r\n        address owner = _ownerOf(tokenId);\r\n        if (owner == address(0)) {\r\n            revert ERC721NonexistentToken(tokenId);\r\n        }\r\n        return owner;\r\n    }\r\n\r\n    /**\r\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\r\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\r\n     *\r\n     * @param from address representing the previous owner of the given token ID\r\n     * @param to target address that will receive the tokens\r\n     * @param tokenId uint256 ID of the token to be transferred\r\n     * @param data bytes optional data to send along with the call\r\n     */\r\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\r\n        if (to.code.length > 0) {\r\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\r\n                if (retval != IERC721Receiver.onERC721Received.selector) {\r\n                    revert ERC721InvalidReceiver(to);\r\n                }\r\n            } catch (bytes memory reason) {\r\n                if (reason.length == 0) {\r\n                    revert ERC721InvalidReceiver(to);\r\n                } else {\r\n                    /// @solidity memory-safe-assembly\r\n                    assembly {\r\n                        revert(add(32, reason), mload(reason))\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard ERC20 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\r\n */\r\ninterface IERC20Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC20InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC20InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     */\r\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC20InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\r\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC20InvalidSpender(address spender);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC721 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\r\n */\r\ninterface IERC721Errors {\r\n    /**\r\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\r\n     * Used in balance queries.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721InvalidOwner(address owner);\r\n\r\n    /**\r\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721NonexistentToken(uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param tokenId Identifier number of a token.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC721InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC721InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC721InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC721InvalidOperator(address operator);\r\n}\r\n\r\n/**\r\n * @dev Standard ERC1155 Errors\r\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\r\n */\r\ninterface IERC1155Errors {\r\n    /**\r\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     * @param balance Current balance for the interacting account.\r\n     * @param needed Minimum amount required to perform a transfer.\r\n     * @param tokenId Identifier number of a token.\r\n     */\r\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\r\n     * @param sender Address whose tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidSender(address sender);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\r\n     * @param receiver Address to which tokens are being transferred.\r\n     */\r\n    error ERC1155InvalidReceiver(address receiver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     * @param owner Address of the current owner of a token.\r\n     */\r\n    error ERC1155MissingApprovalForAll(address operator, address owner);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\r\n     * @param approver Address initiating an approval operation.\r\n     */\r\n    error ERC1155InvalidApprover(address approver);\r\n\r\n    /**\r\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\r\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\r\n     */\r\n    error ERC1155InvalidOperator(address operator);\r\n\r\n    /**\r\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\r\n     * Used in batch transfers.\r\n     * @param idsLength Length of the array of token identifiers\r\n     * @param valuesLength Length of the array of token amounts\r\n     */\r\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC165} from \"./IERC165.sol\";\r\n\r\n/**\r\n * @dev Implementation of the {IERC165} interface.\r\n *\r\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\r\n * for the additional interface id that will be supported. For example:\r\n *\r\n * ```solidity\r\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\r\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\r\n * }\r\n * ```\r\n */\r\nabstract contract ERC165 is IERC165 {\r\n    /**\r\n     * @dev See {IERC165-supportsInterface}.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\r\n        return interfaceId == type(IERC165).interfaceId;\r\n    }\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/utils/Strings.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {Math} from \"./math/Math.sol\";\r\nimport {SignedMath} from \"./math/SignedMath.sol\";\r\n\r\n/**\r\n * @dev String operations.\r\n */\r\nlibrary Strings {\r\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\r\n    uint8 private constant ADDRESS_LENGTH = 20;\r\n\r\n    /**\r\n     * @dev The `value` string doesn't fit in the specified `length`.\r\n     */\r\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            uint256 length = Math.log10(value) + 1;\r\n            string memory buffer = new string(length);\r\n            uint256 ptr;\r\n            /// @solidity memory-safe-assembly\r\n            assembly {\r\n                ptr := add(buffer, add(32, length))\r\n            }\r\n            while (true) {\r\n                ptr--;\r\n                /// @solidity memory-safe-assembly\r\n                assembly {\r\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\r\n                }\r\n                value /= 10;\r\n                if (value == 0) break;\r\n            }\r\n            return buffer;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\r\n     */\r\n    function toStringSigned(int256 value) internal pure returns (string memory) {\r\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\r\n     */\r\n    function toHexString(uint256 value) internal pure returns (string memory) {\r\n        unchecked {\r\n            return toHexString(value, Math.log256(value) + 1);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\r\n     */\r\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\r\n        uint256 localValue = value;\r\n        bytes memory buffer = new bytes(2 * length + 2);\r\n        buffer[0] = \"0\";\r\n        buffer[1] = \"x\";\r\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\r\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\r\n            localValue >>= 4;\r\n        }\r\n        if (localValue != 0) {\r\n            revert StringsInsufficientHexLength(value, length);\r\n        }\r\n        return string(buffer);\r\n    }\r\n\r\n    /**\r\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\r\n     * representation.\r\n     */\r\n    function toHexString(address addr) internal pure returns (string memory) {\r\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\r\n    }\r\n\r\n    /**\r\n     * @dev Returns true if the two strings are equal.\r\n     */\r\n    function equal(string memory a, string memory b) internal pure returns (bool) {\r\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\r\n    }\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/utils/Context.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Provides information about the current execution context, including the\r\n * sender of the transaction and its data. While these are generally available\r\n * via msg.sender and msg.data, they should not be accessed in such a direct\r\n * manner, since when dealing with meta-transactions the account sending and\r\n * paying for execution may not be the actual sender (as far as an application\r\n * is concerned).\r\n *\r\n * This contract is only required for intermediate, library-like contracts.\r\n */\r\nabstract contract Context {\r\n    function _msgSender() internal view virtual returns (address) {\r\n        return msg.sender;\r\n    }\r\n\r\n    function _msgData() internal view virtual returns (bytes calldata) {\r\n        return msg.data;\r\n    }\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC721} from \"../IERC721.sol\";\r\n\r\n/**\r\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\r\n * @dev See https://eips.ethereum.org/EIPS/eip-721\r\n */\r\ninterface IERC721Metadata is IERC721 {\r\n    /**\r\n     * @dev Returns the token collection name.\r\n     */\r\n    function name() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the token collection symbol.\r\n     */\r\n    function symbol() external view returns (string memory);\r\n\r\n    /**\r\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\r\n     */\r\n    function tokenURI(uint256 tokenId) external view returns (string memory);\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @title ERC721 token receiver interface\r\n * @dev Interface for any contract that wants to support safeTransfers\r\n * from ERC721 asset contracts.\r\n */\r\ninterface IERC721Receiver {\r\n    /**\r\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\r\n     * by `operator` from `from`, this function is called.\r\n     *\r\n     * It must return its Solidity selector to confirm the token transfer.\r\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\r\n     * reverted.\r\n     *\r\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\r\n     */\r\n    function onERC721Received(\r\n        address operator,\r\n        address from,\r\n        uint256 tokenId,\r\n        bytes calldata data\r\n    ) external returns (bytes4);\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\r\n\r\n/**\r\n * @dev Required interface of an ERC721 compliant contract.\r\n */\r\ninterface IERC721 is IERC165 {\r\n    /**\r\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\r\n     */\r\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\r\n     */\r\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\r\n\r\n    /**\r\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\r\n     */\r\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\r\n\r\n    /**\r\n     * @dev Returns the number of tokens in ``owner``'s account.\r\n     */\r\n    function balanceOf(address owner) external view returns (uint256 balance);\r\n\r\n    /**\r\n     * @dev Returns the owner of the `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function ownerOf(uint256 tokenId) external view returns (address owner);\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\r\n\r\n    /**\r\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\r\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must exist and be owned by `from`.\r\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\r\n     *   {setApprovalForAll}.\r\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\r\n     *   a safe transfer.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Transfers `tokenId` token from `from` to `to`.\r\n     *\r\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\r\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\r\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `from` cannot be the zero address.\r\n     * - `to` cannot be the zero address.\r\n     * - `tokenId` token must be owned by `from`.\r\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\r\n     *\r\n     * Emits a {Transfer} event.\r\n     */\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\r\n     * The approval is cleared when the token is transferred.\r\n     *\r\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The caller must own the token or be an approved operator.\r\n     * - `tokenId` must exist.\r\n     *\r\n     * Emits an {Approval} event.\r\n     */\r\n    function approve(address to, uint256 tokenId) external;\r\n\r\n    /**\r\n     * @dev Approve or remove `operator` as an operator for the caller.\r\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - The `operator` cannot be the address zero.\r\n     *\r\n     * Emits an {ApprovalForAll} event.\r\n     */\r\n    function setApprovalForAll(address operator, bool approved) external;\r\n\r\n    /**\r\n     * @dev Returns the account approved for `tokenId` token.\r\n     *\r\n     * Requirements:\r\n     *\r\n     * - `tokenId` must exist.\r\n     */\r\n    function getApproved(uint256 tokenId) external view returns (address operator);\r\n\r\n    /**\r\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\r\n     *\r\n     * See {setApprovalForAll}\r\n     */\r\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Interface of the ERC165 standard, as defined in the\r\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\r\n *\r\n * Implementers can declare support of contract interfaces, which can then be\r\n * queried by others ({ERC165Checker}).\r\n *\r\n * For an implementation, see {ERC165}.\r\n */\r\ninterface IERC165 {\r\n    /**\r\n     * @dev Returns true if this contract implements the interface defined by\r\n     * `interfaceId`. See the corresponding\r\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\r\n     * to learn more about how these ids are created.\r\n     *\r\n     * This function call must use less than 30 000 gas.\r\n     */\r\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard signed math utilities missing in the Solidity language.\r\n */\r\nlibrary SignedMath {\r\n    /**\r\n     * @dev Returns the largest of two signed numbers.\r\n     */\r\n    function max(int256 a, int256 b) internal pure returns (int256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two signed numbers.\r\n     */\r\n    function min(int256 a, int256 b) internal pure returns (int256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two signed numbers without overflow.\r\n     * The result is rounded towards zero.\r\n     */\r\n    function average(int256 a, int256 b) internal pure returns (int256) {\r\n        // Formula from the book \"Hacker's Delight\"\r\n        int256 x = (a & b) + ((a ^ b) >> 1);\r\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the absolute unsigned value of a signed value.\r\n     */\r\n    function abs(int256 n) internal pure returns (uint256) {\r\n        unchecked {\r\n            // must be unchecked in order to support `n = type(int256).min`\r\n            return uint256(n >= 0 ? n : -n);\r\n        }\r\n    }\r\n}\r\n"
			},
			"openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\r\n\r\npragma solidity ^0.8.20;\r\n\r\n/**\r\n * @dev Standard math utilities missing in the Solidity language.\r\n */\r\nlibrary Math {\r\n    /**\r\n     * @dev Muldiv operation overflow.\r\n     */\r\n    error MathOverflowedMulDiv();\r\n\r\n    enum Rounding {\r\n        Floor, // Toward negative infinity\r\n        Ceil, // Toward positive infinity\r\n        Trunc, // Toward zero\r\n        Expand // Away from zero\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            uint256 c = a + b;\r\n            if (c < a) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\r\n     */\r\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b > a) return (false, 0);\r\n            return (true, a - b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\r\n     */\r\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\r\n            // benefit is lost if 'b' is also tested.\r\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\r\n            if (a == 0) return (true, 0);\r\n            uint256 c = a * b;\r\n            if (c / a != b) return (false, 0);\r\n            return (true, c);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a / b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\r\n     */\r\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\r\n        unchecked {\r\n            if (b == 0) return (false, 0);\r\n            return (true, a % b);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the largest of two numbers.\r\n     */\r\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a > b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the smallest of two numbers.\r\n     */\r\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        return a < b ? a : b;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the average of two numbers. The result is rounded towards\r\n     * zero.\r\n     */\r\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        // (a + b) / 2 can overflow.\r\n        return (a & b) + (a ^ b) / 2;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the ceiling of the division of two numbers.\r\n     *\r\n     * This differs from standard division with `/` in that it rounds towards infinity instead\r\n     * of rounding towards zero.\r\n     */\r\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\r\n        if (b == 0) {\r\n            // Guarantee the same behavior as in a regular Solidity division.\r\n            return a / b;\r\n        }\r\n\r\n        // (a + b - 1) / b can overflow on addition, so we distribute.\r\n        return a == 0 ? 0 : (a - 1) / b + 1;\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\r\n     * denominator == 0.\r\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\r\n     * Uniswap Labs also under MIT license.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\r\n        unchecked {\r\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\r\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\r\n            // variables such that product = prod1 * 2^256 + prod0.\r\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\r\n            uint256 prod1; // Most significant 256 bits of the product\r\n            assembly {\r\n                let mm := mulmod(x, y, not(0))\r\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\r\n            }\r\n\r\n            // Handle non-overflow cases, 256 by 256 division.\r\n            if (prod1 == 0) {\r\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\r\n                // The surrounding unchecked block does not change this fact.\r\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\r\n                return prod0 / denominator;\r\n            }\r\n\r\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\r\n            if (denominator <= prod1) {\r\n                revert MathOverflowedMulDiv();\r\n            }\r\n\r\n            ///////////////////////////////////////////////\r\n            // 512 by 256 division.\r\n            ///////////////////////////////////////////////\r\n\r\n            // Make division exact by subtracting the remainder from [prod1 prod0].\r\n            uint256 remainder;\r\n            assembly {\r\n                // Compute remainder using mulmod.\r\n                remainder := mulmod(x, y, denominator)\r\n\r\n                // Subtract 256 bit number from 512 bit number.\r\n                prod1 := sub(prod1, gt(remainder, prod0))\r\n                prod0 := sub(prod0, remainder)\r\n            }\r\n\r\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\r\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\r\n\r\n            uint256 twos = denominator & (0 - denominator);\r\n            assembly {\r\n                // Divide denominator by twos.\r\n                denominator := div(denominator, twos)\r\n\r\n                // Divide [prod1 prod0] by twos.\r\n                prod0 := div(prod0, twos)\r\n\r\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\r\n                twos := add(div(sub(0, twos), twos), 1)\r\n            }\r\n\r\n            // Shift in bits from prod1 into prod0.\r\n            prod0 |= prod1 * twos;\r\n\r\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\r\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\r\n            // four bits. That is, denominator * inv = 1 mod 2^4.\r\n            uint256 inverse = (3 * denominator) ^ 2;\r\n\r\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\r\n            // works in modular arithmetic, doubling the correct bits in each step.\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\r\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\r\n\r\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\r\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\r\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\r\n            // is no longer required.\r\n            result = prod0 * inverse;\r\n            return result;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\r\n     */\r\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\r\n        uint256 result = mulDiv(x, y, denominator);\r\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\r\n            result += 1;\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\r\n     * towards zero.\r\n     *\r\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\r\n     */\r\n    function sqrt(uint256 a) internal pure returns (uint256) {\r\n        if (a == 0) {\r\n            return 0;\r\n        }\r\n\r\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\r\n        //\r\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\r\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\r\n        //\r\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\r\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\r\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\r\n        //\r\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\r\n        uint256 result = 1 << (log2(a) >> 1);\r\n\r\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\r\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\r\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\r\n        // into the expected uint128 result.\r\n        unchecked {\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            result = (result + a / result) >> 1;\r\n            return min(result, a / result);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @notice Calculates sqrt(a), following the selected rounding direction.\r\n     */\r\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = sqrt(a);\r\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 128;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 64;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 32;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 16;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                value >>= 8;\r\n                result += 8;\r\n            }\r\n            if (value >> 4 > 0) {\r\n                value >>= 4;\r\n                result += 4;\r\n            }\r\n            if (value >> 2 > 0) {\r\n                value >>= 2;\r\n                result += 2;\r\n            }\r\n            if (value >> 1 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log2(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >= 10 ** 64) {\r\n                value /= 10 ** 64;\r\n                result += 64;\r\n            }\r\n            if (value >= 10 ** 32) {\r\n                value /= 10 ** 32;\r\n                result += 32;\r\n            }\r\n            if (value >= 10 ** 16) {\r\n                value /= 10 ** 16;\r\n                result += 16;\r\n            }\r\n            if (value >= 10 ** 8) {\r\n                value /= 10 ** 8;\r\n                result += 8;\r\n            }\r\n            if (value >= 10 ** 4) {\r\n                value /= 10 ** 4;\r\n                result += 4;\r\n            }\r\n            if (value >= 10 ** 2) {\r\n                value /= 10 ** 2;\r\n                result += 2;\r\n            }\r\n            if (value >= 10 ** 1) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log10(value);\r\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\r\n     * Returns 0 if given 0.\r\n     *\r\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\r\n     */\r\n    function log256(uint256 value) internal pure returns (uint256) {\r\n        uint256 result = 0;\r\n        unchecked {\r\n            if (value >> 128 > 0) {\r\n                value >>= 128;\r\n                result += 16;\r\n            }\r\n            if (value >> 64 > 0) {\r\n                value >>= 64;\r\n                result += 8;\r\n            }\r\n            if (value >> 32 > 0) {\r\n                value >>= 32;\r\n                result += 4;\r\n            }\r\n            if (value >> 16 > 0) {\r\n                value >>= 16;\r\n                result += 2;\r\n            }\r\n            if (value >> 8 > 0) {\r\n                result += 1;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\r\n     * Returns 0 if given 0.\r\n     */\r\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\r\n        unchecked {\r\n            uint256 result = log256(value);\r\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\r\n     */\r\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\r\n        return uint8(rounding) % 2 == 1;\r\n    }\r\n}\r\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"PictureToken.sol": {
				"PictureToken": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "initialOwner",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_image",
									"type": "string"
								}
							],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getPrice",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getSinglePictureToken",
							"outputs": [
								{
									"components": [
										{
											"internalType": "address",
											"name": "ownerAddress",
											"type": "address"
										},
										{
											"internalType": "string",
											"name": "image",
											"type": "string"
										},
										{
											"internalType": "uint256",
											"name": "price",
											"type": "uint256"
										},
										{
											"internalType": "bool",
											"name": "onSale",
											"type": "bool"
										}
									],
									"internalType": "struct tokenData",
									"name": "",
									"type": "tuple"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "notPutOnSale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "price",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "purchase",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "putOnSale",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_price",
									"type": "uint256"
								}
							],
							"name": "setPrice",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"PictureToken.sol\":196:1311  contract PictureToken is ERC721, Ownable {... */\n  mstore(0x40, 0x80)\n    /* \"PictureToken.sol\":312:512  constructor(address initialOwner, string memory _image)... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  mload(0x40)\n  sub(codesize, bytecodeSize)\n  dup1\n  bytecodeSize\n  dup4\n  codecopy\n  dup2\n  add\n  0x40\n  dup2\n  swap1\n  mstore\n  tag_2\n  swap2\n  tag_3\n  jump\t// in\ntag_2:\n    /* \"PictureToken.sol\":415:427  initialOwner */\n  dup2\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1419:1535  constructor(string memory name_, string memory symbol_) {... */\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x0c\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xa1, 0x2834b1ba3ab932aa37b5b2b7)\n  dup2\n  mstore\n  pop\n  mload(0x40)\n  dup1\n  0x40\n  add\n  0x40\n  mstore\n  dup1\n  0x02\n  dup2\n  mstore\n  0x20\n  add\n  shl(0xf2, 0x1415)\n  dup2\n  mstore\n  pop\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1494:1499  name_ */\n  dup2\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1486:1491  _name */\n  0x00\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1486:1499  _name = name_ */\n  swap1\n  dup2\n  tag_8\n  swap2\n  swap1\n  tag_9\n  jump\t// in\ntag_8:\n  pop\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1510:1517  _symbol */\n  0x01\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1510:1527  _symbol = symbol_ */\n  tag_10\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1520:1527  symbol_ */\n  dup3\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1510:1517  _symbol */\n  dup3\n    /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1510:1527  _symbol = symbol_ */\n  tag_9\n  jump\t// in\ntag_10:\n  pop\n  pop\n  pop\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1311:1337  initialOwner == address(0) */\n  dup2\n  and\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1307:1404  if (initialOwner == address(0)) {... */\n  tag_12\n  jumpi\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1361:1392  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  shl(0xe0, 0x1e4fbdf7)\n  dup2\n  mstore\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1389:1390  0 */\n  0x00\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1361:1392  OwnableInvalidOwner(address(0)) */\n  0x04\n  dup3\n  add\n    /* \"#utility.yul\":4095:4146   */\n  mstore\n    /* \"#utility.yul\":4068:4086   */\n  0x24\n  add\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1361:1392  OwnableInvalidOwner(address(0)) */\n  mload(0x40)\n  dup1\n  swap2\n  sub\n  swap1\n  revert\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1307:1404  if (initialOwner == address(0)) {... */\ntag_12:\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1414:1446  _transferOwnership(initialOwner) */\n  tag_15\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1433:1445  initialOwner */\n  dup2\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1414:1432  _transferOwnership */\n  tag_16\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1414:1446  _transferOwnership(initialOwner) */\n  jump\t// in\ntag_15:\n  pop\n    /* \"PictureToken.sol\":445:450  image */\n  0x07\n    /* \"PictureToken.sol\":445:459  image = _image */\n  tag_18\n    /* \"PictureToken.sol\":453:459  _image */\n  dup3\n    /* \"PictureToken.sol\":445:450  image */\n  dup3\n    /* \"PictureToken.sol\":445:459  image = _image */\n  tag_9\n  jump\t// in\ntag_18:\n  pop\n  pop\n    /* \"PictureToken.sol\":478:479  0 */\n  0x00\n    /* \"PictureToken.sol\":470:475  price */\n  0x08\n    /* \"PictureToken.sol\":470:479  price = 0 */\n  sstore\n  pop\n    /* \"PictureToken.sol\":490:496  onSale */\n  0x09\n    /* \"PictureToken.sol\":490:504  onSale = false */\n  dup1\n  sload\n  not(0xff)\n  and\n  swap1\n  sstore\n    /* \"PictureToken.sol\":196:1311  contract PictureToken is ERC721, Ownable {... */\n  jump(tag_26)\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3006:3197  function _transferOwnership(address newOwner) internal virtual {... */\ntag_16:\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3099:3105  _owner */\n  0x06\n  dup1\n  sload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3116:3133  _owner = newOwner */\n  dup4\n  dup2\n  and\n  not(sub(shl(0xa0, 0x01), 0x01))\n  dup4\n  and\n  dup2\n  or\n  swap1\n  swap4\n  sstore\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3149:3189  OwnershipTransferred(oldOwner, newOwner) */\n  mload(0x40)\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3099:3105  _owner */\n  swap2\n  and\n  swap2\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3116:3133  _owner = newOwner */\n  swap1\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3099:3105  _owner */\n  dup3\n  swap1\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3149:3189  OwnershipTransferred(oldOwner, newOwner) */\n  0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n  swap1\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3080:3096  address oldOwner */\n  0x00\n  swap1\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3149:3189  OwnershipTransferred(oldOwner, newOwner) */\n  log3\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3069:3197  {... */\n  pop\n    /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3006:3197  function _transferOwnership(address newOwner) internal virtual {... */\n  pop\n  jump\t// out\n    /* \"#utility.yul\":14:141   */\ntag_21:\n    /* \"#utility.yul\":75:85   */\n  0x4e487b71\n    /* \"#utility.yul\":70:73   */\n  0xe0\n    /* \"#utility.yul\":66:86   */\n  shl\n    /* \"#utility.yul\":63:64   */\n  0x00\n    /* \"#utility.yul\":56:87   */\n  mstore\n    /* \"#utility.yul\":106:110   */\n  0x41\n    /* \"#utility.yul\":103:104   */\n  0x04\n    /* \"#utility.yul\":96:111   */\n  mstore\n    /* \"#utility.yul\":130:134   */\n  0x24\n    /* \"#utility.yul\":127:128   */\n  0x00\n    /* \"#utility.yul\":120:135   */\n  revert\n    /* \"#utility.yul\":146:1355   */\ntag_3:\n    /* \"#utility.yul\":235:241   */\n  0x00\n    /* \"#utility.yul\":243:249   */\n  dup1\n    /* \"#utility.yul\":296:298   */\n  0x40\n    /* \"#utility.yul\":284:293   */\n  dup4\n    /* \"#utility.yul\":275:282   */\n  dup6\n    /* \"#utility.yul\":271:294   */\n  sub\n    /* \"#utility.yul\":267:299   */\n  slt\n    /* \"#utility.yul\":264:316   */\n  iszero\n  tag_29\n  jumpi\n    /* \"#utility.yul\":312:313   */\n  0x00\n    /* \"#utility.yul\":309:310   */\n  dup1\n    /* \"#utility.yul\":302:314   */\n  revert\n    /* \"#utility.yul\":264:316   */\ntag_29:\n    /* \"#utility.yul\":338:354   */\n  dup3\n  mload\n  sub(shl(0xa0, 0x01), 0x01)\n    /* \"#utility.yul\":383:414   */\n  dup2\n  and\n    /* \"#utility.yul\":373:415   */\n  dup2\n  eq\n    /* \"#utility.yul\":363:433   */\n  tag_30\n  jumpi\n    /* \"#utility.yul\":429:430   */\n  0x00\n    /* \"#utility.yul\":426:427   */\n  dup1\n    /* \"#utility.yul\":419:431   */\n  revert\n    /* \"#utility.yul\":363:433   */\ntag_30:\n    /* \"#utility.yul\":476:478   */\n  0x20\n    /* \"#utility.yul\":507:525   */\n  dup5\n  dup2\n  add\n    /* \"#utility.yul\":501:526   */\n  mload\n    /* \"#utility.yul\":452:457   */\n  swap2\n  swap4\n  pop\n    /* \"#utility.yul\":476:478   */\n  swap1\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":575:589   */\n  dup1\n  dup3\n  gt\n    /* \"#utility.yul\":572:606   */\n  iszero\n  tag_31\n  jumpi\n    /* \"#utility.yul\":602:603   */\n  0x00\n    /* \"#utility.yul\":599:600   */\n  dup1\n    /* \"#utility.yul\":592:604   */\n  revert\n    /* \"#utility.yul\":572:606   */\ntag_31:\n    /* \"#utility.yul\":640:646   */\n  dup2\n    /* \"#utility.yul\":629:638   */\n  dup7\n    /* \"#utility.yul\":625:647   */\n  add\n    /* \"#utility.yul\":615:647   */\n  swap2\n  pop\n    /* \"#utility.yul\":685:692   */\n  dup7\n    /* \"#utility.yul\":678:682   */\n  0x1f\n    /* \"#utility.yul\":674:676   */\n  dup4\n    /* \"#utility.yul\":670:683   */\n  add\n    /* \"#utility.yul\":666:693   */\n  slt\n    /* \"#utility.yul\":656:711   */\n  tag_32\n  jumpi\n    /* \"#utility.yul\":707:708   */\n  0x00\n    /* \"#utility.yul\":704:705   */\n  dup1\n    /* \"#utility.yul\":697:709   */\n  revert\n    /* \"#utility.yul\":656:711   */\ntag_32:\n    /* \"#utility.yul\":736:738   */\n  dup2\n    /* \"#utility.yul\":730:739   */\n  mload\n    /* \"#utility.yul\":758:760   */\n  dup2\n    /* \"#utility.yul\":754:756   */\n  dup2\n    /* \"#utility.yul\":751:761   */\n  gt\n    /* \"#utility.yul\":748:784   */\n  iszero\n  tag_34\n  jumpi\n    /* \"#utility.yul\":764:782   */\n  tag_34\n  tag_21\n  jump\t// in\ntag_34:\n    /* \"#utility.yul\":839:841   */\n  0x40\n    /* \"#utility.yul\":833:842   */\n  mload\n    /* \"#utility.yul\":807:809   */\n  0x1f\n    /* \"#utility.yul\":893:906   */\n  dup3\n  add\n  not(0x1f)\n    /* \"#utility.yul\":889:911   */\n  swap1\n  dup2\n  and\n    /* \"#utility.yul\":913:915   */\n  0x3f\n    /* \"#utility.yul\":885:916   */\n  add\n    /* \"#utility.yul\":881:921   */\n  and\n    /* \"#utility.yul\":869:922   */\n  dup2\n  add\n  swap1\n    /* \"#utility.yul\":937:955   */\n  dup4\n  dup3\n  gt\n    /* \"#utility.yul\":957:979   */\n  dup2\n  dup4\n  lt\n    /* \"#utility.yul\":934:980   */\n  or\n    /* \"#utility.yul\":931:1003   */\n  iszero\n  tag_36\n  jumpi\n    /* \"#utility.yul\":983:1001   */\n  tag_36\n  tag_21\n  jump\t// in\ntag_36:\n    /* \"#utility.yul\":1023:1033   */\n  dup2\n    /* \"#utility.yul\":1019:1021   */\n  0x40\n    /* \"#utility.yul\":1012:1034   */\n  mstore\n    /* \"#utility.yul\":1058:1060   */\n  dup3\n    /* \"#utility.yul\":1050:1056   */\n  dup2\n    /* \"#utility.yul\":1043:1061   */\n  mstore\n    /* \"#utility.yul\":1098:1105   */\n  dup10\n    /* \"#utility.yul\":1093:1095   */\n  dup7\n    /* \"#utility.yul\":1088:1090   */\n  dup5\n    /* \"#utility.yul\":1084:1086   */\n  dup8\n    /* \"#utility.yul\":1080:1091   */\n  add\n    /* \"#utility.yul\":1076:1096   */\n  add\n    /* \"#utility.yul\":1073:1106   */\n  gt\n    /* \"#utility.yul\":1070:1123   */\n  iszero\n  tag_37\n  jumpi\n    /* \"#utility.yul\":1119:1120   */\n  0x00\n    /* \"#utility.yul\":1116:1117   */\n  dup1\n    /* \"#utility.yul\":1109:1121   */\n  revert\n    /* \"#utility.yul\":1070:1123   */\ntag_37:\n    /* \"#utility.yul\":1141:1142   */\n  0x00\n    /* \"#utility.yul\":1132:1142   */\n  swap4\n  pop\n    /* \"#utility.yul\":1151:1280   */\ntag_38:\n    /* \"#utility.yul\":1165:1167   */\n  dup3\n    /* \"#utility.yul\":1162:1163   */\n  dup5\n    /* \"#utility.yul\":1159:1168   */\n  lt\n    /* \"#utility.yul\":1151:1280   */\n  iszero\n  tag_40\n  jumpi\n    /* \"#utility.yul\":1253:1263   */\n  dup5\n  dup5\n  add\n    /* \"#utility.yul\":1249:1268   */\n  dup7\n  add\n    /* \"#utility.yul\":1243:1269   */\n  mload\n    /* \"#utility.yul\":1222:1236   */\n  dup2\n  dup6\n  add\n    /* \"#utility.yul\":1218:1241   */\n  dup8\n  add\n    /* \"#utility.yul\":1211:1270   */\n  mstore\n    /* \"#utility.yul\":1176:1186   */\n  swap3\n  dup6\n  add\n  swap3\n    /* \"#utility.yul\":1151:1280   */\n  jump(tag_38)\ntag_40:\n    /* \"#utility.yul\":1322:1323   */\n  0x00\n    /* \"#utility.yul\":1317:1319   */\n  dup7\n    /* \"#utility.yul\":1312:1314   */\n  dup5\n    /* \"#utility.yul\":1304:1310   */\n  dup4\n    /* \"#utility.yul\":1300:1315   */\n  add\n    /* \"#utility.yul\":1296:1320   */\n  add\n    /* \"#utility.yul\":1289:1324   */\n  mstore\n    /* \"#utility.yul\":1343:1349   */\n  dup1\n    /* \"#utility.yul\":1333:1349   */\n  swap7\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":146:1355   */\n  swap3\n  pop\n  swap3\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1360:1740   */\ntag_22:\n    /* \"#utility.yul\":1439:1440   */\n  0x01\n    /* \"#utility.yul\":1435:1447   */\n  dup2\n  dup2\n  shr\n  swap1\n    /* \"#utility.yul\":1482:1494   */\n  dup3\n  and\n  dup1\n    /* \"#utility.yul\":1503:1564   */\n  tag_42\n  jumpi\n    /* \"#utility.yul\":1557:1561   */\n  0x7f\n    /* \"#utility.yul\":1549:1555   */\n  dup3\n    /* \"#utility.yul\":1545:1562   */\n  and\n    /* \"#utility.yul\":1535:1562   */\n  swap2\n  pop\n    /* \"#utility.yul\":1503:1564   */\ntag_42:\n    /* \"#utility.yul\":1610:1612   */\n  0x20\n    /* \"#utility.yul\":1602:1608   */\n  dup3\n    /* \"#utility.yul\":1599:1613   */\n  lt\n    /* \"#utility.yul\":1579:1597   */\n  dup2\n    /* \"#utility.yul\":1576:1614   */\n  sub\n    /* \"#utility.yul\":1573:1734   */\n  tag_43\n  jumpi\n    /* \"#utility.yul\":1656:1666   */\n  0x4e487b71\n    /* \"#utility.yul\":1651:1654   */\n  0xe0\n    /* \"#utility.yul\":1647:1667   */\n  shl\n    /* \"#utility.yul\":1644:1645   */\n  0x00\n    /* \"#utility.yul\":1637:1668   */\n  mstore\n    /* \"#utility.yul\":1691:1695   */\n  0x22\n    /* \"#utility.yul\":1688:1689   */\n  0x04\n    /* \"#utility.yul\":1681:1696   */\n  mstore\n    /* \"#utility.yul\":1719:1723   */\n  0x24\n    /* \"#utility.yul\":1716:1717   */\n  0x00\n    /* \"#utility.yul\":1709:1724   */\n  revert\n    /* \"#utility.yul\":1573:1734   */\ntag_43:\n  pop\n    /* \"#utility.yul\":1360:1740   */\n  swap2\n  swap1\n  pop\n  jump\t// out\n    /* \"#utility.yul\":1871:2416   */\ntag_24:\n    /* \"#utility.yul\":1973:1975   */\n  0x1f\n    /* \"#utility.yul\":1968:1971   */\n  dup3\n    /* \"#utility.yul\":1965:1976   */\n  gt\n    /* \"#utility.yul\":1962:2410   */\n  iszero\n  tag_46\n  jumpi\n    /* \"#utility.yul\":2009:2010   */\n  0x00\n    /* \"#utility.yul\":2034:2039   */\n  dup2\n    /* \"#utility.yul\":2030:2032   */\n  dup2\n    /* \"#utility.yul\":2023:2040   */\n  mstore\n    /* \"#utility.yul\":2079:2083   */\n  0x20\n    /* \"#utility.yul\":2075:2077   */\n  dup2\n    /* \"#utility.yul\":2065:2084   */\n  keccak256\n    /* \"#utility.yul\":2149:2151   */\n  0x1f\n    /* \"#utility.yul\":2137:2147   */\n  dup6\n    /* \"#utility.yul\":2133:2152   */\n  add\n    /* \"#utility.yul\":2130:2131   */\n  0x05\n    /* \"#utility.yul\":2126:2153   */\n  shr\n    /* \"#utility.yul\":2120:2124   */\n  dup2\n    /* \"#utility.yul\":2116:2154   */\n  add\n    /* \"#utility.yul\":2185:2189   */\n  0x20\n    /* \"#utility.yul\":2173:2183   */\n  dup7\n    /* \"#utility.yul\":2170:2190   */\n  lt\n    /* \"#utility.yul\":2167:2214   */\n  iszero\n  tag_47\n  jumpi\n  pop\n    /* \"#utility.yul\":2208:2212   */\n  dup1\n    /* \"#utility.yul\":2167:2214   */\ntag_47:\n    /* \"#utility.yul\":2263:2265   */\n  0x1f\n    /* \"#utility.yul\":2258:2261   */\n  dup6\n    /* \"#utility.yul\":2254:2266   */\n  add\n    /* \"#utility.yul\":2251:2252   */\n  0x05\n    /* \"#utility.yul\":2247:2267   */\n  shr\n    /* \"#utility.yul\":2241:2245   */\n  dup3\n    /* \"#utility.yul\":2237:2268   */\n  add\n    /* \"#utility.yul\":2227:2268   */\n  swap2\n  pop\n    /* \"#utility.yul\":2318:2400   */\ntag_48:\n    /* \"#utility.yul\":2336:2338   */\n  dup2\n    /* \"#utility.yul\":2329:2334   */\n  dup2\n    /* \"#utility.yul\":2326:2339   */\n  lt\n    /* \"#utility.yul\":2318:2400   */\n  iszero\n  tag_50\n  jumpi\n    /* \"#utility.yul\":2381:2398   */\n  dup3\n  dup2\n  sstore\n    /* \"#utility.yul\":2362:2363   */\n  0x01\n    /* \"#utility.yul\":2351:2364   */\n  add\n    /* \"#utility.yul\":2318:2400   */\n  jump(tag_48)\ntag_50:\n    /* \"#utility.yul\":2322:2325   */\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":1962:2410   */\ntag_46:\n    /* \"#utility.yul\":1871:2416   */\n  pop\n  pop\n  pop\n  jump\t// out\n    /* \"#utility.yul\":2592:3944   */\ntag_9:\n    /* \"#utility.yul\":2712:2722   */\n  dup2\n  mload\n  sub(shl(0x40, 0x01), 0x01)\n    /* \"#utility.yul\":2734:2764   */\n  dup2\n  gt\n    /* \"#utility.yul\":2731:2787   */\n  iszero\n  tag_54\n  jumpi\n    /* \"#utility.yul\":2767:2785   */\n  tag_54\n  tag_21\n  jump\t// in\ntag_54:\n    /* \"#utility.yul\":2796:2893   */\n  tag_55\n    /* \"#utility.yul\":2886:2892   */\n  dup2\n    /* \"#utility.yul\":2846:2884   */\n  tag_56\n    /* \"#utility.yul\":2878:2882   */\n  dup5\n    /* \"#utility.yul\":2872:2883   */\n  sload\n    /* \"#utility.yul\":2846:2884   */\n  tag_22\n  jump\t// in\ntag_56:\n    /* \"#utility.yul\":2840:2844   */\n  dup5\n    /* \"#utility.yul\":2796:2893   */\n  tag_24\n  jump\t// in\ntag_55:\n    /* \"#utility.yul\":2948:2952   */\n  0x20\n  dup1\n    /* \"#utility.yul\":3012:3014   */\n  0x1f\n    /* \"#utility.yul\":3001:3015   */\n  dup4\n  gt\n    /* \"#utility.yul\":3029:3030   */\n  0x01\n    /* \"#utility.yul\":3024:3687   */\n  dup2\n  eq\n  tag_58\n  jumpi\n    /* \"#utility.yul\":3731:3732   */\n  0x00\n    /* \"#utility.yul\":3748:3754   */\n  dup5\n    /* \"#utility.yul\":3745:3834   */\n  iszero\n  tag_59\n  jumpi\n  pop\n    /* \"#utility.yul\":3800:3819   */\n  dup6\n  dup4\n  add\n    /* \"#utility.yul\":3794:3820   */\n  mload\n    /* \"#utility.yul\":3745:3834   */\ntag_59:\n  not(0x00)\n    /* \"#utility.yul\":2549:2550   */\n  0x03\n    /* \"#utility.yul\":2545:2556   */\n  dup7\n  swap1\n  shl\n    /* \"#utility.yul\":2541:2565   */\n  shr\n    /* \"#utility.yul\":2537:2566   */\n  not\n    /* \"#utility.yul\":2527:2567   */\n  and\n    /* \"#utility.yul\":2573:2574   */\n  0x01\n    /* \"#utility.yul\":2569:2580   */\n  dup6\n  swap1\n  shl\n    /* \"#utility.yul\":2524:2581   */\n  or\n    /* \"#utility.yul\":3847:3928   */\n  dup6\n  sstore\n    /* \"#utility.yul\":2994:3938   */\n  jump(tag_50)\n    /* \"#utility.yul\":3024:3687   */\ntag_58:\n    /* \"#utility.yul\":1818:1819   */\n  0x00\n    /* \"#utility.yul\":1811:1825   */\n  dup6\n  dup2\n  mstore\n    /* \"#utility.yul\":1855:1859   */\n  0x20\n    /* \"#utility.yul\":1842:1860   */\n  dup2\n  keccak256\n  not(0x1f)\n    /* \"#utility.yul\":3060:3080   */\n  dup7\n  and\n  swap2\n    /* \"#utility.yul\":3178:3414   */\ntag_62:\n    /* \"#utility.yul\":3192:3199   */\n  dup3\n    /* \"#utility.yul\":3189:3190   */\n  dup2\n    /* \"#utility.yul\":3186:3200   */\n  lt\n    /* \"#utility.yul\":3178:3414   */\n  iszero\n  tag_64\n  jumpi\n    /* \"#utility.yul\":3281:3300   */\n  dup9\n  dup7\n  add\n    /* \"#utility.yul\":3275:3301   */\n  mload\n    /* \"#utility.yul\":3260:3302   */\n  dup3\n  sstore\n    /* \"#utility.yul\":3373:3400   */\n  swap5\n  dup5\n  add\n  swap5\n    /* \"#utility.yul\":3341:3342   */\n  0x01\n    /* \"#utility.yul\":3329:3343   */\n  swap1\n  swap2\n  add\n  swap1\n    /* \"#utility.yul\":3208:3227   */\n  dup5\n  add\n    /* \"#utility.yul\":3178:3414   */\n  jump(tag_62)\ntag_64:\n    /* \"#utility.yul\":3182:3185   */\n  pop\n    /* \"#utility.yul\":3442:3448   */\n  dup6\n    /* \"#utility.yul\":3433:3440   */\n  dup3\n    /* \"#utility.yul\":3430:3449   */\n  lt\n    /* \"#utility.yul\":3427:3628   */\n  iszero\n  tag_65\n  jumpi\n    /* \"#utility.yul\":3503:3522   */\n  dup8\n  dup6\n  add\n    /* \"#utility.yul\":3497:3523   */\n  mload\n  not(0x00)\n    /* \"#utility.yul\":3586:3587   */\n  0x03\n    /* \"#utility.yul\":3582:3596   */\n  dup9\n  swap1\n  shl\n    /* \"#utility.yul\":3598:3601   */\n  0xf8\n    /* \"#utility.yul\":3578:3602   */\n  and\n    /* \"#utility.yul\":3574:3611   */\n  shr\n    /* \"#utility.yul\":3570:3612   */\n  not\n    /* \"#utility.yul\":3555:3613   */\n  and\n    /* \"#utility.yul\":3540:3614   */\n  dup2\n  sstore\n    /* \"#utility.yul\":3427:3628   */\ntag_65:\n  pop\n  pop\n  pop\n  pop\n  pop\n    /* \"#utility.yul\":3674:3675   */\n  0x01\n    /* \"#utility.yul\":3658:3672   */\n  swap1\n  dup2\n  shl\n    /* \"#utility.yul\":3654:3676   */\n  add\n    /* \"#utility.yul\":3641:3677   */\n  swap1\n  sstore\n  pop\n    /* \"#utility.yul\":2592:3944   */\n  jump\t// out\n    /* \"#utility.yul\":3949:4152   */\ntag_26:\n    /* \"PictureToken.sol\":196:1311  contract PictureToken is ERC721, Ownable {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"PictureToken.sol\":196:1311  contract PictureToken is ERC721, Ownable {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x854cbb4a\n      gt\n      tag_26\n      jumpi\n      dup1\n      0xa035b1fe\n      gt\n      tag_27\n      jumpi\n      dup1\n      0xa035b1fe\n      eq\n      tag_20\n      jumpi\n      dup1\n      0xa22cb465\n      eq\n      tag_21\n      jumpi\n      dup1\n      0xb88d4fde\n      eq\n      tag_22\n      jumpi\n      dup1\n      0xc87b56dd\n      eq\n      tag_23\n      jumpi\n      dup1\n      0xe985e9c5\n      eq\n      tag_24\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_25\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_27:\n      dup1\n      0x854cbb4a\n      eq\n      tag_14\n      jumpi\n      dup1\n      0x8c2a5bc8\n      eq\n      tag_15\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_16\n      jumpi\n      dup1\n      0x91b7f5ed\n      eq\n      tag_17\n      jumpi\n      dup1\n      0x95d89b41\n      eq\n      tag_18\n      jumpi\n      dup1\n      0x98d5fdca\n      eq\n      tag_19\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_26:\n      dup1\n      0x42842e0e\n      gt\n      tag_28\n      jumpi\n      dup1\n      0x42842e0e\n      eq\n      tag_8\n      jumpi\n      dup1\n      0x5987cc19\n      eq\n      tag_9\n      jumpi\n      dup1\n      0x6352211e\n      eq\n      tag_10\n      jumpi\n      dup1\n      0x64edfbf0\n      eq\n      tag_11\n      jumpi\n      dup1\n      0x70a08231\n      eq\n      tag_12\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_13\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_28:\n      dup1\n      0x01ffc9a7\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x06fdde03\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x081812fc\n      eq\n      tag_5\n      jumpi\n      dup1\n      0x095ea7b3\n      eq\n      tag_6\n      jumpi\n      dup1\n      0x23b872dd\n      eq\n      tag_7\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1607:1912  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_3:\n      tag_29\n      tag_30\n      calldatasize\n      0x04\n      tag_31\n      jump\t// in\n    tag_30:\n      tag_32\n      jump\t// in\n    tag_29:\n      mload(0x40)\n        /* \"#utility.yul\":565:579   */\n      swap1\n      iszero\n        /* \"#utility.yul\":558:580   */\n      iszero\n        /* \"#utility.yul\":540:581   */\n      dup2\n      mstore\n        /* \"#utility.yul\":528:530   */\n      0x20\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1607:1912  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_33:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2438:2529  function name() public view virtual returns (string memory) {... */\n    tag_4:\n      tag_35\n      tag_36\n      jump\t// in\n    tag_35:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_38\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3610:3768  function getApproved(uint256 tokenId) public view virtual returns (address) {... */\n    tag_5:\n      tag_39\n      tag_40\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_40:\n      tag_42\n      jump\t// in\n    tag_39:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1697:1729   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":1679:1730   */\n      dup2\n      mstore\n        /* \"#utility.yul\":1667:1669   */\n      0x20\n        /* \"#utility.yul\":1652:1670   */\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3610:3768  function getApproved(uint256 tokenId) public view virtual returns (address) {... */\n      tag_33\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3429:3544  function approve(address to, uint256 tokenId) public virtual {... */\n    tag_6:\n      tag_45\n      tag_46\n      calldatasize\n      0x04\n      tag_47\n      jump\t// in\n    tag_46:\n      tag_48\n      jump\t// in\n    tag_45:\n      stop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4279:4867  function transferFrom(address from, address to, uint256 tokenId) public virtual {... */\n    tag_7:\n      tag_45\n      tag_50\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_50:\n      tag_52\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4938:5072  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_8:\n      tag_45\n      tag_54\n      calldatasize\n      0x04\n      tag_51\n      jump\t// in\n    tag_54:\n      tag_55\n      jump\t// in\n        /* \"PictureToken.sol\":980:1050  function putOnSale() public onlyOwner {... */\n    tag_9:\n      tag_45\n      tag_57\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2251:2371  function ownerOf(uint256 tokenId) public view virtual returns (address) {... */\n    tag_10:\n      tag_39\n      tag_59\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_59:\n      tag_60\n      jump\t// in\n        /* \"PictureToken.sol\":1140:1306  function purchase() public {... */\n    tag_11:\n      tag_45\n      tag_63\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1976:2189  function balanceOf(address owner) public view virtual returns (uint256) {... */\n    tag_12:\n      tag_64\n      tag_65\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_65:\n      tag_67\n      jump\t// in\n    tag_64:\n      mload(0x40)\n        /* \"#utility.yul\":2848:2873   */\n      swap1\n      dup2\n      mstore\n        /* \"#utility.yul\":2836:2838   */\n      0x20\n        /* \"#utility.yul\":2821:2839   */\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1976:2189  function balanceOf(address owner) public view virtual returns (uint256) {... */\n      tag_33\n        /* \"#utility.yul\":2702:2879   */\n      jump\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2368:2471  function renounceOwnership() public virtual onlyOwner {... */\n    tag_13:\n      tag_45\n      tag_71\n      jump\t// in\n        /* \"PictureToken.sol\":647:792  function getSinglePictureToken() public view returns(tokenData memory) {... */\n    tag_14:\n      tag_72\n      tag_73\n      jump\t// in\n    tag_72:\n      mload(0x40)\n      tag_33\n      swap2\n      swap1\n      tag_75\n      jump\t// in\n        /* \"PictureToken.sol\":1058:1132  function notPutOnSale() public onlyOwner {... */\n    tag_15:\n      tag_45\n      tag_77\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1693:1780  function owner() public view virtual returns (address) {... */\n    tag_16:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1766:1772  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x06))\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1693:1780  function owner() public view virtual returns (address) {... */\n      jump(tag_39)\n        /* \"PictureToken.sol\":888:972  function setPrice(uint256 _price) public onlyOwner {... */\n    tag_17:\n      tag_45\n      tag_82\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_82:\n      tag_83\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2598:2693  function symbol() public view virtual returns (string memory) {... */\n    tag_18:\n      tag_35\n      tag_85\n      jump\t// in\n        /* \"PictureToken.sol\":800:880  function getPrice() public view returns(uint256) {... */\n    tag_19:\n        /* \"PictureToken.sol\":867:872  price */\n      sload(0x08)\n        /* \"PictureToken.sol\":800:880  function getPrice() public view returns(uint256) {... */\n      jump(tag_64)\n        /* \"PictureToken.sol\":265:285  uint256 public price */\n    tag_20:\n      tag_64\n      sload(0x08)\n      dup2\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3840:3986  function setApprovalForAll(address operator, bool approved) public virtual {... */\n    tag_21:\n      tag_45\n      tag_94\n      calldatasize\n      0x04\n      tag_95\n      jump\t// in\n    tag_94:\n      tag_96\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5143:5354  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {... */\n    tag_22:\n      tag_45\n      tag_98\n      calldatasize\n      0x04\n      tag_99\n      jump\t// in\n    tag_98:\n      tag_100\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2764:3024  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {... */\n    tag_23:\n      tag_35\n      tag_102\n      calldatasize\n      0x04\n      tag_41\n      jump\t// in\n    tag_102:\n      tag_103\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4057:4212  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {... */\n    tag_24:\n      tag_29\n      tag_106\n      calldatasize\n      0x04\n      tag_107\n      jump\t// in\n    tag_106:\n      tag_108\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2626:2846  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_25:\n      tag_45\n      tag_111\n      calldatasize\n      0x04\n      tag_66\n      jump\t// in\n    tag_111:\n      tag_112\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1607:1912  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n    tag_32:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1709:1713  bool */\n      0x00\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1746:1786  interfaceId == type(IERC721).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x80ac58cd)\n      eq\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1746:1851  interfaceId == type(IERC721).interfaceId ||... */\n      tag_114\n      jumpi\n      pop\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1803:1851  interfaceId == type(IERC721Metadata).interfaceId */\n      dup3\n      and\n      shl(0xe0, 0x5b5e139f)\n      eq\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1746:1851  interfaceId == type(IERC721).interfaceId ||... */\n    tag_114:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1746:1904  interfaceId == type(IERC721).interfaceId ||... */\n      dup1\n      tag_116\n      jumpi\n      pop\n      shl(0xe0, 0x01ffc9a7)\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":885:925  interfaceId == type(IERC165).interfaceId */\n      dup4\n      and\n      eq\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1868:1904  super.supportsInterface(interfaceId) */\n    tag_116:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1726:1904  return... */\n      swap3\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1607:1912  function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2438:2529  function name() public view virtual returns (string memory) {... */\n    tag_36:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2483:2496  string memory */\n      0x60\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2516:2521  _name */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2509:2521  return _name */\n      dup1\n      sload\n      tag_119\n      swap1\n      tag_120\n      jump\t// in\n    tag_119:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_121\n      swap1\n      tag_120\n      jump\t// in\n    tag_121:\n      dup1\n      iszero\n      tag_122\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_123\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_122)\n    tag_123:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_124:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_124\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_122:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2438:2529  function name() public view virtual returns (string memory) {... */\n      swap1\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3610:3768  function getApproved(uint256 tokenId) public view virtual returns (address) {... */\n    tag_42:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3677:3684  address */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3697:3719  _requireOwned(tokenId) */\n      tag_126\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3711:3718  tokenId */\n      dup3\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3697:3710  _requireOwned */\n      tag_127\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3697:3719  _requireOwned(tokenId) */\n      jump\t// in\n    tag_126:\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6186:6193  address */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6237  _tokenApprovals[tokenId] */\n      dup3\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6228  _tokenApprovals */\n      0x04\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6237  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3739:3760  _getApproved(tokenId) */\n      tag_116\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6116:6245  function _getApproved(uint256 tokenId) internal view virtual returns (address) {... */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3429:3544  function approve(address to, uint256 tokenId) public virtual {... */\n    tag_48:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3501:3536  _approve(to, tokenId, _msgSender()) */\n      tag_131\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3510:3512  to */\n      dup3\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3514:3521  tokenId */\n      dup3\n        /* \"openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3501:3509  _approve */\n      tag_134\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3501:3536  _approve(to, tokenId, _msgSender()) */\n      jump\t// in\n    tag_131:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3429:3544  function approve(address to, uint256 tokenId) public virtual {... */\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4279:4867  function transferFrom(address from, address to, uint256 tokenId) public virtual {... */\n    tag_52:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4374:4390  to == address(0) */\n      dup3\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4370:4459  if (to == address(0)) {... */\n      tag_136\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4414:4447  ERC721InvalidReceiver(address(0)) */\n      mload(0x40)\n      shl(0xe1, 0x32505749)\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4444:4445  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4414:4447  ERC721InvalidReceiver(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4414:4447  ERC721InvalidReceiver(address(0)) */\n    tag_137:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4370:4459  if (to == address(0)) {... */\n    tag_136:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4680:4701  address previousOwner */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4704:4738  _update(to, tokenId, _msgSender()) */\n      tag_138\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4712:4714  to */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4716:4723  tokenId */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4704:4711  _update */\n      tag_140\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4704:4738  _update(to, tokenId, _msgSender()) */\n      jump\t// in\n    tag_138:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4680:4738  address previousOwner = _update(to, tokenId, _msgSender()) */\n      swap1\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4770:4774  from */\n      dup4\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4753:4774  previousOwner != from */\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4753:4766  previousOwner */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4753:4774  previousOwner != from */\n      and\n      eq\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4749:4860  if (previousOwner != from) {... */\n      tag_141\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4798:4848  ERC721IncorrectOwner(from, tokenId, previousOwner) */\n      mload(0x40)\n      shl(0xe0, 0x64283d7b)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6016:6031   */\n      dup1\n      dup7\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4798:4848  ERC721IncorrectOwner(from, tokenId, previousOwner) */\n      0x04\n      dup4\n      add\n        /* \"#utility.yul\":5998:6032   */\n      mstore\n        /* \"#utility.yul\":6048:6066   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":6041:6075   */\n      dup5\n      swap1\n      mstore\n        /* \"#utility.yul\":6111:6126   */\n      dup3\n      and\n        /* \"#utility.yul\":6091:6109   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":6084:6127   */\n      mstore\n        /* \"#utility.yul\":5933:5951   */\n      0x64\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4798:4848  ERC721IncorrectOwner(from, tokenId, previousOwner) */\n      tag_137\n        /* \"#utility.yul\":5758:6133   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4749:4860  if (previousOwner != from) {... */\n    tag_141:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4359:4867  {... */\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4279:4867  function transferFrom(address from, address to, uint256 tokenId) public virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4938:5072  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n    tag_55:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5025:5064  safeTransferFrom(from, to, tokenId, \"\") */\n      tag_145\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5042:5046  from */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5048:5050  to */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5052:5059  tokenId */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5025:5064  safeTransferFrom(from, to, tokenId, \"\") */\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5025:5041  safeTransferFrom */\n      tag_100\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5025:5064  safeTransferFrom(from, to, tokenId, \"\") */\n      jump\t// in\n    tag_145:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4938:5072  function safeTransferFrom(address from, address to, uint256 tokenId) public {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"PictureToken.sol\":980:1050  function putOnSale() public onlyOwner {... */\n    tag_57:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      tag_147\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1590  _checkOwner */\n      tag_148\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      jump\t// in\n    tag_147:\n        /* \"PictureToken.sol\":1029:1035  onSale */\n      0x09\n        /* \"PictureToken.sol\":1029:1042  onSale = true */\n      dup1\n      sload\n      not(0xff)\n      and\n        /* \"PictureToken.sol\":1038:1042  true */\n      0x01\n        /* \"PictureToken.sol\":1029:1042  onSale = true */\n      or\n      swap1\n      sstore\n        /* \"PictureToken.sol\":980:1050  function putOnSale() public onlyOwner {... */\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2251:2371  function ownerOf(uint256 tokenId) public view virtual returns (address) {... */\n    tag_60:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2314:2321  address */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2341:2363  _requireOwned(tokenId) */\n      tag_116\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2355:2362  tokenId */\n      dup3\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2341:2354  _requireOwned */\n      tag_127\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2341:2363  _requireOwned(tokenId) */\n      jump\t// in\n        /* \"PictureToken.sol\":1140:1306  function purchase() public {... */\n    tag_63:\n        /* \"PictureToken.sol\":1207:1212  price */\n      sload(0x08)\n        /* \"PictureToken.sol\":1178:1213  payable(msg.sender).transfer(price) */\n      mload(0x40)\n        /* \"PictureToken.sol\":1186:1196  msg.sender */\n      caller\n      swap2\n        /* \"PictureToken.sol\":1178:1213  payable(msg.sender).transfer(price) */\n      dup1\n      iszero\n      0x08fc\n      mul\n      swap2\n      0x00\n      dup2\n      dup2\n      dup2\n        /* \"PictureToken.sol\":1207:1212  price */\n      dup6\n        /* \"PictureToken.sol\":1186:1196  msg.sender */\n      dup9\n        /* \"PictureToken.sol\":1178:1213  payable(msg.sender).transfer(price) */\n      dup9\n      call\n      swap4\n      pop\n      pop\n      pop\n      pop\n      iszero\n      dup1\n      iszero\n      tag_154\n      jumpi\n      returndatasize\n      0x00\n      dup1\n      returndatacopy\n      revert(0x00, returndatasize)\n    tag_154:\n      pop\n        /* \"PictureToken.sol\":1224:1253  transferOwnership(msg.sender) */\n      tag_155\n        /* \"PictureToken.sol\":1242:1252  msg.sender */\n      caller\n        /* \"PictureToken.sol\":1224:1241  transferOwnership */\n      tag_112\n        /* \"PictureToken.sol\":1224:1253  transferOwnership(msg.sender) */\n      jump\t// in\n    tag_155:\n        /* \"PictureToken.sol\":1272:1273  0 */\n      0x00\n        /* \"PictureToken.sol\":1264:1269  price */\n      0x08\n        /* \"PictureToken.sol\":1264:1273  price = 0 */\n      sstore\n        /* \"PictureToken.sol\":1284:1290  onSale */\n      0x09\n        /* \"PictureToken.sol\":1284:1298  onSale = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"PictureToken.sol\":1140:1306  function purchase() public {... */\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1976:2189  function balanceOf(address owner) public view virtual returns (uint256) {... */\n    tag_67:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2039:2046  uint256 */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2063:2082  owner == address(0) */\n      dup3\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2059:2148  if (owner == address(0)) {... */\n      tag_157\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2106:2136  ERC721InvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe2, 0x22718ad9)\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2133:2134  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2106:2136  ERC721InvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2106:2136  ERC721InvalidOwner(address(0)) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2059:2148  if (owner == address(0)) {... */\n    tag_157:\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2165:2181  _balances[owner] */\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2165:2174  _balances */\n      0x03\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2165:2181  _balances[owner] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":1976:2189  function balanceOf(address owner) public view virtual returns (uint256) {... */\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2368:2471  function renounceOwnership() public virtual onlyOwner {... */\n    tag_71:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      tag_160\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1590  _checkOwner */\n      tag_148\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      jump\t// in\n    tag_160:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2433:2463  _transferOwnership(address(0)) */\n      tag_162\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2460:2461  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2433:2451  _transferOwnership */\n      tag_163\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2433:2463  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_162:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2368:2471  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"PictureToken.sol\":647:792  function getSinglePictureToken() public view returns(tokenData memory) {... */\n    tag_73:\n        /* \"PictureToken.sol\":700:716  tokenData memory */\n      tag_164\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n      and(sub(shl(0xa0, 0x01), 0x01), 0x00)\n      dup2\n      mstore\n      0x20\n      add\n      0x60\n      dup2\n      mstore\n      0x20\n      add\n      0x00\n      dup2\n      mstore\n      0x20\n      add\n      iszero(iszero(0x00))\n      dup2\n      mstore\n      pop\n      swap1\n      jump\n    tag_164:\n        /* \"PictureToken.sol\":736:784  tokenData(Ownable.owner(), image, price, onSale) */\n      mload(0x40)\n      dup1\n      0x80\n      add\n      0x40\n      mstore\n      dup1\n        /* \"PictureToken.sol\":746:761  Ownable.owner() */\n      tag_167\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1766:1772  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x06))\n      swap1\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1693:1780  function owner() public view virtual returns (address) {... */\n      jump\n        /* \"PictureToken.sol\":746:761  Ownable.owner() */\n    tag_167:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"PictureToken.sol\":736:784  tokenData(Ownable.owner(), image, price, onSale) */\n      and\n      dup2\n      mstore\n      0x20\n      add\n        /* \"PictureToken.sol\":763:768  image */\n      0x07\n        /* \"PictureToken.sol\":736:784  tokenData(Ownable.owner(), image, price, onSale) */\n      dup1\n      sload\n      tag_168\n      swap1\n      tag_120\n      jump\t// in\n    tag_168:\n      dup1\n      0x1f\n      add\n      0x20\n      dup1\n      swap2\n      div\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      tag_169\n      swap1\n      tag_120\n      jump\t// in\n    tag_169:\n      dup1\n      iszero\n      tag_170\n      jumpi\n      dup1\n      0x1f\n      lt\n      tag_171\n      jumpi\n      0x0100\n      dup1\n      dup4\n      sload\n      div\n      mul\n      dup4\n      mstore\n      swap2\n      0x20\n      add\n      swap2\n      jump(tag_170)\n    tag_171:\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_172:\n      dup2\n      sload\n      dup2\n      mstore\n      swap1\n      0x01\n      add\n      swap1\n      0x20\n      add\n      dup1\n      dup4\n      gt\n      tag_172\n      jumpi\n      dup3\n      swap1\n      sub\n      0x1f\n      and\n      dup3\n      add\n      swap2\n    tag_170:\n      pop\n      pop\n      pop\n      swap2\n      dup4\n      mstore\n      pop\n      pop\n        /* \"PictureToken.sol\":770:775  price */\n      sload(0x08)\n        /* \"PictureToken.sol\":736:784  tokenData(Ownable.owner(), image, price, onSale) */\n      0x20\n      dup3\n      add\n      mstore\n        /* \"PictureToken.sol\":777:783  onSale */\n      and(0xff, sload(0x09))\n        /* \"PictureToken.sol\":736:784  tokenData(Ownable.owner(), image, price, onSale) */\n      iszero\n      iszero\n      0x40\n      swap1\n      swap2\n      add\n      mstore\n        /* \"PictureToken.sol\":729:784  return tokenData(Ownable.owner(), image, price, onSale) */\n      swap2\n        /* \"PictureToken.sol\":647:792  function getSinglePictureToken() public view returns(tokenData memory) {... */\n      swap1\n      pop\n      jump\t// out\n        /* \"PictureToken.sol\":1058:1132  function notPutOnSale() public onlyOwner {... */\n    tag_77:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      tag_174\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1590  _checkOwner */\n      tag_148\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      jump\t// in\n    tag_174:\n        /* \"PictureToken.sol\":1110:1116  onSale */\n      0x09\n        /* \"PictureToken.sol\":1110:1124  onSale = false */\n      dup1\n      sload\n      not(0xff)\n      and\n      swap1\n      sstore\n        /* \"PictureToken.sol\":1058:1132  function notPutOnSale() public onlyOwner {... */\n      jump\t// out\n        /* \"PictureToken.sol\":888:972  function setPrice(uint256 _price) public onlyOwner {... */\n    tag_83:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      tag_178\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1590  _checkOwner */\n      tag_148\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      jump\t// in\n    tag_178:\n        /* \"PictureToken.sol\":950:955  price */\n      0x08\n        /* \"PictureToken.sol\":950:964  price = _price */\n      sstore\n        /* \"PictureToken.sol\":888:972  function setPrice(uint256 _price) public onlyOwner {... */\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2598:2693  function symbol() public view virtual returns (string memory) {... */\n    tag_85:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2645:2658  string memory */\n      0x60\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2678:2685  _symbol */\n      0x01\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2671:2685  return _symbol */\n      dup1\n      sload\n      tag_119\n      swap1\n      tag_120\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3840:3986  function setApprovalForAll(address operator, bool approved) public virtual {... */\n    tag_96:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3926:3978  _setApprovalForAll(_msgSender(), operator, approved) */\n      tag_131\n        /* \"openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3959:3967  operator */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3969:3977  approved */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3926:3944  _setApprovalForAll */\n      tag_190\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":3926:3978  _setApprovalForAll(_msgSender(), operator, approved) */\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5143:5354  function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {... */\n    tag_100:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5257:5288  transferFrom(from, to, tokenId) */\n      tag_192\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5270:5274  from */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5276:5278  to */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5280:5287  tokenId */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5257:5269  transferFrom */\n      tag_52\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5257:5288  transferFrom(from, to, tokenId) */\n      jump\t// in\n    tag_192:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5299:5346  _checkOnERC721Received(from, to, tokenId, data) */\n      tag_141\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5322:5326  from */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5328:5330  to */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5332:5339  tokenId */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5341:5345  data */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5299:5321  _checkOnERC721Received */\n      tag_194\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5299:5346  _checkOnERC721Received(from, to, tokenId, data) */\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2764:3024  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {... */\n    tag_103:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2828:2841  string memory */\n      0x60\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2854:2876  _requireOwned(tokenId) */\n      tag_196\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2868:2875  tokenId */\n      dup3\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2854:2867  _requireOwned */\n      tag_127\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2854:2876  _requireOwned(tokenId) */\n      jump\t// in\n    tag_196:\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2889:2910  string memory baseURI */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2913:2923  _baseURI() */\n      tag_197\n        /* \"PictureToken.sol\":598:631  return \"ipfs://pieceTokenBaseURI\" */\n      0x40\n      dup1\n      mload\n      dup1\n      dup3\n      add\n      swap1\n      swap2\n      mstore\n      0x18\n      dup2\n      mstore\n      0x697066733a2f2f7069656365546f6b656e426173655552490000000000000000\n      0x20\n      dup3\n      add\n      mstore\n      swap1\n        /* \"PictureToken.sol\":520:639  function _baseURI() internal pure override returns (string memory) {... */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2913:2923  _baseURI() */\n    tag_197:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2889:2923  string memory baseURI = _baseURI() */\n      swap1\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2965:2966  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2947:2954  baseURI */\n      dup2\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2941:2962  bytes(baseURI).length */\n      mload\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2941:2966  bytes(baseURI).length > 0 */\n      gt\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2941:3016  bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\" */\n      tag_199\n      jumpi\n      mload(0x40)\n      dup1\n      0x20\n      add\n      0x40\n      mstore\n      dup1\n      0x00\n      dup2\n      mstore\n      pop\n      jump(tag_200)\n    tag_199:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2983:2990  baseURI */\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2992:3010  tokenId.toString() */\n      tag_201\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2992:2999  tokenId */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2992:3008  tokenId.toString */\n      tag_202\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2992:3010  tokenId.toString() */\n      jump\t// in\n    tag_201:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2969:3011  string.concat(baseURI, tokenId.toString()) */\n      add(0x20, mload(0x40))\n      tag_203\n      swap3\n      swap2\n      swap1\n      tag_204\n      jump\t// in\n    tag_203:\n      mload(0x40)\n      0x20\n      dup2\n      dup4\n      sub\n      sub\n      dup2\n      mstore\n      swap1\n      0x40\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2941:3016  bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\" */\n    tag_200:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2934:3016  return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \"\" */\n      swap4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":2764:3024  function tokenURI(uint256 tokenId) public view virtual returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4057:4212  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {... */\n    tag_108:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4194  _operatorApprovals[owner] */\n      swap2\n      dup3\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4145:4149  bool */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4194  _operatorApprovals[owner] */\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4187  _operatorApprovals */\n      0x05\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4194  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4169:4204  _operatorApprovals[owner][operator] */\n      swap4\n      swap1\n      swap5\n      and\n      dup3\n      mstore\n      swap2\n      swap1\n      swap2\n      mstore\n      keccak256\n      sload\n      0xff\n      and\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":4057:4212  function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {... */\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2626:2846  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_112:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      tag_207\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1590  _checkOwner */\n      tag_148\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1579:1592  _checkOwner() */\n      jump\t// in\n    tag_207:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2711:2733  newOwner == address(0) */\n      dup2\n      and\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2707:2800  if (newOwner == address(0)) {... */\n      tag_209\n      jumpi\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2757:2788  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2785:2786  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2757:2788  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2757:2788  OwnableInvalidOwner(address(0)) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2707:2800  if (newOwner == address(0)) {... */\n    tag_209:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2810:2838  _transferOwnership(newOwner) */\n      tag_211\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2829:2837  newOwner */\n      dup2\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2810:2828  _transferOwnership */\n      tag_163\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2810:2838  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_211:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":2626:2846  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16585:16832  function _requireOwned(uint256 tokenId) internal view returns (address) {... */\n    tag_127:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16648:16655  address */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5971:5987  _owners[tokenId] */\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5971:5978  _owners */\n      0x02\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5971:5987  _owners[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16712:16802  if (owner == address(0)) {... */\n      tag_116\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16759:16790  ERC721NonexistentToken(tokenId) */\n      mload(0x40)\n      shl(0xe0, 0x7e273289)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":2848:2873   */\n      dup5\n      swap1\n      mstore\n        /* \"#utility.yul\":2821:2839   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16759:16790  ERC721NonexistentToken(tokenId) */\n      tag_137\n        /* \"#utility.yul\":2702:2879   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14817:14939  function _approve(address to, uint256 tokenId, address auth) internal {... */\n    tag_134:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14898:14931  _approve(to, tokenId, auth, true) */\n      tag_145\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14907:14909  to */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14911:14918  tokenId */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14920:14924  auth */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14926:14930  true */\n      0x01\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14898:14906  _approve */\n      tag_222\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":14898:14931  _approve(to, tokenId, auth, true) */\n      jump\t// in\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9078:9902  function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {... */\n    tag_140:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9164:9171  address */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5971:5987  _owners[tokenId] */\n      dup3\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5971:5978  _owners */\n      0x02\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":5971:5987  _owners[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup2\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      swap1\n      dup2\n      and\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9279:9297  auth != address(0) */\n      dup4\n      and\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9275:9363  if (auth != address(0)) {... */\n      tag_226\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9314:9351  _checkAuthorized(from, auth, tokenId) */\n      tag_226\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9331:9335  from */\n      dup2\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9337:9341  auth */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9343:9350  tokenId */\n      dup7\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9314:9330  _checkAuthorized */\n      tag_227\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9314:9351  _checkAuthorized(from, auth, tokenId) */\n      jump\t// in\n    tag_226:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9410:9428  from != address(0) */\n      dup2\n      and\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9406:9669  if (from != address(0)) {... */\n      tag_228\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9528:9576  _approve(address(0), tokenId, address(0), false) */\n      tag_229\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9545:9546  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9549:9556  tokenId */\n      dup6\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9566:9567  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9570:9575  false */\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9528:9536  _approve */\n      tag_222\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9528:9576  _approve(address(0), tokenId, address(0), false) */\n      jump\t// in\n    tag_229:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9622:9637  _balances[from] */\n      dup2\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9622:9631  _balances */\n      0x03\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9622:9637  _balances[from] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9622:9642  _balances[from] -= 1 */\n      dup1\n      sload\n      not(0x00)\n      add\n      swap1\n      sstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9406:9669  if (from != address(0)) {... */\n    tag_228:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9685:9701  to != address(0) */\n      dup6\n      and\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9681:9792  if (to != address(0)) {... */\n      tag_230\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9747:9760  _balances[to] */\n      dup6\n      and\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9747:9756  _balances */\n      0x03\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9747:9760  _balances[to] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9747:9765  _balances[to] += 1 */\n      dup1\n      sload\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9764:9765  1 */\n      0x01\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9747:9765  _balances[to] += 1 */\n      add\n      swap1\n      sstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9681:9792  if (to != address(0)) {... */\n    tag_230:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9804:9820  _owners[tokenId] */\n      0x00\n      dup5\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9804:9811  _owners */\n      0x02\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9804:9820  _owners[tokenId] */\n      0x20\n      mstore\n      0x40\n      dup1\n      dup3\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9804:9825  _owners[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup10\n      dup2\n      and\n      swap2\n      dup3\n      or\n      swap1\n      swap3\n      sstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9843:9870  Transfer(from, to, tokenId) */\n      swap2\n      mload\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9804:9820  _owners[tokenId] */\n      dup8\n      swap4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9843:9870  Transfer(from, to, tokenId) */\n      swap2\n      dup6\n      and\n      swap2\n      0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\n      swap2\n      log4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9890:9894  from */\n      swap5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":9078:9902  function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1858:2024  function _checkOwner() internal view virtual {... */\n    tag_148:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1766:1772  _owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x06))\n        /* \"openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1918:1941  owner() != _msgSender() */\n      eq\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1914:2017  if (owner() != _msgSender()) {... */\n      tag_162\n      jumpi\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1965:2005  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1965:2005  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":1965:2005  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3006:3197  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_163:\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3099:3105  _owner */\n      0x06\n      dup1\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3116:3133  _owner = newOwner */\n      dup4\n      dup2\n      and\n      not(sub(shl(0xa0, 0x01), 0x01))\n      dup4\n      and\n      dup2\n      or\n      swap1\n      swap4\n      sstore\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3149:3189  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3099:3105  _owner */\n      swap2\n      and\n      swap2\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3116:3133  _owner = newOwner */\n      swap1\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3099:3105  _owner */\n      dup3\n      swap1\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3149:3189  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3080:3096  address oldOwner */\n      0x00\n      swap1\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3149:3189  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3069:3197  {... */\n      pop\n        /* \"openzeppelin-contracts/contracts/access/Ownable.sol\":3006:3197  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16024:16342  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {... */\n    tag_190:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16132:16154  operator == address(0) */\n      dup3\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16128:16221  if (operator == address(0)) {... */\n      tag_239\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16178:16209  ERC721InvalidOperator(operator) */\n      mload(0x40)\n      shl(0xe3, 0x0b611743)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1697:1729   */\n      dup4\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16178:16209  ERC721InvalidOperator(operator) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16178:16209  ERC721InvalidOperator(operator) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16128:16221  if (operator == address(0)) {... */\n    tag_239:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16231:16256  _operatorApprovals[owner] */\n      dup4\n      dup2\n      and\n      0x00\n      dup2\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16231:16249  _operatorApprovals */\n      0x05\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16231:16256  _operatorApprovals[owner] */\n      0x20\n      swap1\n      dup2\n      mstore\n      0x40\n      dup1\n      dup4\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16231:16266  _operatorApprovals[owner][operator] */\n      swap5\n      dup8\n      and\n      dup1\n      dup5\n      mstore\n      swap5\n      dup3\n      mstore\n      swap2\n      dup3\n      swap1\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16231:16277  _operatorApprovals[owner][operator] = approved */\n      dup1\n      sload\n      not(0xff)\n      and\n      dup7\n      iszero\n      iszero\n      swap1\n      dup2\n      or\n      swap1\n      swap2\n      sstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16293:16334  ApprovalForAll(owner, operator, approved) */\n      swap2\n      mload\n        /* \"#utility.yul\":540:581   */\n      swap2\n      dup3\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16293:16334  ApprovalForAll(owner, operator, approved) */\n      0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31\n      swap2\n        /* \"#utility.yul\":513:531   */\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16293:16334  ApprovalForAll(owner, operator, approved) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log3\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":16024:16342  function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17382:18181  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {... */\n    tag_194:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17499:17513  to.code.length */\n      dup4\n      and\n      extcodesize\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17499:17517  to.code.length > 0 */\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17495:18174  if (to.code.length > 0) {... */\n      tag_141\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17538:17609  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      mload(0x40)\n      shl(0xe1, 0x0a85bd01)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17538:17574  IERC721Receiver(to).onERC721Received */\n      dup5\n      and\n      swap1\n      0x150b7a02\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17538:17609  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      tag_245\n      swap1\n        /* \"openzeppelin-contracts/contracts/utils/Context.sol\":752:762  msg.sender */\n      caller\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17589:17593  from */\n      dup9\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17595:17602  tokenId */\n      dup8\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17604:17608  data */\n      dup8\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17538:17609  IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) */\n      0x04\n      add\n      tag_246\n      jump\t// in\n    tag_245:\n      0x20\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      0x00\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      dup1\n      iszero\n      tag_247\n      jumpi\n      pop\n      0x40\n      dup1\n      mload\n      0x1f\n      returndatasize\n      swap1\n      dup2\n      add\n      not(0x1f)\n      and\n      dup3\n      add\n      swap1\n      swap3\n      mstore\n      tag_248\n      swap2\n      dup2\n      add\n      swap1\n      tag_249\n      jump\t// in\n    tag_248:\n      0x01\n    tag_247:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17534:18163  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n      tag_250\n      jumpi\n      returndatasize\n      dup1\n      dup1\n      iszero\n      tag_255\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_254)\n    tag_255:\n      0x60\n      swap2\n      pop\n    tag_254:\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17852:17858  reason */\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17852:17865  reason.length */\n      mload\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17869:17870  0 */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17852:17870  reason.length == 0 */\n      sub\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17848:18148  if (reason.length == 0) {... */\n      tag_256\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17902:17927  ERC721InvalidReceiver(to) */\n      mload(0x40)\n      shl(0xe1, 0x32505749)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1697:1729   */\n      dup6\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17902:17927  ERC721InvalidReceiver(to) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17902:17927  ERC721InvalidReceiver(to) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17848:18148  if (reason.length == 0) {... */\n    tag_256:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":18098:18104  reason */\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":18092:18105  mload(reason) */\n      mload\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":18083:18089  reason */\n      dup2\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":18079:18081  32 */\n      0x20\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":18075:18090  add(32, reason) */\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":18068:18106  revert(add(32, reason), mload(reason)) */\n      revert\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17534:18163  try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {... */\n    tag_250:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17657:17708  retval != IERC721Receiver.onERC721Received.selector */\n      dup2\n      and\n      shl(0xe1, 0x0a85bd01)\n      eq\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17653:17785  if (retval != IERC721Receiver.onERC721Received.selector) {... */\n      tag_260\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17740:17765  ERC721InvalidReceiver(to) */\n      mload(0x40)\n      shl(0xe1, 0x32505749)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1697:1729   */\n      dup6\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17740:17765  ERC721InvalidReceiver(to) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17740:17765  ERC721InvalidReceiver(to) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17653:17785  if (retval != IERC721Receiver.onERC721Received.selector) {... */\n    tag_260:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17610:17800  returns (bytes4 retval) {... */\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":17382:18181  function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {... */\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":660:1378  function toString(uint256 value) internal pure returns (string memory) {... */\n    tag_202:\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":716:729  string memory */\n      0x60\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":767:781  uint256 length */\n      0x00\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":784:801  Math.log10(value) */\n      tag_264\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":795:800  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":784:794  Math.log10 */\n      tag_265\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":784:801  Math.log10(value) */\n      jump\t// in\n    tag_264:\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":804:805  1 */\n      0x01\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":784:805  Math.log10(value) + 1 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":767:805  uint256 length = Math.log10(value) + 1 */\n      swap1\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":820:840  string memory buffer */\n      0x00\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":854:860  length */\n      dup2\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":843:861  new string(length) */\n      0xffffffffffffffff\n      dup2\n      gt\n      iszero\n      tag_267\n      jumpi\n      tag_267\n      tag_268\n      jump\t// in\n    tag_267:\n      mload(0x40)\n      swap1\n      dup1\n      dup3\n      mstore\n      dup1\n      0x1f\n      add\n      not(0x1f)\n      and\n      0x20\n      add\n      dup3\n      add\n      0x40\n      mstore\n      dup1\n      iszero\n      tag_269\n      jumpi\n      0x20\n      dup3\n      add\n      dup2\n      dup1\n      calldatasize\n      dup4\n      calldatacopy\n      add\n      swap1\n      pop\n    tag_269:\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":820:861  string memory buffer = new string(length) */\n      swap1\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":985:1013  add(buffer, add(32, length)) */\n      dup2\n      dup2\n      add\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1001:1003  32 */\n      0x20\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":985:1013  add(buffer, add(32, length)) */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1042:1332  while (true) {... */\n    tag_270:\n      not(0x00)\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1074:1079  ptr-- */\n      add\n      shl(0x81, 0x181899199a1a9b1b9c1cb0b131b232b3)\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1211:1213  10 */\n      0x0a\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1200:1214  mod(value, 10) */\n      dup7\n      mod\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1195:1227  byte(mod(value, 10), HEX_DIGITS) */\n      byte\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1074:1079  ptr-- */\n      dup2\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1182:1228  mstore8(ptr, byte(mod(value, 10), HEX_DIGITS)) */\n      mstore8\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1274:1276  10 */\n      0x0a\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1265:1276  value /= 10 */\n      dup6\n      div\n      swap5\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1295:1316  if (value == 0) break */\n      dup5\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1042:1332  while (true) {... */\n      tag_270\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1295:1316  if (value == 0) break */\n      jumpi\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":1353:1359  buffer */\n      swap4\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":660:1378  function toString(uint256 value) internal pure returns (string memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15127:15805  function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {... */\n    tag_222:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15289:15298  emitEvent */\n      dup1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15289:15320  emitEvent || auth != address(0) */\n      dup1\n      tag_278\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15302:15320  auth != address(0) */\n      dup3\n      and\n      iszero\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15289:15320  emitEvent || auth != address(0) */\n    tag_278:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15285:15756  if (emitEvent || auth != address(0)) {... */\n      iszero\n      tag_279\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15337:15350  address owner */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15353:15375  _requireOwned(tokenId) */\n      tag_280\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15367:15374  tokenId */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15353:15366  _requireOwned */\n      tag_127\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15353:15375  _requireOwned(tokenId) */\n      jump\t// in\n    tag_280:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15337:15375  address owner = _requireOwned(tokenId) */\n      swap1\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15506:15524  auth != address(0) */\n      dup4\n      and\n      iszero\n      dup1\n      iszero\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15506:15541  auth != address(0) && owner != auth */\n      tag_281\n      jumpi\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15537:15541  auth */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15528:15541  owner != auth */\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15528:15533  owner */\n      dup2\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15528:15541  owner != auth */\n      and\n      eq\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15506:15541  auth != address(0) && owner != auth */\n    tag_281:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15506:15575  auth != address(0) && owner != auth && !isApprovedForAll(owner, auth) */\n      dup1\n      iszero\n      tag_282\n      jumpi\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15546:15575  isApprovedForAll(owner, auth) */\n      tag_283\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15563:15568  owner */\n      dup2\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15570:15574  auth */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15546:15562  isApprovedForAll */\n      tag_108\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15546:15575  isApprovedForAll(owner, auth) */\n      jump\t// in\n    tag_283:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15545:15575  !isApprovedForAll(owner, auth) */\n      iszero\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15506:15575  auth != address(0) && owner != auth && !isApprovedForAll(owner, auth) */\n    tag_282:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15502:15646  if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {... */\n      iszero\n      tag_284\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15603:15630  ERC721InvalidApprover(auth) */\n      mload(0x40)\n      shl(0xe0, 0xa9fbf51f)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1697:1729   */\n      dup5\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15603:15630  ERC721InvalidApprover(auth) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1679:1730   */\n      mstore\n        /* \"#utility.yul\":1652:1670   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15603:15630  ERC721InvalidApprover(auth) */\n      tag_137\n        /* \"#utility.yul\":1533:1736   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15502:15646  if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {... */\n    tag_284:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15666:15675  emitEvent */\n      dup2\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15662:15745  if (emitEvent) {... */\n      iszero\n      tag_286\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15721:15728  tokenId */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15717:15719  to */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15701:15729  Approval(owner, to, tokenId) */\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15710:15715  owner */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15701:15729  Approval(owner, to, tokenId) */\n      and\n      0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15662:15745  if (emitEvent) {... */\n    tag_286:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15322:15756  {... */\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15285:15756  if (emitEvent || auth != address(0)) {... */\n    tag_279:\n      pop\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15768:15792  _tokenApprovals[tokenId] */\n      0x00\n      swap1\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15768:15783  _tokenApprovals */\n      0x04\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15768:15792  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15768:15797  _tokenApprovals[tokenId] = to */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":15127:15805  function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {... */\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7285:7661  function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {... */\n    tag_227:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7398:7436  _isAuthorized(owner, spender, tokenId) */\n      tag_288\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7412:7417  owner */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7419:7426  spender */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7428:7435  tokenId */\n      dup4\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7398:7411  _isAuthorized */\n      tag_289\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7398:7436  _isAuthorized(owner, spender, tokenId) */\n      jump\t// in\n    tag_288:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7393:7654  if (!_isAuthorized(owner, spender, tokenId)) {... */\n      tag_145\n      jumpi\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7457:7476  owner == address(0) */\n      dup4\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7453:7643  if (owner == address(0)) {... */\n      tag_291\n      jumpi\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7504:7535  ERC721NonexistentToken(tokenId) */\n      mload(0x40)\n      shl(0xe0, 0x7e273289)\n      dup2\n      mstore\n      0x04\n      dup2\n      add\n        /* \"#utility.yul\":2848:2873   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":2821:2839   */\n      0x24\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7504:7535  ERC721NonexistentToken(tokenId) */\n      tag_137\n        /* \"#utility.yul\":2702:2879   */\n      jump\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7453:7643  if (owner == address(0)) {... */\n    tag_291:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7583:7627  ERC721InsufficientApproval(spender, tokenId) */\n      mload(0x40)\n      shl(0xe0, 0x177e802f)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":7711:7743   */\n      dup4\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7583:7627  ERC721InsufficientApproval(spender, tokenId) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":7693:7744   */\n      mstore\n        /* \"#utility.yul\":7760:7778   */\n      0x24\n      dup2\n      add\n        /* \"#utility.yul\":7753:7787   */\n      dup3\n      swap1\n      mstore\n        /* \"#utility.yul\":7666:7684   */\n      0x44\n      add\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":7583:7627  ERC721InsufficientApproval(spender, tokenId) */\n      tag_137\n        /* \"#utility.yul\":7519:7793   */\n      jump\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12534:13482  function log10(uint256 value) internal pure returns (uint256) {... */\n    tag_265:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12587:12594  uint256 */\n      0x00\n      dup1\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12665:12682  value >= 10 ** 64 */\n      dup4\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12661:12767  if (value >= 10 ** 64) {... */\n      tag_297\n      jumpi\n      shl(0x40, 0x184f03e93ff9f4daa797ed6e38ed64bf6a1f01)\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12703:12720  value /= 10 ** 64 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12749:12751  64 */\n      0x40\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12739:12751  result += 64 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12661:12767  if (value >= 10 ** 64) {... */\n    tag_297:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12794:12802  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12785:12790  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12785:12802  value >= 10 ** 32 */\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12781:12887  if (value >= 10 ** 32) {... */\n      tag_300\n      jumpi\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12832:12840  10 ** 32 */\n      0x04ee2d6d415b85acef8100000000\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12823:12840  value /= 10 ** 32 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12869:12871  32 */\n      0x20\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12859:12871  result += 32 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12781:12887  if (value >= 10 ** 32) {... */\n    tag_300:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12914:12922  10 ** 16 */\n      0x2386f26fc10000\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12905:12910  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12905:12922  value >= 10 ** 16 */\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12901:13007  if (value >= 10 ** 16) {... */\n      tag_303\n      jumpi\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12952:12960  10 ** 16 */\n      0x2386f26fc10000\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12943:12960  value /= 10 ** 16 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12989:12991  16 */\n      0x10\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12979:12991  result += 16 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12901:13007  if (value >= 10 ** 16) {... */\n    tag_303:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13034:13041  10 ** 8 */\n      0x05f5e100\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13025:13030  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13025:13041  value >= 10 ** 8 */\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13021:13124  if (value >= 10 ** 8) {... */\n      tag_306\n      jumpi\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13071:13078  10 ** 8 */\n      0x05f5e100\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13062:13078  value /= 10 ** 8 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13107:13108  8 */\n      0x08\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13097:13108  result += 8 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13021:13124  if (value >= 10 ** 8) {... */\n    tag_306:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13151:13158  10 ** 4 */\n      0x2710\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13142:13147  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13142:13158  value >= 10 ** 4 */\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13138:13241  if (value >= 10 ** 4) {... */\n      tag_309\n      jumpi\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13188:13195  10 ** 4 */\n      0x2710\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13179:13195  value /= 10 ** 4 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13224:13225  4 */\n      0x04\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13214:13225  result += 4 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13138:13241  if (value >= 10 ** 4) {... */\n    tag_309:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13268:13275  10 ** 2 */\n      0x64\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13259:13264  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13259:13275  value >= 10 ** 2 */\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13255:13358  if (value >= 10 ** 2) {... */\n      tag_312\n      jumpi\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13305:13312  10 ** 2 */\n      0x64\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13296:13312  value /= 10 ** 2 */\n      dup4\n      div\n      swap3\n      pop\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13341:13342  2 */\n      0x02\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13331:13342  result += 2 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13255:13358  if (value >= 10 ** 2) {... */\n    tag_312:\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13385:13392  10 ** 1 */\n      0x0a\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13376:13381  value */\n      dup4\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13376:13392  value >= 10 ** 1 */\n      lt\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13372:13440  if (value >= 10 ** 1) {... */\n      tag_116\n      jumpi\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13423:13424  1 */\n      0x01\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13413:13424  result += 1 */\n      add\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":13468:13474  result */\n      swap3\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":12534:13482  function log10(uint256 value) internal pure returns (uint256) {... */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6565:6841  function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n    tag_289:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6668:6672  bool */\n      0x00\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6705:6726  spender != address(0) */\n      dup4\n      and\n      iszero\n      dup1\n      iszero\n      swap1\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6705:6833  spender != address(0) &&... */\n      tag_320\n      jumpi\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6753:6760  spender */\n      dup3\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6744:6760  owner == spender */\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6744:6749  owner */\n      dup5\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6744:6760  owner == spender */\n      and\n      eq\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6744:6796  owner == spender || isApprovedForAll(owner, spender) */\n      dup1\n      tag_319\n      jumpi\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6764:6796  isApprovedForAll(owner, spender) */\n      tag_319\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6781:6786  owner */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6788:6795  spender */\n      dup5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6764:6780  isApprovedForAll */\n      tag_108\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6764:6796  isApprovedForAll(owner, spender) */\n      jump\t// in\n    tag_319:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6744:6832  owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender */\n      dup1\n      tag_320\n      jumpi\n      pop\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6186:6193  address */\n      0x00\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6237  _tokenApprovals[tokenId] */\n      dup3\n      dup2\n      mstore\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6228  _tokenApprovals */\n      0x04\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6237  _tokenApprovals[tokenId] */\n      0x20\n      mstore\n      0x40\n      swap1\n      keccak256\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6800:6832  _getApproved(tokenId) == spender */\n      dup5\n      dup2\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6213:6237  _tokenApprovals[tokenId] */\n      swap2\n      and\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6800:6832  _getApproved(tokenId) == spender */\n      eq\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6744:6832  owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender */\n    tag_320:\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6685:6833  return... */\n      swap5\n        /* \"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":6565:6841  function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {... */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":14:145   */\n    tag_322:\n      not(sub(shl(0xe0, 0x01), 0x01))\n        /* \"#utility.yul\":88:120   */\n      dup2\n      and\n        /* \"#utility.yul\":78:121   */\n      dup2\n      eq\n        /* \"#utility.yul\":68:139   */\n      tag_211\n      jumpi\n        /* \"#utility.yul\":135:136   */\n      0x00\n        /* \"#utility.yul\":132:133   */\n      dup1\n        /* \"#utility.yul\":125:137   */\n      revert\n        /* \"#utility.yul\":150:395   */\n    tag_31:\n        /* \"#utility.yul\":208:214   */\n      0x00\n        /* \"#utility.yul\":261:263   */\n      0x20\n        /* \"#utility.yul\":249:258   */\n      dup3\n        /* \"#utility.yul\":240:247   */\n      dup5\n        /* \"#utility.yul\":236:259   */\n      sub\n        /* \"#utility.yul\":232:264   */\n      slt\n        /* \"#utility.yul\":229:281   */\n      iszero\n      tag_330\n      jumpi\n        /* \"#utility.yul\":277:278   */\n      0x00\n        /* \"#utility.yul\":274:275   */\n      dup1\n        /* \"#utility.yul\":267:279   */\n      revert\n        /* \"#utility.yul\":229:281   */\n    tag_330:\n        /* \"#utility.yul\":316:325   */\n      dup2\n        /* \"#utility.yul\":303:326   */\n      calldataload\n        /* \"#utility.yul\":335:365   */\n      tag_200\n        /* \"#utility.yul\":359:364   */\n      dup2\n        /* \"#utility.yul\":335:365   */\n      tag_322\n      jump\t// in\n        /* \"#utility.yul\":592:842   */\n    tag_323:\n        /* \"#utility.yul\":677:678   */\n      0x00\n        /* \"#utility.yul\":687:800   */\n    tag_334:\n        /* \"#utility.yul\":701:707   */\n      dup4\n        /* \"#utility.yul\":698:699   */\n      dup2\n        /* \"#utility.yul\":695:708   */\n      lt\n        /* \"#utility.yul\":687:800   */\n      iszero\n      tag_336\n      jumpi\n        /* \"#utility.yul\":777:788   */\n      dup2\n      dup2\n      add\n        /* \"#utility.yul\":771:789   */\n      mload\n        /* \"#utility.yul\":758:769   */\n      dup4\n      dup3\n      add\n        /* \"#utility.yul\":751:790   */\n      mstore\n        /* \"#utility.yul\":723:725   */\n      0x20\n        /* \"#utility.yul\":716:726   */\n      add\n        /* \"#utility.yul\":687:800   */\n      jump(tag_334)\n    tag_336:\n      pop\n      pop\n        /* \"#utility.yul\":834:835   */\n      0x00\n        /* \"#utility.yul\":816:832   */\n      swap2\n      add\n        /* \"#utility.yul\":809:836   */\n      mstore\n        /* \"#utility.yul\":592:842   */\n      jump\t// out\n        /* \"#utility.yul\":847:1118   */\n    tag_324:\n        /* \"#utility.yul\":889:892   */\n      0x00\n        /* \"#utility.yul\":927:932   */\n      dup2\n        /* \"#utility.yul\":921:933   */\n      mload\n        /* \"#utility.yul\":954:960   */\n      dup1\n        /* \"#utility.yul\":949:952   */\n      dup5\n        /* \"#utility.yul\":942:961   */\n      mstore\n        /* \"#utility.yul\":970:1046   */\n      tag_338\n        /* \"#utility.yul\":1039:1045   */\n      dup2\n        /* \"#utility.yul\":1032:1036   */\n      0x20\n        /* \"#utility.yul\":1027:1030   */\n      dup7\n        /* \"#utility.yul\":1023:1037   */\n      add\n        /* \"#utility.yul\":1016:1020   */\n      0x20\n        /* \"#utility.yul\":1009:1014   */\n      dup7\n        /* \"#utility.yul\":1005:1021   */\n      add\n        /* \"#utility.yul\":970:1046   */\n      tag_323\n      jump\t// in\n    tag_338:\n        /* \"#utility.yul\":1100:1102   */\n      0x1f\n        /* \"#utility.yul\":1079:1094   */\n      add\n      not(0x1f)\n        /* \"#utility.yul\":1075:1104   */\n      and\n        /* \"#utility.yul\":1066:1105   */\n      swap3\n      swap1\n      swap3\n      add\n        /* \"#utility.yul\":1107:1111   */\n      0x20\n        /* \"#utility.yul\":1062:1112   */\n      add\n      swap3\n        /* \"#utility.yul\":847:1118   */\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1123:1343   */\n    tag_38:\n        /* \"#utility.yul\":1272:1274   */\n      0x20\n        /* \"#utility.yul\":1261:1270   */\n      dup2\n        /* \"#utility.yul\":1254:1275   */\n      mstore\n        /* \"#utility.yul\":1235:1239   */\n      0x00\n        /* \"#utility.yul\":1292:1337   */\n      tag_200\n        /* \"#utility.yul\":1333:1335   */\n      0x20\n        /* \"#utility.yul\":1322:1331   */\n      dup4\n        /* \"#utility.yul\":1318:1336   */\n      add\n        /* \"#utility.yul\":1310:1316   */\n      dup5\n        /* \"#utility.yul\":1292:1337   */\n      tag_324\n      jump\t// in\n        /* \"#utility.yul\":1348:1528   */\n    tag_41:\n        /* \"#utility.yul\":1407:1413   */\n      0x00\n        /* \"#utility.yul\":1460:1462   */\n      0x20\n        /* \"#utility.yul\":1448:1457   */\n      dup3\n        /* \"#utility.yul\":1439:1446   */\n      dup5\n        /* \"#utility.yul\":1435:1458   */\n      sub\n        /* \"#utility.yul\":1431:1463   */\n      slt\n        /* \"#utility.yul\":1428:1480   */\n      iszero\n      tag_342\n      jumpi\n        /* \"#utility.yul\":1476:1477   */\n      0x00\n        /* \"#utility.yul\":1473:1474   */\n      dup1\n        /* \"#utility.yul\":1466:1478   */\n      revert\n        /* \"#utility.yul\":1428:1480   */\n    tag_342:\n      pop\n        /* \"#utility.yul\":1499:1522   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":1348:1528   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1741:1914   */\n    tag_325:\n        /* \"#utility.yul\":1809:1829   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1858:1889   */\n      dup2\n      and\n        /* \"#utility.yul\":1848:1890   */\n      dup2\n      eq\n        /* \"#utility.yul\":1838:1908   */\n      tag_345\n      jumpi\n        /* \"#utility.yul\":1904:1905   */\n      0x00\n        /* \"#utility.yul\":1901:1902   */\n      dup1\n        /* \"#utility.yul\":1894:1906   */\n      revert\n        /* \"#utility.yul\":1838:1908   */\n    tag_345:\n        /* \"#utility.yul\":1741:1914   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1919:2173   */\n    tag_47:\n        /* \"#utility.yul\":1987:1993   */\n      0x00\n        /* \"#utility.yul\":1995:2001   */\n      dup1\n        /* \"#utility.yul\":2048:2050   */\n      0x40\n        /* \"#utility.yul\":2036:2045   */\n      dup4\n        /* \"#utility.yul\":2027:2034   */\n      dup6\n        /* \"#utility.yul\":2023:2046   */\n      sub\n        /* \"#utility.yul\":2019:2051   */\n      slt\n        /* \"#utility.yul\":2016:2068   */\n      iszero\n      tag_347\n      jumpi\n        /* \"#utility.yul\":2064:2065   */\n      0x00\n        /* \"#utility.yul\":2061:2062   */\n      dup1\n        /* \"#utility.yul\":2054:2066   */\n      revert\n        /* \"#utility.yul\":2016:2068   */\n    tag_347:\n        /* \"#utility.yul\":2087:2116   */\n      tag_348\n        /* \"#utility.yul\":2106:2115   */\n      dup4\n        /* \"#utility.yul\":2087:2116   */\n      tag_325\n      jump\t// in\n    tag_348:\n        /* \"#utility.yul\":2077:2116   */\n      swap5\n        /* \"#utility.yul\":2163:2165   */\n      0x20\n        /* \"#utility.yul\":2148:2166   */\n      swap4\n      swap1\n      swap4\n      add\n        /* \"#utility.yul\":2135:2167   */\n      calldataload\n      swap4\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":1919:2173   */\n      jump\t// out\n        /* \"#utility.yul\":2178:2506   */\n    tag_51:\n        /* \"#utility.yul\":2255:2261   */\n      0x00\n        /* \"#utility.yul\":2263:2269   */\n      dup1\n        /* \"#utility.yul\":2271:2277   */\n      0x00\n        /* \"#utility.yul\":2324:2326   */\n      0x60\n        /* \"#utility.yul\":2312:2321   */\n      dup5\n        /* \"#utility.yul\":2303:2310   */\n      dup7\n        /* \"#utility.yul\":2299:2322   */\n      sub\n        /* \"#utility.yul\":2295:2327   */\n      slt\n        /* \"#utility.yul\":2292:2344   */\n      iszero\n      tag_350\n      jumpi\n        /* \"#utility.yul\":2340:2341   */\n      0x00\n        /* \"#utility.yul\":2337:2338   */\n      dup1\n        /* \"#utility.yul\":2330:2342   */\n      revert\n        /* \"#utility.yul\":2292:2344   */\n    tag_350:\n        /* \"#utility.yul\":2363:2392   */\n      tag_351\n        /* \"#utility.yul\":2382:2391   */\n      dup5\n        /* \"#utility.yul\":2363:2392   */\n      tag_325\n      jump\t// in\n    tag_351:\n        /* \"#utility.yul\":2353:2392   */\n      swap3\n      pop\n        /* \"#utility.yul\":2411:2449   */\n      tag_352\n        /* \"#utility.yul\":2445:2447   */\n      0x20\n        /* \"#utility.yul\":2434:2443   */\n      dup6\n        /* \"#utility.yul\":2430:2448   */\n      add\n        /* \"#utility.yul\":2411:2449   */\n      tag_325\n      jump\t// in\n    tag_352:\n        /* \"#utility.yul\":2401:2449   */\n      swap2\n      pop\n        /* \"#utility.yul\":2496:2498   */\n      0x40\n        /* \"#utility.yul\":2485:2494   */\n      dup5\n        /* \"#utility.yul\":2481:2499   */\n      add\n        /* \"#utility.yul\":2468:2500   */\n      calldataload\n        /* \"#utility.yul\":2458:2500   */\n      swap1\n      pop\n        /* \"#utility.yul\":2178:2506   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":2511:2697   */\n    tag_66:\n        /* \"#utility.yul\":2570:2576   */\n      0x00\n        /* \"#utility.yul\":2623:2625   */\n      0x20\n        /* \"#utility.yul\":2611:2620   */\n      dup3\n        /* \"#utility.yul\":2602:2609   */\n      dup5\n        /* \"#utility.yul\":2598:2621   */\n      sub\n        /* \"#utility.yul\":2594:2626   */\n      slt\n        /* \"#utility.yul\":2591:2643   */\n      iszero\n      tag_354\n      jumpi\n        /* \"#utility.yul\":2639:2640   */\n      0x00\n        /* \"#utility.yul\":2636:2637   */\n      dup1\n        /* \"#utility.yul\":2629:2641   */\n      revert\n        /* \"#utility.yul\":2591:2643   */\n    tag_354:\n        /* \"#utility.yul\":2662:2691   */\n      tag_200\n        /* \"#utility.yul\":2681:2690   */\n      dup3\n        /* \"#utility.yul\":2662:2691   */\n      tag_325\n      jump\t// in\n        /* \"#utility.yul\":2884:3476   */\n    tag_75:\n        /* \"#utility.yul\":3065:3067   */\n      0x20\n        /* \"#utility.yul\":3047:3068   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":3108:3121   */\n      dup3\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":3104:3143   */\n      and\n        /* \"#utility.yul\":3084:3102   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":3077:3144   */\n      mstore\n        /* \"#utility.yul\":3179:3194   */\n      dup3\n      add\n        /* \"#utility.yul\":3173:3195   */\n      mload\n        /* \"#utility.yul\":3231:3235   */\n      0x80\n        /* \"#utility.yul\":3226:3228   */\n      0x40\n        /* \"#utility.yul\":3211:3229   */\n      dup4\n      add\n        /* \"#utility.yul\":3204:3236   */\n      mstore\n      0x00\n      swap1\n        /* \"#utility.yul\":3259:3311   */\n      tag_358\n        /* \"#utility.yul\":3131:3134   */\n      0xa0\n        /* \"#utility.yul\":3291:3310   */\n      dup5\n      add\n        /* \"#utility.yul\":3173:3195   */\n      dup3\n        /* \"#utility.yul\":3259:3311   */\n      tag_324\n      jump\t// in\n    tag_358:\n        /* \"#utility.yul\":3245:3311   */\n      swap1\n      pop\n        /* \"#utility.yul\":3365:3367   */\n      0x40\n        /* \"#utility.yul\":3357:3363   */\n      dup5\n        /* \"#utility.yul\":3353:3368   */\n      add\n        /* \"#utility.yul\":3347:3369   */\n      mload\n        /* \"#utility.yul\":3342:3344   */\n      0x60\n        /* \"#utility.yul\":3331:3340   */\n      dup5\n        /* \"#utility.yul\":3327:3345   */\n      add\n        /* \"#utility.yul\":3320:3370   */\n      mstore\n        /* \"#utility.yul\":3440:3442   */\n      0x60\n        /* \"#utility.yul\":3432:3438   */\n      dup5\n        /* \"#utility.yul\":3428:3443   */\n      add\n        /* \"#utility.yul\":3422:3444   */\n      mload\n        /* \"#utility.yul\":3415:3445   */\n      iszero\n        /* \"#utility.yul\":3408:3446   */\n      iszero\n        /* \"#utility.yul\":3401:3405   */\n      0x80\n        /* \"#utility.yul\":3390:3399   */\n      dup5\n        /* \"#utility.yul\":3386:3406   */\n      add\n        /* \"#utility.yul\":3379:3447   */\n      mstore\n        /* \"#utility.yul\":3464:3470   */\n      dup1\n        /* \"#utility.yul\":3456:3470   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":2884:3476   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3481:3828   */\n    tag_95:\n        /* \"#utility.yul\":3546:3552   */\n      0x00\n        /* \"#utility.yul\":3554:3560   */\n      dup1\n        /* \"#utility.yul\":3607:3609   */\n      0x40\n        /* \"#utility.yul\":3595:3604   */\n      dup4\n        /* \"#utility.yul\":3586:3593   */\n      dup6\n        /* \"#utility.yul\":3582:3605   */\n      sub\n        /* \"#utility.yul\":3578:3610   */\n      slt\n        /* \"#utility.yul\":3575:3627   */\n      iszero\n      tag_360\n      jumpi\n        /* \"#utility.yul\":3623:3624   */\n      0x00\n        /* \"#utility.yul\":3620:3621   */\n      dup1\n        /* \"#utility.yul\":3613:3625   */\n      revert\n        /* \"#utility.yul\":3575:3627   */\n    tag_360:\n        /* \"#utility.yul\":3646:3675   */\n      tag_361\n        /* \"#utility.yul\":3665:3674   */\n      dup4\n        /* \"#utility.yul\":3646:3675   */\n      tag_325\n      jump\t// in\n    tag_361:\n        /* \"#utility.yul\":3636:3675   */\n      swap2\n      pop\n        /* \"#utility.yul\":3725:3727   */\n      0x20\n        /* \"#utility.yul\":3714:3723   */\n      dup4\n        /* \"#utility.yul\":3710:3728   */\n      add\n        /* \"#utility.yul\":3697:3729   */\n      calldataload\n        /* \"#utility.yul\":3772:3777   */\n      dup1\n        /* \"#utility.yul\":3765:3778   */\n      iszero\n        /* \"#utility.yul\":3758:3779   */\n      iszero\n        /* \"#utility.yul\":3751:3756   */\n      dup2\n        /* \"#utility.yul\":3748:3780   */\n      eq\n        /* \"#utility.yul\":3738:3798   */\n      tag_362\n      jumpi\n        /* \"#utility.yul\":3794:3795   */\n      0x00\n        /* \"#utility.yul\":3791:3792   */\n      dup1\n        /* \"#utility.yul\":3784:3796   */\n      revert\n        /* \"#utility.yul\":3738:3798   */\n    tag_362:\n        /* \"#utility.yul\":3817:3822   */\n      dup1\n        /* \"#utility.yul\":3807:3822   */\n      swap2\n      pop\n      pop\n        /* \"#utility.yul\":3481:3828   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":3833:3960   */\n    tag_268:\n        /* \"#utility.yul\":3894:3904   */\n      0x4e487b71\n        /* \"#utility.yul\":3889:3892   */\n      0xe0\n        /* \"#utility.yul\":3885:3905   */\n      shl\n        /* \"#utility.yul\":3882:3883   */\n      0x00\n        /* \"#utility.yul\":3875:3906   */\n      mstore\n        /* \"#utility.yul\":3925:3929   */\n      0x41\n        /* \"#utility.yul\":3922:3923   */\n      0x04\n        /* \"#utility.yul\":3915:3930   */\n      mstore\n        /* \"#utility.yul\":3949:3953   */\n      0x24\n        /* \"#utility.yul\":3946:3947   */\n      0x00\n        /* \"#utility.yul\":3939:3954   */\n      revert\n        /* \"#utility.yul\":3965:5103   */\n    tag_99:\n        /* \"#utility.yul\":4060:4066   */\n      0x00\n        /* \"#utility.yul\":4068:4074   */\n      dup1\n        /* \"#utility.yul\":4076:4082   */\n      0x00\n        /* \"#utility.yul\":4084:4090   */\n      dup1\n        /* \"#utility.yul\":4137:4140   */\n      0x80\n        /* \"#utility.yul\":4125:4134   */\n      dup6\n        /* \"#utility.yul\":4116:4123   */\n      dup8\n        /* \"#utility.yul\":4112:4135   */\n      sub\n        /* \"#utility.yul\":4108:4141   */\n      slt\n        /* \"#utility.yul\":4105:4158   */\n      iszero\n      tag_365\n      jumpi\n        /* \"#utility.yul\":4154:4155   */\n      0x00\n        /* \"#utility.yul\":4151:4152   */\n      dup1\n        /* \"#utility.yul\":4144:4156   */\n      revert\n        /* \"#utility.yul\":4105:4158   */\n    tag_365:\n        /* \"#utility.yul\":4177:4206   */\n      tag_366\n        /* \"#utility.yul\":4196:4205   */\n      dup6\n        /* \"#utility.yul\":4177:4206   */\n      tag_325\n      jump\t// in\n    tag_366:\n        /* \"#utility.yul\":4167:4206   */\n      swap4\n      pop\n        /* \"#utility.yul\":4225:4263   */\n      tag_367\n        /* \"#utility.yul\":4259:4261   */\n      0x20\n        /* \"#utility.yul\":4248:4257   */\n      dup7\n        /* \"#utility.yul\":4244:4262   */\n      add\n        /* \"#utility.yul\":4225:4263   */\n      tag_325\n      jump\t// in\n    tag_367:\n        /* \"#utility.yul\":4215:4263   */\n      swap3\n      pop\n        /* \"#utility.yul\":4310:4312   */\n      0x40\n        /* \"#utility.yul\":4299:4308   */\n      dup6\n        /* \"#utility.yul\":4295:4313   */\n      add\n        /* \"#utility.yul\":4282:4314   */\n      calldataload\n        /* \"#utility.yul\":4272:4314   */\n      swap2\n      pop\n        /* \"#utility.yul\":4365:4367   */\n      0x60\n        /* \"#utility.yul\":4354:4363   */\n      dup6\n        /* \"#utility.yul\":4350:4368   */\n      add\n        /* \"#utility.yul\":4337:4369   */\n      calldataload\n        /* \"#utility.yul\":4388:4406   */\n      0xffffffffffffffff\n        /* \"#utility.yul\":4429:4431   */\n      dup1\n        /* \"#utility.yul\":4421:4427   */\n      dup3\n        /* \"#utility.yul\":4418:4432   */\n      gt\n        /* \"#utility.yul\":4415:4449   */\n      iszero\n      tag_368\n      jumpi\n        /* \"#utility.yul\":4445:4446   */\n      0x00\n        /* \"#utility.yul\":4442:4443   */\n      dup1\n        /* \"#utility.yul\":4435:4447   */\n      revert\n        /* \"#utility.yul\":4415:4449   */\n    tag_368:\n        /* \"#utility.yul\":4483:4489   */\n      dup2\n        /* \"#utility.yul\":4472:4481   */\n      dup8\n        /* \"#utility.yul\":4468:4490   */\n      add\n        /* \"#utility.yul\":4458:4490   */\n      swap2\n      pop\n        /* \"#utility.yul\":4528:4535   */\n      dup8\n        /* \"#utility.yul\":4521:4525   */\n      0x1f\n        /* \"#utility.yul\":4517:4519   */\n      dup4\n        /* \"#utility.yul\":4513:4526   */\n      add\n        /* \"#utility.yul\":4509:4536   */\n      slt\n        /* \"#utility.yul\":4499:4554   */\n      tag_369\n      jumpi\n        /* \"#utility.yul\":4550:4551   */\n      0x00\n        /* \"#utility.yul\":4547:4548   */\n      dup1\n        /* \"#utility.yul\":4540:4552   */\n      revert\n        /* \"#utility.yul\":4499:4554   */\n    tag_369:\n        /* \"#utility.yul\":4586:4588   */\n      dup2\n        /* \"#utility.yul\":4573:4589   */\n      calldataload\n        /* \"#utility.yul\":4608:4610   */\n      dup2\n        /* \"#utility.yul\":4604:4606   */\n      dup2\n        /* \"#utility.yul\":4601:4611   */\n      gt\n        /* \"#utility.yul\":4598:4634   */\n      iszero\n      tag_371\n      jumpi\n        /* \"#utility.yul\":4614:4632   */\n      tag_371\n      tag_268\n      jump\t// in\n    tag_371:\n        /* \"#utility.yul\":4689:4691   */\n      0x40\n        /* \"#utility.yul\":4683:4692   */\n      mload\n        /* \"#utility.yul\":4657:4659   */\n      0x1f\n        /* \"#utility.yul\":4743:4756   */\n      dup3\n      add\n      not(0x1f)\n        /* \"#utility.yul\":4739:4761   */\n      swap1\n      dup2\n      and\n        /* \"#utility.yul\":4763:4765   */\n      0x3f\n        /* \"#utility.yul\":4735:4766   */\n      add\n        /* \"#utility.yul\":4731:4771   */\n      and\n        /* \"#utility.yul\":4719:4772   */\n      dup2\n      add\n      swap1\n        /* \"#utility.yul\":4787:4805   */\n      dup4\n      dup3\n      gt\n        /* \"#utility.yul\":4807:4829   */\n      dup2\n      dup4\n      lt\n        /* \"#utility.yul\":4784:4830   */\n      or\n        /* \"#utility.yul\":4781:4853   */\n      iszero\n      tag_373\n      jumpi\n        /* \"#utility.yul\":4833:4851   */\n      tag_373\n      tag_268\n      jump\t// in\n    tag_373:\n        /* \"#utility.yul\":4873:4883   */\n      dup2\n        /* \"#utility.yul\":4869:4871   */\n      0x40\n        /* \"#utility.yul\":4862:4884   */\n      mstore\n        /* \"#utility.yul\":4908:4910   */\n      dup3\n        /* \"#utility.yul\":4900:4906   */\n      dup2\n        /* \"#utility.yul\":4893:4911   */\n      mstore\n        /* \"#utility.yul\":4948:4955   */\n      dup11\n        /* \"#utility.yul\":4943:4945   */\n      0x20\n        /* \"#utility.yul\":4938:4940   */\n      dup5\n        /* \"#utility.yul\":4934:4936   */\n      dup8\n        /* \"#utility.yul\":4930:4941   */\n      add\n        /* \"#utility.yul\":4926:4946   */\n      add\n        /* \"#utility.yul\":4923:4956   */\n      gt\n        /* \"#utility.yul\":4920:4973   */\n      iszero\n      tag_374\n      jumpi\n        /* \"#utility.yul\":4969:4970   */\n      0x00\n        /* \"#utility.yul\":4966:4967   */\n      dup1\n        /* \"#utility.yul\":4959:4971   */\n      revert\n        /* \"#utility.yul\":4920:4973   */\n    tag_374:\n        /* \"#utility.yul\":5025:5027   */\n      dup3\n        /* \"#utility.yul\":5020:5022   */\n      0x20\n        /* \"#utility.yul\":5016:5018   */\n      dup7\n        /* \"#utility.yul\":5012:5023   */\n      add\n        /* \"#utility.yul\":5007:5009   */\n      0x20\n        /* \"#utility.yul\":4999:5005   */\n      dup4\n        /* \"#utility.yul\":4995:5010   */\n      add\n        /* \"#utility.yul\":4982:5028   */\n      calldatacopy\n        /* \"#utility.yul\":5070:5071   */\n      0x00\n        /* \"#utility.yul\":5065:5067   */\n      0x20\n        /* \"#utility.yul\":5060:5062   */\n      dup5\n        /* \"#utility.yul\":5052:5058   */\n      dup4\n        /* \"#utility.yul\":5048:5063   */\n      add\n        /* \"#utility.yul\":5044:5068   */\n      add\n        /* \"#utility.yul\":5037:5072   */\n      mstore\n        /* \"#utility.yul\":5091:5097   */\n      dup1\n        /* \"#utility.yul\":5081:5097   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"#utility.yul\":3965:5103   */\n      swap3\n      swap6\n      swap2\n      swap5\n      pop\n      swap3\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5108:5368   */\n    tag_107:\n        /* \"#utility.yul\":5176:5182   */\n      0x00\n        /* \"#utility.yul\":5184:5190   */\n      dup1\n        /* \"#utility.yul\":5237:5239   */\n      0x40\n        /* \"#utility.yul\":5225:5234   */\n      dup4\n        /* \"#utility.yul\":5216:5223   */\n      dup6\n        /* \"#utility.yul\":5212:5235   */\n      sub\n        /* \"#utility.yul\":5208:5240   */\n      slt\n        /* \"#utility.yul\":5205:5257   */\n      iszero\n      tag_376\n      jumpi\n        /* \"#utility.yul\":5253:5254   */\n      0x00\n        /* \"#utility.yul\":5250:5251   */\n      dup1\n        /* \"#utility.yul\":5243:5255   */\n      revert\n        /* \"#utility.yul\":5205:5257   */\n    tag_376:\n        /* \"#utility.yul\":5276:5305   */\n      tag_377\n        /* \"#utility.yul\":5295:5304   */\n      dup4\n        /* \"#utility.yul\":5276:5305   */\n      tag_325\n      jump\t// in\n    tag_377:\n        /* \"#utility.yul\":5266:5305   */\n      swap2\n      pop\n        /* \"#utility.yul\":5324:5362   */\n      tag_378\n        /* \"#utility.yul\":5358:5360   */\n      0x20\n        /* \"#utility.yul\":5347:5356   */\n      dup5\n        /* \"#utility.yul\":5343:5361   */\n      add\n        /* \"#utility.yul\":5324:5362   */\n      tag_325\n      jump\t// in\n    tag_378:\n        /* \"#utility.yul\":5314:5362   */\n      swap1\n      pop\n        /* \"#utility.yul\":5108:5368   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":5373:5753   */\n    tag_120:\n        /* \"#utility.yul\":5452:5453   */\n      0x01\n        /* \"#utility.yul\":5448:5460   */\n      dup2\n      dup2\n      shr\n      swap1\n        /* \"#utility.yul\":5495:5507   */\n      dup3\n      and\n      dup1\n        /* \"#utility.yul\":5516:5577   */\n      tag_380\n      jumpi\n        /* \"#utility.yul\":5570:5574   */\n      0x7f\n        /* \"#utility.yul\":5562:5568   */\n      dup3\n        /* \"#utility.yul\":5558:5575   */\n      and\n        /* \"#utility.yul\":5548:5575   */\n      swap2\n      pop\n        /* \"#utility.yul\":5516:5577   */\n    tag_380:\n        /* \"#utility.yul\":5623:5625   */\n      0x20\n        /* \"#utility.yul\":5615:5621   */\n      dup3\n        /* \"#utility.yul\":5612:5626   */\n      lt\n        /* \"#utility.yul\":5592:5610   */\n      dup2\n        /* \"#utility.yul\":5589:5627   */\n      sub\n        /* \"#utility.yul\":5586:5747   */\n      tag_381\n      jumpi\n        /* \"#utility.yul\":5669:5679   */\n      0x4e487b71\n        /* \"#utility.yul\":5664:5667   */\n      0xe0\n        /* \"#utility.yul\":5660:5680   */\n      shl\n        /* \"#utility.yul\":5657:5658   */\n      0x00\n        /* \"#utility.yul\":5650:5681   */\n      mstore\n        /* \"#utility.yul\":5704:5708   */\n      0x22\n        /* \"#utility.yul\":5701:5702   */\n      0x04\n        /* \"#utility.yul\":5694:5709   */\n      mstore\n        /* \"#utility.yul\":5732:5736   */\n      0x24\n        /* \"#utility.yul\":5729:5730   */\n      0x00\n        /* \"#utility.yul\":5722:5737   */\n      revert\n        /* \"#utility.yul\":5586:5747   */\n    tag_381:\n      pop\n        /* \"#utility.yul\":5373:5753   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6138:6634   */\n    tag_204:\n        /* \"#utility.yul\":6317:6320   */\n      0x00\n        /* \"#utility.yul\":6355:6361   */\n      dup4\n        /* \"#utility.yul\":6349:6362   */\n      mload\n        /* \"#utility.yul\":6371:6437   */\n      tag_384\n        /* \"#utility.yul\":6430:6436   */\n      dup2\n        /* \"#utility.yul\":6425:6428   */\n      dup5\n        /* \"#utility.yul\":6418:6422   */\n      0x20\n        /* \"#utility.yul\":6410:6416   */\n      dup9\n        /* \"#utility.yul\":6406:6423   */\n      add\n        /* \"#utility.yul\":6371:6437   */\n      tag_323\n      jump\t// in\n    tag_384:\n        /* \"#utility.yul\":6500:6513   */\n      dup4\n      mload\n        /* \"#utility.yul\":6459:6475   */\n      swap1\n      dup4\n      add\n      swap1\n        /* \"#utility.yul\":6522:6592   */\n      tag_385\n        /* \"#utility.yul\":6500:6513   */\n      dup2\n        /* \"#utility.yul\":6459:6475   */\n      dup4\n        /* \"#utility.yul\":6569:6573   */\n      0x20\n        /* \"#utility.yul\":6557:6574   */\n      dup9\n      add\n        /* \"#utility.yul\":6522:6592   */\n      tag_323\n      jump\t// in\n    tag_385:\n        /* \"#utility.yul\":6608:6628   */\n      add\n      swap5\n        /* \"#utility.yul\":6138:6634   */\n      swap4\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":6639:7128   */\n    tag_246:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":6908:6923   */\n      dup6\n      dup2\n      and\n        /* \"#utility.yul\":6890:6924   */\n      dup3\n      mstore\n        /* \"#utility.yul\":6960:6975   */\n      dup5\n      and\n        /* \"#utility.yul\":6955:6957   */\n      0x20\n        /* \"#utility.yul\":6940:6958   */\n      dup3\n      add\n        /* \"#utility.yul\":6933:6976   */\n      mstore\n        /* \"#utility.yul\":7007:7009   */\n      0x40\n        /* \"#utility.yul\":6992:7010   */\n      dup2\n      add\n        /* \"#utility.yul\":6985:7019   */\n      dup4\n      swap1\n      mstore\n        /* \"#utility.yul\":7055:7058   */\n      0x80\n        /* \"#utility.yul\":7050:7052   */\n      0x60\n        /* \"#utility.yul\":7035:7053   */\n      dup3\n      add\n        /* \"#utility.yul\":7028:7059   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":6833:6837   */\n      0x00\n      swap1\n        /* \"#utility.yul\":7076:7122   */\n      tag_387\n      swap1\n        /* \"#utility.yul\":7102:7121   */\n      dup4\n      add\n        /* \"#utility.yul\":7094:7100   */\n      dup5\n        /* \"#utility.yul\":7076:7122   */\n      tag_324\n      jump\t// in\n    tag_387:\n        /* \"#utility.yul\":7068:7122   */\n      swap7\n        /* \"#utility.yul\":6639:7128   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":7133:7382   */\n    tag_249:\n        /* \"#utility.yul\":7202:7208   */\n      0x00\n        /* \"#utility.yul\":7255:7257   */\n      0x20\n        /* \"#utility.yul\":7243:7252   */\n      dup3\n        /* \"#utility.yul\":7234:7241   */\n      dup5\n        /* \"#utility.yul\":7230:7253   */\n      sub\n        /* \"#utility.yul\":7226:7258   */\n      slt\n        /* \"#utility.yul\":7223:7275   */\n      iszero\n      tag_389\n      jumpi\n        /* \"#utility.yul\":7271:7272   */\n      0x00\n        /* \"#utility.yul\":7268:7269   */\n      dup1\n        /* \"#utility.yul\":7261:7273   */\n      revert\n        /* \"#utility.yul\":7223:7275   */\n    tag_389:\n        /* \"#utility.yul\":7303:7312   */\n      dup2\n        /* \"#utility.yul\":7297:7313   */\n      mload\n        /* \"#utility.yul\":7322:7352   */\n      tag_200\n        /* \"#utility.yul\":7346:7351   */\n      dup2\n        /* \"#utility.yul\":7322:7352   */\n      tag_322\n      jump\t// in\n\n    auxdata: 0xa26469706673582212201c8c174e7c88dfb119f5fd3f9a49e9567e0ac31a44600c86af58e4027c32288464736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_192": {
									"entryPoint": null,
									"id": 192,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_40": {
									"entryPoint": null,
									"id": 40,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_496": {
									"entryPoint": null,
									"id": 496,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_transferOwnership_288": {
									"entryPoint": 245,
									"id": 288,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_addresst_string_memory_ptr_fromMemory": {
									"entryPoint": 346,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"array_dataslot_string_storage": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"clean_up_bytearray_end_slots_string_storage": {
									"entryPoint": 642,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage": {
									"entryPoint": 724,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 584,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"extract_used_part_and_set_length_of_short_byte_array": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"panic_error_0x41": {
									"entryPoint": 326,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:4154:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "46:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "63:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "70:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "75:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "66:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "66:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "56:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "56:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "56:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "103:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "106:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "96:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "96:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "96:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "127:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "130:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "120:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "120:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "120:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "14:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "254:1101:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "300:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "309:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "312:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "302:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "302:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "302:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "275:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "284:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "271:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "271:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "296:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "267:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "267:32:13"
															},
															"nodeType": "YulIf",
															"src": "264:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "325:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "344:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "338:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "338:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "329:5:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "417:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "426:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "429:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "419:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "419:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "419:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "376:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "387:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "402:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "407:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "398:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "398:11:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "411:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "394:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "394:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "383:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "383:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "373:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "373:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "366:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "366:50:13"
															},
															"nodeType": "YulIf",
															"src": "363:70:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "442:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "452:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "442:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "466:12:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "476:2:13",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "470:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "487:39:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "511:9:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "522:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "507:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "507:18:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "501:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "501:25:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "491:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "535:28:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "553:2:13",
																				"type": "",
																				"value": "64"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "557:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "549:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "549:10:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "561:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "545:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "545:18:13"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "539:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "590:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "599:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "602:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "592:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "592:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "592:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "578:6:13"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "586:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "575:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "575:14:13"
															},
															"nodeType": "YulIf",
															"src": "572:34:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "615:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "629:9:13"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "640:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "625:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "625:22:13"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "619:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "695:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "704:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "707:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "697:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "697:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "697:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "674:2:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "678:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "670:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "670:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "685:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "666:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "666:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "659:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "659:35:13"
															},
															"nodeType": "YulIf",
															"src": "656:55:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "720:19:13",
															"value": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "736:2:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "730:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "730:9:13"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "724:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "762:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "764:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "764:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "764:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "754:2:13"
																	},
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "758:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "751:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "751:10:13"
															},
															"nodeType": "YulIf",
															"src": "748:36:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "793:17:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "807:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "803:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "803:7:13"
															},
															"variables": [
																{
																	"name": "_5",
																	"nodeType": "YulTypedName",
																	"src": "797:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "819:23:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "839:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "833:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "833:9:13"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "823:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "851:71:13",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "873:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_4",
																										"nodeType": "YulIdentifier",
																										"src": "897:2:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "901:4:13",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "893:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "893:13:13"
																							},
																							{
																								"name": "_5",
																								"nodeType": "YulIdentifier",
																								"src": "908:2:13"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "889:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "889:22:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "913:2:13",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "885:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "885:31:13"
																			},
																			{
																				"name": "_5",
																				"nodeType": "YulIdentifier",
																				"src": "918:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "881:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "881:40:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "869:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "869:53:13"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "855:10:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "981:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "983:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "983:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "983:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "940:10:13"
																			},
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "952:2:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "937:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "937:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "960:10:13"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "972:6:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "957:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "957:22:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "934:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "934:46:13"
															},
															"nodeType": "YulIf",
															"src": "931:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1019:2:13",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "1023:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1012:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1012:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1012:22:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "1050:6:13"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "1058:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1043:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1043:18:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1043:18:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1107:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1116:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1119:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1109:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1109:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1109:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "1084:2:13"
																					},
																					{
																						"name": "_4",
																						"nodeType": "YulIdentifier",
																						"src": "1088:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1080:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1080:11:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1093:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1076:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1076:20:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "1098:7:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1073:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1073:33:13"
															},
															"nodeType": "YulIf",
															"src": "1070:53:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1132:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "1141:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "1136:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1197:83:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "memPtr",
																									"nodeType": "YulIdentifier",
																									"src": "1226:6:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "1234:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1222:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1222:14:13"
																						},
																						{
																							"name": "_1",
																							"nodeType": "YulIdentifier",
																							"src": "1238:2:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "1218:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1218:23:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "_3",
																											"nodeType": "YulIdentifier",
																											"src": "1257:2:13"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "1261:1:13"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "1253:3:13"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1253:10:13"
																								},
																								{
																									"name": "_1",
																									"nodeType": "YulIdentifier",
																									"src": "1265:2:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "1249:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1249:19:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "1243:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1243:26:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1211:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1211:59:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1211:59:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "1162:1:13"
																	},
																	{
																		"name": "_4",
																		"nodeType": "YulIdentifier",
																		"src": "1165:2:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "1159:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1159:9:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "1169:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1171:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "1180:1:13"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1183:2:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "1176:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1176:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "1171:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "1155:3:13",
																"statements": []
															},
															"src": "1151:129:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "1304:6:13"
																					},
																					{
																						"name": "_4",
																						"nodeType": "YulIdentifier",
																						"src": "1312:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "1300:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1300:15:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "1317:2:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1296:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1296:24:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1322:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1289:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1289:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1289:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1333:16:13",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "1343:6:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "1333:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_string_memory_ptr_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "212:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "223:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "235:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "243:6:13",
														"type": ""
													}
												],
												"src": "146:1209:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1415:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1425:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1439:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1442:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "1435:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1435:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "1425:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1456:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "1486:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1492:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1482:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1482:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "1460:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1533:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "1535:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "1549:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1557:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "1545:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1545:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1535:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1513:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1506:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1506:26:13"
															},
															"nodeType": "YulIf",
															"src": "1503:61:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1623:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1644:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1651:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "1656:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "1647:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1647:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1637:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1637:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1637:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1688:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1691:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "1681:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1681:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1681:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1716:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1719:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1709:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1709:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1709:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "1579:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "1602:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1610:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "1599:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1599:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1576:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1576:38:13"
															},
															"nodeType": "YulIf",
															"src": "1573:161:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1395:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "1404:6:13",
														"type": ""
													}
												],
												"src": "1360:380:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1801:65:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1818:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"name": "ptr",
																		"nodeType": "YulIdentifier",
																		"src": "1821:3:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1811:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1811:14:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1811:14:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1834:26:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1852:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1855:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "keccak256",
																	"nodeType": "YulIdentifier",
																	"src": "1842:9:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1842:18:13"
															},
															"variableNames": [
																{
																	"name": "data",
																	"nodeType": "YulIdentifier",
																	"src": "1834:4:13"
																}
															]
														}
													]
												},
												"name": "array_dataslot_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "ptr",
														"nodeType": "YulTypedName",
														"src": "1784:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "1792:4:13",
														"type": ""
													}
												],
												"src": "1745:121:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1952:464:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1985:425:13",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "1999:11:13",
																		"value": {
																			"kind": "number",
																			"nodeType": "YulLiteral",
																			"src": "2009:1:13",
																			"type": "",
																			"value": "0"
																		},
																		"variables": [
																			{
																				"name": "_1",
																				"nodeType": "YulTypedName",
																				"src": "2003:2:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2030:2:13"
																				},
																				{
																					"name": "array",
																					"nodeType": "YulIdentifier",
																					"src": "2034:5:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2023:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2023:17:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2023:17:13"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2053:31:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "2075:2:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2079:4:13",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "keccak256",
																				"nodeType": "YulIdentifier",
																				"src": "2065:9:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2065:19:13"
																		},
																		"variables": [
																			{
																				"name": "data",
																				"nodeType": "YulTypedName",
																				"src": "2057:4:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2097:57:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "2120:4:13"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2130:1:13",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "startIndex",
																									"nodeType": "YulIdentifier",
																									"src": "2137:10:13"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2149:2:13",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2133:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2133:19:13"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "2126:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2126:27:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2116:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2116:38:13"
																		},
																		"variables": [
																			{
																				"name": "deleteStart",
																				"nodeType": "YulTypedName",
																				"src": "2101:11:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2191:23:13",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2193:19:13",
																					"value": {
																						"name": "data",
																						"nodeType": "YulIdentifier",
																						"src": "2208:4:13"
																					},
																					"variableNames": [
																						{
																							"name": "deleteStart",
																							"nodeType": "YulIdentifier",
																							"src": "2193:11:13"
																						}
																					]
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "startIndex",
																					"nodeType": "YulIdentifier",
																					"src": "2173:10:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2185:4:13",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "2170:2:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2170:20:13"
																		},
																		"nodeType": "YulIf",
																		"src": "2167:47:13"
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2227:41:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "data",
																					"nodeType": "YulIdentifier",
																					"src": "2241:4:13"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "2251:1:13",
																							"type": "",
																							"value": "5"
																						},
																						{
																							"arguments": [
																								{
																									"name": "len",
																									"nodeType": "YulIdentifier",
																									"src": "2258:3:13"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2263:2:13",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2254:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2254:12:13"
																						}
																					],
																					"functionName": {
																						"name": "shr",
																						"nodeType": "YulIdentifier",
																						"src": "2247:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2247:20:13"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2237:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2237:31:13"
																		},
																		"variables": [
																			{
																				"name": "_2",
																				"nodeType": "YulTypedName",
																				"src": "2231:2:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "2281:24:13",
																		"value": {
																			"name": "deleteStart",
																			"nodeType": "YulIdentifier",
																			"src": "2294:11:13"
																		},
																		"variables": [
																			{
																				"name": "start",
																				"nodeType": "YulTypedName",
																				"src": "2285:5:13",
																				"type": ""
																			}
																		]
																	},
																	{
																		"body": {
																			"nodeType": "YulBlock",
																			"src": "2379:21:13",
																			"statements": [
																				{
																					"expression": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "2388:5:13"
																							},
																							{
																								"name": "_1",
																								"nodeType": "YulIdentifier",
																								"src": "2395:2:13"
																							}
																						],
																						"functionName": {
																							"name": "sstore",
																							"nodeType": "YulIdentifier",
																							"src": "2381:6:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2381:17:13"
																					},
																					"nodeType": "YulExpressionStatement",
																					"src": "2381:17:13"
																				}
																			]
																		},
																		"condition": {
																			"arguments": [
																				{
																					"name": "start",
																					"nodeType": "YulIdentifier",
																					"src": "2329:5:13"
																				},
																				{
																					"name": "_2",
																					"nodeType": "YulIdentifier",
																					"src": "2336:2:13"
																				}
																			],
																			"functionName": {
																				"name": "lt",
																				"nodeType": "YulIdentifier",
																				"src": "2326:2:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2326:13:13"
																		},
																		"nodeType": "YulForLoop",
																		"post": {
																			"nodeType": "YulBlock",
																			"src": "2340:26:13",
																			"statements": [
																				{
																					"nodeType": "YulAssignment",
																					"src": "2342:22:13",
																					"value": {
																						"arguments": [
																							{
																								"name": "start",
																								"nodeType": "YulIdentifier",
																								"src": "2355:5:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "2362:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "2351:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2351:13:13"
																					},
																					"variableNames": [
																						{
																							"name": "start",
																							"nodeType": "YulIdentifier",
																							"src": "2342:5:13"
																						}
																					]
																				}
																			]
																		},
																		"pre": {
																			"nodeType": "YulBlock",
																			"src": "2322:3:13",
																			"statements": []
																		},
																		"src": "2318:82:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "len",
																		"nodeType": "YulIdentifier",
																		"src": "1968:3:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1973:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1965:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1965:11:13"
															},
															"nodeType": "YulIf",
															"src": "1962:448:13"
														}
													]
												},
												"name": "clean_up_bytearray_end_slots_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "array",
														"nodeType": "YulTypedName",
														"src": "1924:5:13",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "1931:3:13",
														"type": ""
													},
													{
														"name": "startIndex",
														"nodeType": "YulTypedName",
														"src": "1936:10:13",
														"type": ""
													}
												],
												"src": "1871:545:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2506:81:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2516:65:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "data",
																				"nodeType": "YulIdentifier",
																				"src": "2531:4:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2549:1:13",
																										"type": "",
																										"value": "3"
																									},
																									{
																										"name": "len",
																										"nodeType": "YulIdentifier",
																										"src": "2552:3:13"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "2545:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2545:11:13"
																							},
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "2562:1:13",
																										"type": "",
																										"value": "0"
																									}
																								],
																								"functionName": {
																									"name": "not",
																									"nodeType": "YulIdentifier",
																									"src": "2558:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "2558:6:13"
																							}
																						],
																						"functionName": {
																							"name": "shr",
																							"nodeType": "YulIdentifier",
																							"src": "2541:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "2541:24:13"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "2537:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2537:29:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2527:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2527:40:13"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2573:1:13",
																				"type": "",
																				"value": "1"
																			},
																			{
																				"name": "len",
																				"nodeType": "YulIdentifier",
																				"src": "2576:3:13"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "2569:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2569:11:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "2524:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2524:57:13"
															},
															"variableNames": [
																{
																	"name": "used",
																	"nodeType": "YulIdentifier",
																	"src": "2516:4:13"
																}
															]
														}
													]
												},
												"name": "extract_used_part_and_set_length_of_short_byte_array",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "2483:4:13",
														"type": ""
													},
													{
														"name": "len",
														"nodeType": "YulTypedName",
														"src": "2489:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "used",
														"nodeType": "YulTypedName",
														"src": "2497:4:13",
														"type": ""
													}
												],
												"src": "2421:166:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2688:1256:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2698:24:13",
															"value": {
																"arguments": [
																	{
																		"name": "src",
																		"nodeType": "YulIdentifier",
																		"src": "2718:3:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "2712:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2712:10:13"
															},
															"variables": [
																{
																	"name": "newLen",
																	"nodeType": "YulTypedName",
																	"src": "2702:6:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2765:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "2767:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2767:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2767:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "2737:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2753:2:13",
																						"type": "",
																						"value": "64"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "2757:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "shl",
																					"nodeType": "YulIdentifier",
																					"src": "2749:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2749:10:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2761:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2745:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2745:18:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "2734:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2734:30:13"
															},
															"nodeType": "YulIf",
															"src": "2731:56:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "slot",
																		"nodeType": "YulIdentifier",
																		"src": "2840:4:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "slot",
																						"nodeType": "YulIdentifier",
																						"src": "2878:4:13"
																					}
																				],
																				"functionName": {
																					"name": "sload",
																					"nodeType": "YulIdentifier",
																					"src": "2872:5:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2872:11:13"
																			}
																		],
																		"functionName": {
																			"name": "extract_byte_array_length",
																			"nodeType": "YulIdentifier",
																			"src": "2846:25:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2846:38:13"
																	},
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "2886:6:13"
																	}
																],
																"functionName": {
																	"name": "clean_up_bytearray_end_slots_string_storage",
																	"nodeType": "YulIdentifier",
																	"src": "2796:43:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2796:97:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2796:97:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2902:18:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2919:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulTypedName",
																	"src": "2906:9:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2929:23:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2948:4:13",
																"type": "",
																"value": "0x20"
															},
															"variables": [
																{
																	"name": "srcOffset_1",
																	"nodeType": "YulTypedName",
																	"src": "2933:11:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2961:24:13",
															"value": {
																"name": "srcOffset_1",
																"nodeType": "YulIdentifier",
																"src": "2974:11:13"
															},
															"variableNames": [
																{
																	"name": "srcOffset",
																	"nodeType": "YulIdentifier",
																	"src": "2961:9:13"
																}
															]
														},
														{
															"cases": [
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3031:656:13",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3045:35:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "3064:6:13"
																						},
																						{
																							"arguments": [
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3076:2:13",
																									"type": "",
																									"value": "31"
																								}
																							],
																							"functionName": {
																								"name": "not",
																								"nodeType": "YulIdentifier",
																								"src": "3072:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3072:7:13"
																						}
																					],
																					"functionName": {
																						"name": "and",
																						"nodeType": "YulIdentifier",
																						"src": "3060:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3060:20:13"
																				},
																				"variables": [
																					{
																						"name": "loopEnd",
																						"nodeType": "YulTypedName",
																						"src": "3049:7:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3093:49:13",
																				"value": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3137:4:13"
																						}
																					],
																					"functionName": {
																						"name": "array_dataslot_string_storage",
																						"nodeType": "YulIdentifier",
																						"src": "3107:29:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3107:35:13"
																				},
																				"variables": [
																					{
																						"name": "dstPtr",
																						"nodeType": "YulTypedName",
																						"src": "3097:6:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3155:10:13",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3164:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "i",
																						"nodeType": "YulTypedName",
																						"src": "3159:1:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3242:172:13",
																					"statements": [
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3267:6:13"
																									},
																									{
																										"arguments": [
																											{
																												"arguments": [
																													{
																														"name": "src",
																														"nodeType": "YulIdentifier",
																														"src": "3285:3:13"
																													},
																													{
																														"name": "srcOffset",
																														"nodeType": "YulIdentifier",
																														"src": "3290:9:13"
																													}
																												],
																												"functionName": {
																													"name": "add",
																													"nodeType": "YulIdentifier",
																													"src": "3281:3:13"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "3281:19:13"
																											}
																										],
																										"functionName": {
																											"name": "mload",
																											"nodeType": "YulIdentifier",
																											"src": "3275:5:13"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3275:26:13"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "3260:6:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3260:42:13"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3260:42:13"
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "3319:24:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3333:6:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3341:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3329:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3329:14:13"
																							},
																							"variableNames": [
																								{
																									"name": "dstPtr",
																									"nodeType": "YulIdentifier",
																									"src": "3319:6:13"
																								}
																							]
																						},
																						{
																							"nodeType": "YulAssignment",
																							"src": "3360:40:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "srcOffset",
																										"nodeType": "YulIdentifier",
																										"src": "3377:9:13"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "3388:11:13"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3373:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3373:27:13"
																							},
																							"variableNames": [
																								{
																									"name": "srcOffset",
																									"nodeType": "YulIdentifier",
																									"src": "3360:9:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "3189:1:13"
																						},
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "3192:7:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "3186:2:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3186:14:13"
																				},
																				"nodeType": "YulForLoop",
																				"post": {
																					"nodeType": "YulBlock",
																					"src": "3201:28:13",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "3203:24:13",
																							"value": {
																								"arguments": [
																									{
																										"name": "i",
																										"nodeType": "YulIdentifier",
																										"src": "3212:1:13"
																									},
																									{
																										"name": "srcOffset_1",
																										"nodeType": "YulIdentifier",
																										"src": "3215:11:13"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3208:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3208:19:13"
																							},
																							"variableNames": [
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "3203:1:13"
																								}
																							]
																						}
																					]
																				},
																				"pre": {
																					"nodeType": "YulBlock",
																					"src": "3182:3:13",
																					"statements": []
																				},
																				"src": "3178:236:13"
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3462:166:13",
																					"statements": [
																						{
																							"nodeType": "YulVariableDeclaration",
																							"src": "3480:43:13",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "3507:3:13"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "3512:9:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "3503:3:13"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3503:19:13"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "3497:5:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3497:26:13"
																							},
																							"variables": [
																								{
																									"name": "lastValue",
																									"nodeType": "YulTypedName",
																									"src": "3484:9:13",
																									"type": ""
																								}
																							]
																						},
																						{
																							"expression": {
																								"arguments": [
																									{
																										"name": "dstPtr",
																										"nodeType": "YulIdentifier",
																										"src": "3547:6:13"
																									},
																									{
																										"arguments": [
																											{
																												"name": "lastValue",
																												"nodeType": "YulIdentifier",
																												"src": "3559:9:13"
																											},
																											{
																												"arguments": [
																													{
																														"arguments": [
																															{
																																"arguments": [
																																	{
																																		"arguments": [
																																			{
																																				"kind": "number",
																																				"nodeType": "YulLiteral",
																																				"src": "3586:1:13",
																																				"type": "",
																																				"value": "3"
																																			},
																																			{
																																				"name": "newLen",
																																				"nodeType": "YulIdentifier",
																																				"src": "3589:6:13"
																																			}
																																		],
																																		"functionName": {
																																			"name": "shl",
																																			"nodeType": "YulIdentifier",
																																			"src": "3582:3:13"
																																		},
																																		"nodeType": "YulFunctionCall",
																																		"src": "3582:14:13"
																																	},
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "3598:3:13",
																																		"type": "",
																																		"value": "248"
																																	}
																																],
																																"functionName": {
																																	"name": "and",
																																	"nodeType": "YulIdentifier",
																																	"src": "3578:3:13"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "3578:24:13"
																															},
																															{
																																"arguments": [
																																	{
																																		"kind": "number",
																																		"nodeType": "YulLiteral",
																																		"src": "3608:1:13",
																																		"type": "",
																																		"value": "0"
																																	}
																																],
																																"functionName": {
																																	"name": "not",
																																	"nodeType": "YulIdentifier",
																																	"src": "3604:3:13"
																																},
																																"nodeType": "YulFunctionCall",
																																"src": "3604:6:13"
																															}
																														],
																														"functionName": {
																															"name": "shr",
																															"nodeType": "YulIdentifier",
																															"src": "3574:3:13"
																														},
																														"nodeType": "YulFunctionCall",
																														"src": "3574:37:13"
																													}
																												],
																												"functionName": {
																													"name": "not",
																													"nodeType": "YulIdentifier",
																													"src": "3570:3:13"
																												},
																												"nodeType": "YulFunctionCall",
																												"src": "3570:42:13"
																											}
																										],
																										"functionName": {
																											"name": "and",
																											"nodeType": "YulIdentifier",
																											"src": "3555:3:13"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3555:58:13"
																									}
																								],
																								"functionName": {
																									"name": "sstore",
																									"nodeType": "YulIdentifier",
																									"src": "3540:6:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3540:74:13"
																							},
																							"nodeType": "YulExpressionStatement",
																							"src": "3540:74:13"
																						}
																					]
																				},
																				"condition": {
																					"arguments": [
																						{
																							"name": "loopEnd",
																							"nodeType": "YulIdentifier",
																							"src": "3433:7:13"
																						},
																						{
																							"name": "newLen",
																							"nodeType": "YulIdentifier",
																							"src": "3442:6:13"
																						}
																					],
																					"functionName": {
																						"name": "lt",
																						"nodeType": "YulIdentifier",
																						"src": "3430:2:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3430:19:13"
																				},
																				"nodeType": "YulIf",
																				"src": "3427:201:13"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3648:4:13"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "3662:1:13",
																											"type": "",
																											"value": "1"
																										},
																										{
																											"name": "newLen",
																											"nodeType": "YulIdentifier",
																											"src": "3665:6:13"
																										}
																									],
																									"functionName": {
																										"name": "shl",
																										"nodeType": "YulIdentifier",
																										"src": "3658:3:13"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "3658:14:13"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "3674:1:13",
																									"type": "",
																									"value": "1"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "3654:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3654:22:13"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "3641:6:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3641:36:13"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3641:36:13"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3024:663:13",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3029:1:13",
																		"type": "",
																		"value": "1"
																	}
																},
																{
																	"body": {
																		"nodeType": "YulBlock",
																		"src": "3704:234:13",
																		"statements": [
																			{
																				"nodeType": "YulVariableDeclaration",
																				"src": "3718:14:13",
																				"value": {
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3731:1:13",
																					"type": "",
																					"value": "0"
																				},
																				"variables": [
																					{
																						"name": "value",
																						"nodeType": "YulTypedName",
																						"src": "3722:5:13",
																						"type": ""
																					}
																				]
																			},
																			{
																				"body": {
																					"nodeType": "YulBlock",
																					"src": "3767:67:13",
																					"statements": [
																						{
																							"nodeType": "YulAssignment",
																							"src": "3785:35:13",
																							"value": {
																								"arguments": [
																									{
																										"arguments": [
																											{
																												"name": "src",
																												"nodeType": "YulIdentifier",
																												"src": "3804:3:13"
																											},
																											{
																												"name": "srcOffset",
																												"nodeType": "YulIdentifier",
																												"src": "3809:9:13"
																											}
																										],
																										"functionName": {
																											"name": "add",
																											"nodeType": "YulIdentifier",
																											"src": "3800:3:13"
																										},
																										"nodeType": "YulFunctionCall",
																										"src": "3800:19:13"
																									}
																								],
																								"functionName": {
																									"name": "mload",
																									"nodeType": "YulIdentifier",
																									"src": "3794:5:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3794:26:13"
																							},
																							"variableNames": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "3785:5:13"
																								}
																							]
																						}
																					]
																				},
																				"condition": {
																					"name": "newLen",
																					"nodeType": "YulIdentifier",
																					"src": "3748:6:13"
																				},
																				"nodeType": "YulIf",
																				"src": "3745:89:13"
																			},
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "slot",
																							"nodeType": "YulIdentifier",
																							"src": "3854:4:13"
																						},
																						{
																							"arguments": [
																								{
																									"name": "value",
																									"nodeType": "YulIdentifier",
																									"src": "3913:5:13"
																								},
																								{
																									"name": "newLen",
																									"nodeType": "YulIdentifier",
																									"src": "3920:6:13"
																								}
																							],
																							"functionName": {
																								"name": "extract_used_part_and_set_length_of_short_byte_array",
																								"nodeType": "YulIdentifier",
																								"src": "3860:52:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "3860:67:13"
																						}
																					],
																					"functionName": {
																						"name": "sstore",
																						"nodeType": "YulIdentifier",
																						"src": "3847:6:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "3847:81:13"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "3847:81:13"
																			}
																		]
																	},
																	"nodeType": "YulCase",
																	"src": "3696:242:13",
																	"value": "default"
																}
															],
															"expression": {
																"arguments": [
																	{
																		"name": "newLen",
																		"nodeType": "YulIdentifier",
																		"src": "3004:6:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3012:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "3001:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3001:14:13"
															},
															"nodeType": "YulSwitch",
															"src": "2994:944:13"
														}
													]
												},
												"name": "copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "slot",
														"nodeType": "YulTypedName",
														"src": "2673:4:13",
														"type": ""
													},
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "2679:3:13",
														"type": ""
													}
												],
												"src": "2592:1352:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4050:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "4060:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4072:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4083:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4068:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4068:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "4060:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4102:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "4117:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4133:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "4138:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "4129:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4129:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4142:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4125:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4125:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4113:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4113:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4095:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4095:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4095:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4019:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4030:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "4041:4:13",
														"type": ""
													}
												],
												"src": "3949:203:13"
											}
										]
									},
									"contents": "{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n        let _1 := 32\n        let offset := mload(add(headStart, _1))\n        let _2 := sub(shl(64, 1), 1)\n        if gt(offset, _2) { revert(0, 0) }\n        let _3 := add(headStart, offset)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let _4 := mload(_3)\n        if gt(_4, _2) { panic_error_0x41() }\n        let _5 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_4, 0x1f), _5), 63), _5))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _4)\n        if gt(add(add(_3, _4), _1), dataEnd) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _4) { i := add(i, _1) }\n        {\n            mstore(add(add(memPtr, i), _1), mload(add(add(_3, i), _1)))\n        }\n        mstore(add(add(memPtr, _4), _1), 0)\n        value1 := memPtr\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(_1, array)\n            let data := keccak256(_1, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := srcOffset_1\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"linkReferences": {},
							"object": "608060405234801562000010575f80fd5b50604051620015f3380380620015f383398101604081905262000033916200015a565b816040518060400160405280600c81526020016b2834b1ba3ab932aa37b5b2b760a11b81525060405180604001604052806002815260200161141560f21b815250815f9081620000849190620002d4565b506001620000938282620002d4565b5050506001600160a01b038116620000c457604051631e4fbdf760e01b81525f600482015260240160405180910390fd5b620000cf81620000f5565b506007620000de8282620002d4565b50505f600855506009805460ff191690556200039c565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b634e487b7160e01b5f52604160045260245ffd5b5f80604083850312156200016c575f80fd5b82516001600160a01b038116811462000183575f80fd5b602084810151919350906001600160401b0380821115620001a2575f80fd5b818601915086601f830112620001b6575f80fd5b815181811115620001cb57620001cb62000146565b604051601f8201601f19908116603f01168101908382118183101715620001f657620001f662000146565b8160405282815289868487010111156200020e575f80fd5b5f93505b8284101562000231578484018601518185018701529285019262000212565b5f8684830101528096505050505050509250929050565b600181811c908216806200025d57607f821691505b6020821081036200027c57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002cf575f81815260208120601f850160051c81016020861015620002aa5750805b601f850160051c820191505b81811015620002cb57828155600101620002b6565b5050505b505050565b81516001600160401b03811115620002f057620002f062000146565b620003088162000301845462000248565b8462000282565b602080601f8311600181146200033e575f8415620003265750858301515b5f19600386901b1c1916600185901b178555620002cb565b5f85815260208120601f198616915b828110156200036e578886015182559484019460019091019084016200034d565b50858210156200038c57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b61124980620003aa5f395ff3fe608060405234801561000f575f80fd5b5060043610610148575f3560e01c8063854cbb4a116100bf578063a035b1fe11610079578063a035b1fe1461028c578063a22cb46514610295578063b88d4fde146102a8578063c87b56dd146102bb578063e985e9c5146102ce578063f2fde38b146102e1575f80fd5b8063854cbb4a1461023b5780638c2a5bc8146102505780638da5cb5b1461025857806391b7f5ed1461026957806395d89b411461027c57806398d5fdca14610284575f80fd5b806342842e0e1161011057806342842e0e146101dc5780635987cc19146101ef5780636352211e146101f757806364edfbf01461020a57806370a0823114610212578063715018a614610233575f80fd5b806301ffc9a71461014c57806306fdde0314610174578063081812fc14610189578063095ea7b3146101b457806323b872dd146101c9575b5f80fd5b61015f61015a366004610e8e565b6102f4565b60405190151581526020015b60405180910390f35b61017c610345565b60405161016b9190610ef6565b61019c610197366004610f08565b6103d4565b6040516001600160a01b03909116815260200161016b565b6101c76101c2366004610f3a565b6103fb565b005b6101c76101d7366004610f62565b61040a565b6101c76101ea366004610f62565b610498565b6101c76104b7565b61019c610205366004610f08565b6104ce565b6101c76104d8565b610225610220366004610f9b565b61051d565b60405190815260200161016b565b6101c7610562565b610243610575565b60405161016b9190610fb4565b6101c761067a565b6006546001600160a01b031661019c565b6101c7610277366004610f08565b61068e565b61017c61069b565b600854610225565b61022560085481565b6101c76102a3366004611003565b6106aa565b6101c76102b6366004611050565b6106b5565b61017c6102c9366004610f08565b6106cc565b61015f6102dc366004611125565b610763565b6101c76102ef366004610f9b565b610790565b5f6001600160e01b031982166380ac58cd60e01b148061032457506001600160e01b03198216635b5e139f60e01b145b8061033f57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60605f805461035390611156565b80601f016020809104026020016040519081016040528092919081815260200182805461037f90611156565b80156103ca5780601f106103a1576101008083540402835291602001916103ca565b820191905f5260205f20905b8154815290600101906020018083116103ad57829003601f168201915b5050505050905090565b5f6103de826107cd565b505f828152600460205260409020546001600160a01b031661033f565b610406828233610805565b5050565b6001600160a01b03821661043857604051633250574960e11b81525f60048201526024015b60405180910390fd5b5f610444838333610812565b9050836001600160a01b0316816001600160a01b031614610492576040516364283d7b60e01b81526001600160a01b038086166004830152602482018490528216604482015260640161042f565b50505050565b6104b283838360405180602001604052805f8152506106b5565b505050565b6104bf610904565b6009805460ff19166001179055565b5f61033f826107cd565b600854604051339180156108fc02915f818181858888f19350505050158015610503573d5f803e3d5ffd5b5061050d33610790565b5f6008556009805460ff19169055565b5f6001600160a01b038216610547576040516322718ad960e21b81525f600482015260240161042f565b506001600160a01b03165f9081526003602052604090205490565b61056a610904565b6105735f610931565b565b6105a860405180608001604052805f6001600160a01b03168152602001606081526020015f81526020015f151581525090565b60405180608001604052806105c56006546001600160a01b031690565b6001600160a01b03168152602001600780546105e090611156565b80601f016020809104026020016040519081016040528092919081815260200182805461060c90611156565b80156106575780601f1061062e57610100808354040283529160200191610657565b820191905f5260205f20905b81548152906001019060200180831161063a57829003601f168201915b5050509183525050600854602082015260095460ff161515604090910152919050565b610682610904565b6009805460ff19169055565b610696610904565b600855565b60606001805461035390611156565b610406338383610982565b6106c084848461040a565b61049284848484610a20565b60606106d7826107cd565b505f61071360408051808201909152601881527f697066733a2f2f7069656365546f6b656e426173655552490000000000000000602082015290565b90505f8151116107315760405180602001604052805f81525061075c565b8061073b84610b46565b60405160200161074c92919061118e565b6040516020818303038152906040525b9392505050565b6001600160a01b039182165f90815260056020908152604080832093909416825291909152205460ff1690565b610798610904565b6001600160a01b0381166107c157604051631e4fbdf760e01b81525f600482015260240161042f565b6107ca81610931565b50565b5f818152600260205260408120546001600160a01b03168061033f57604051637e27328960e01b81526004810184905260240161042f565b6104b28383836001610bd6565b5f828152600260205260408120546001600160a01b039081169083161561083e5761083e818486610cda565b6001600160a01b03811615610878576108595f855f80610bd6565b6001600160a01b0381165f90815260036020526040902080545f190190555b6001600160a01b038516156108a6576001600160a01b0385165f908152600360205260409020805460010190555b5f8481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b6006546001600160a01b031633146105735760405163118cdaa760e01b815233600482015260240161042f565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b6001600160a01b0382166109b457604051630b61174360e31b81526001600160a01b038316600482015260240161042f565b6001600160a01b038381165f81815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561049257604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290610a629033908890879087906004016111bc565b6020604051808303815f875af1925050508015610a9c575060408051601f3d908101601f19168201909252610a99918101906111f8565b60015b610b03573d808015610ac9576040519150601f19603f3d011682016040523d82523d5f602084013e610ace565b606091505b5080515f03610afb57604051633250574960e11b81526001600160a01b038516600482015260240161042f565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610b3f57604051633250574960e11b81526001600160a01b038516600482015260240161042f565b5050505050565b60605f610b5283610d3e565b60010190505f8167ffffffffffffffff811115610b7157610b7161103c565b6040519080825280601f01601f191660200182016040528015610b9b576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610ba557509392505050565b8080610bea57506001600160a01b03821615155b15610cab575f610bf9846107cd565b90506001600160a01b03831615801590610c255750826001600160a01b0316816001600160a01b031614155b8015610c385750610c368184610763565b155b15610c615760405163a9fbf51f60e01b81526001600160a01b038416600482015260240161042f565b8115610ca95783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b50505f90815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610ce5838383610e15565b6104b2576001600160a01b038316610d1357604051637e27328960e01b81526004810182905260240161042f565b60405163177e802f60e01b81526001600160a01b03831660048201526024810182905260440161042f565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610d7c5772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310610da8576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610dc657662386f26fc10000830492506010015b6305f5e1008310610dde576305f5e100830492506008015b6127108310610df257612710830492506004015b60648310610e04576064830492506002015b600a831061033f5760010192915050565b5f6001600160a01b03831615801590610e715750826001600160a01b0316846001600160a01b03161480610e4e5750610e4e8484610763565b80610e7157505f828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b0319811681146107ca575f80fd5b5f60208284031215610e9e575f80fd5b813561075c81610e79565b5f5b83811015610ec3578181015183820152602001610eab565b50505f910152565b5f8151808452610ee2816020860160208601610ea9565b601f01601f19169290920160200192915050565b602081525f61075c6020830184610ecb565b5f60208284031215610f18575f80fd5b5035919050565b80356001600160a01b0381168114610f35575f80fd5b919050565b5f8060408385031215610f4b575f80fd5b610f5483610f1f565b946020939093013593505050565b5f805f60608486031215610f74575f80fd5b610f7d84610f1f565b9250610f8b60208501610f1f565b9150604084013590509250925092565b5f60208284031215610fab575f80fd5b61075c82610f1f565b602080825282516001600160a01b031682820152820151608060408301525f90610fe160a0840182610ecb565b9050604084015160608401526060840151151560808401528091505092915050565b5f8060408385031215611014575f80fd5b61101d83610f1f565b915060208301358015158114611031575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f8060808587031215611063575f80fd5b61106c85610f1f565b935061107a60208601610f1f565b925060408501359150606085013567ffffffffffffffff8082111561109d575f80fd5b818701915087601f8301126110b0575f80fd5b8135818111156110c2576110c261103c565b604051601f8201601f19908116603f011681019083821181831017156110ea576110ea61103c565b816040528281528a6020848701011115611102575f80fd5b826020860160208301375f60208483010152809550505050505092959194509250565b5f8060408385031215611136575f80fd5b61113f83610f1f565b915061114d60208401610f1f565b90509250929050565b600181811c9082168061116a57607f821691505b60208210810361118857634e487b7160e01b5f52602260045260245ffd5b50919050565b5f835161119f818460208801610ea9565b8351908301906111b3818360208801610ea9565b01949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f906111ee90830184610ecb565b9695505050505050565b5f60208284031215611208575f80fd5b815161075c81610e7956fea26469706673582212201c8c174e7c88dfb119f5fd3f9a49e9567e0ac31a44600c86af58e4027c32288464736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x10 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x15F3 CODESIZE SUB DUP1 PUSH3 0x15F3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x33 SWAP2 PUSH3 0x15A JUMP JUMPDEST DUP2 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0xC DUP2 MSTORE PUSH1 0x20 ADD PUSH12 0x2834B1BA3AB932AA37B5B2B7 PUSH1 0xA1 SHL DUP2 MSTORE POP PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x2 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1415 PUSH1 0xF2 SHL DUP2 MSTORE POP DUP2 PUSH0 SWAP1 DUP2 PUSH3 0x84 SWAP2 SWAP1 PUSH3 0x2D4 JUMP JUMPDEST POP PUSH1 0x1 PUSH3 0x93 DUP3 DUP3 PUSH3 0x2D4 JUMP JUMPDEST POP POP POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0xC4 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH3 0xCF DUP2 PUSH3 0xF5 JUMP JUMPDEST POP PUSH1 0x7 PUSH3 0xDE DUP3 DUP3 PUSH3 0x2D4 JUMP JUMPDEST POP POP PUSH0 PUSH1 0x8 SSTORE POP PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH3 0x39C JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH3 0x16C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x183 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP5 DUP2 ADD MLOAD SWAP2 SWAP4 POP SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x1A2 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP7 ADD SWAP2 POP DUP7 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x1B6 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH3 0x1CB JUMPI PUSH3 0x1CB PUSH3 0x146 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x1F6 JUMPI PUSH3 0x1F6 PUSH3 0x146 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP10 DUP7 DUP5 DUP8 ADD ADD GT ISZERO PUSH3 0x20E JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 SWAP4 POP JUMPDEST DUP3 DUP5 LT ISZERO PUSH3 0x231 JUMPI DUP5 DUP5 ADD DUP7 ADD MLOAD DUP2 DUP6 ADD DUP8 ADD MSTORE SWAP3 DUP6 ADD SWAP3 PUSH3 0x212 JUMP JUMPDEST PUSH0 DUP7 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP7 POP POP POP POP POP POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x25D JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x27C JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x2CF JUMPI PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x2AA JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x2CB JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x2B6 JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x2F0 JUMPI PUSH3 0x2F0 PUSH3 0x146 JUMP JUMPDEST PUSH3 0x308 DUP2 PUSH3 0x301 DUP5 SLOAD PUSH3 0x248 JUMP JUMPDEST DUP5 PUSH3 0x282 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x33E JUMPI PUSH0 DUP5 ISZERO PUSH3 0x326 JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x2CB JUMP JUMPDEST PUSH0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x36E JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x34D JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x38C JUMPI DUP8 DUP6 ADD MLOAD PUSH0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH2 0x1249 DUP1 PUSH3 0x3AA PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x148 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x854CBB4A GT PUSH2 0xBF JUMPI DUP1 PUSH4 0xA035B1FE GT PUSH2 0x79 JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x854CBB4A EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x8C2A5BC8 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x91B7F5ED EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x284 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x110 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x5987CC19 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x64EDFBF0 EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x233 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C9 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x15F PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xE8E JUMP JUMPDEST PUSH2 0x2F4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH2 0x345 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0xEF6 JUMP JUMPDEST PUSH2 0x19C PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16B JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF3A JUMP JUMPDEST PUSH2 0x3FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C7 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xF62 JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xF62 JUMP JUMPDEST PUSH2 0x498 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x19C PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x4D8 JUMP JUMPDEST PUSH2 0x225 PUSH2 0x220 CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x51D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16B JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x562 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x575 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x67A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x19C JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x277 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST PUSH2 0x17C PUSH2 0x69B JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x225 JUMP JUMPDEST PUSH2 0x225 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1003 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1050 JUMP JUMPDEST PUSH2 0x6B5 JUMP JUMPDEST PUSH2 0x17C PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x6CC JUMP JUMPDEST PUSH2 0x15F PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1125 JUMP JUMPDEST PUSH2 0x763 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x790 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x324 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x33F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 SLOAD PUSH2 0x353 SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37F SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3A1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x3DE DUP3 PUSH2 0x7CD JUMP JUMPDEST POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x33F JUMP JUMPDEST PUSH2 0x406 DUP3 DUP3 CALLER PUSH2 0x805 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x438 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x444 DUP4 DUP4 CALLER PUSH2 0x812 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x4B2 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x6B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x904 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH0 PUSH2 0x33F DUP3 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD CALLER SWAP2 DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x503 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH2 0x50D CALLER PUSH2 0x790 JUMP JUMPDEST PUSH0 PUSH1 0x8 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x56A PUSH2 0x904 JUMP JUMPDEST PUSH2 0x573 PUSH0 PUSH2 0x931 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x5C5 PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP1 SLOAD PUSH2 0x5E0 SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x60C SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x657 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x62E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x657 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x63A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x8 SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x682 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x696 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x353 SWAP1 PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x406 CALLER DUP4 DUP4 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x6C0 DUP5 DUP5 DUP5 PUSH2 0x40A JUMP JUMPDEST PUSH2 0x492 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA20 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6D7 DUP3 PUSH2 0x7CD JUMP JUMPDEST POP PUSH0 PUSH2 0x713 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x697066733A2F2F7069656365546F6B656E426173655552490000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0x731 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x75C JUMP JUMPDEST DUP1 PUSH2 0x73B DUP5 PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74C SWAP3 SWAP2 SWAP1 PUSH2 0x118E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x798 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH2 0x7CA DUP2 PUSH2 0x931 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x33F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH2 0x4B2 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xBD6 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x83E JUMPI PUSH2 0x83E DUP2 DUP5 DUP7 PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x878 JUMPI PUSH2 0x859 PUSH0 DUP6 PUSH0 DUP1 PUSH2 0xBD6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x8A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xA62 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x11BC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA9C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA99 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB03 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xACE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH0 SUB PUSH2 0xAFB JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xB52 DUP4 PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB71 JUMPI PUSH2 0xB71 PUSH2 0x103C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB9B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xBA5 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0xBEA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xCAB JUMPI PUSH0 PUSH2 0xBF9 DUP5 PUSH2 0x7CD JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xC25 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC38 JUMPI POP PUSH2 0xC36 DUP2 DUP5 PUSH2 0x763 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xC61 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST DUP2 ISZERO PUSH2 0xCA9 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xCE5 DUP4 DUP4 DUP4 PUSH2 0xE15 JUMP JUMPDEST PUSH2 0x4B2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x42F JUMP JUMPDEST PUSH0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xD7C JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xDA8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xDC6 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xDDE JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xDF2 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xE04 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x33F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xE71 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xE4E JUMPI POP PUSH2 0xE4E DUP5 DUP5 PUSH2 0x763 JUMP JUMPDEST DUP1 PUSH2 0xE71 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7CA JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE9E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x75C DUP2 PUSH2 0xE79 JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEC3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xEAB JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xEE2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xEA9 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x75C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xECB JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF18 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF35 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF4B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF54 DUP4 PUSH2 0xF1F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF74 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF7D DUP5 PUSH2 0xF1F JUMP JUMPDEST SWAP3 POP PUSH2 0xF8B PUSH1 0x20 DUP6 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x75C DUP3 PUSH2 0xF1F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 ADD MSTORE DUP3 ADD MLOAD PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH0 SWAP1 PUSH2 0xFE1 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0xECB JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1014 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x101D DUP4 PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1031 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1063 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x106C DUP6 PUSH2 0xF1F JUMP JUMPDEST SWAP4 POP PUSH2 0x107A PUSH1 0x20 DUP7 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x109D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10B0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x103C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x10EA JUMPI PUSH2 0x10EA PUSH2 0x103C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1102 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1136 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x113F DUP4 PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP PUSH2 0x114D PUSH1 0x20 DUP5 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x116A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1188 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP4 MLOAD PUSH2 0x119F DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xEA9 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x11B3 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xEA9 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0x11EE SWAP1 DUP4 ADD DUP5 PUSH2 0xECB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1208 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x75C DUP2 PUSH2 0xE79 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR DUP13 OR 0x4E PUSH29 0x88DFB119F5FD3F9A49E9567E0AC31A44600C86AF58E4027C3228846473 PUSH16 0x6C634300081400330000000000000000 ",
							"sourceMap": "196:1115:0:-:0;;;312:200;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;415:12;1419:116:3;;;;;;;;;;;;;-1:-1:-1;;;1419:116:3;;;;;;;;;;;;;;;;-1:-1:-1;;;1419:116:3;;;1494:5;1486;:13;;;;;;:::i;:::-;-1:-1:-1;1510:7:3;:17;1520:7;1510;:17;:::i;:::-;-1:-1:-1;;;;;;;;1311:26:1;;1307:97;;1361:31;;-1:-1:-1;;;1361:31:1;;1389:1;1361:31;;;4095:51:13;4068:18;;1361:31:1;;;;;;;1307:97;1414:32;1433:12;1414:18;:32::i;:::-;-1:-1:-1;445:5:0::2;:14;453:6:::0;445:5;:14:::2;:::i;:::-;-1:-1:-1::0;;478:1:0::2;470:5;:9:::0;-1:-1:-1;490:6:0::2;:14:::0;;-1:-1:-1;;490:14:0::2;::::0;;196:1115;;3006:191:1;3099:6;;;-1:-1:-1;;;;;3116:17:1;;;-1:-1:-1;;;;;;3116:17:1;;;;;;;3149:40;;3099:6;;;3116:17;3099:6;;3149:40;;3080:16;;3149:40;3069:128;3006:191;:::o;14:127:13:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:1209;235:6;243;296:2;284:9;275:7;271:23;267:32;264:52;;;312:1;309;302:12;264:52;338:16;;-1:-1:-1;;;;;383:31:13;;373:42;;363:70;;429:1;426;419:12;363:70;476:2;507:18;;;501:25;452:5;;-1:-1:-1;476:2:13;-1:-1:-1;;;;;575:14:13;;;572:34;;;602:1;599;592:12;572:34;640:6;629:9;625:22;615:32;;685:7;678:4;674:2;670:13;666:27;656:55;;707:1;704;697:12;656:55;736:2;730:9;758:2;754;751:10;748:36;;;764:18;;:::i;:::-;839:2;833:9;807:2;893:13;;-1:-1:-1;;889:22:13;;;913:2;885:31;881:40;869:53;;;937:18;;;957:22;;;934:46;931:72;;;983:18;;:::i;:::-;1023:10;1019:2;1012:22;1058:2;1050:6;1043:18;1098:7;1093:2;1088;1084;1080:11;1076:20;1073:33;1070:53;;;1119:1;1116;1109:12;1070:53;1141:1;1132:10;;1151:129;1165:2;1162:1;1159:9;1151:129;;;1253:10;;;1249:19;;1243:26;1222:14;;;1218:23;;1211:59;1176:10;;;;1151:129;;;1322:1;1317:2;1312;1304:6;1300:15;1296:24;1289:35;1343:6;1333:16;;;;;;;;146:1209;;;;;:::o;1360:380::-;1439:1;1435:12;;;;1482;;;1503:61;;1557:4;1549:6;1545:17;1535:27;;1503:61;1610:2;1602:6;1599:14;1579:18;1576:38;1573:161;;1656:10;1651:3;1647:20;1644:1;1637:31;1691:4;1688:1;1681:15;1719:4;1716:1;1709:15;1573:161;;1360:380;;;:::o;1871:545::-;1973:2;1968:3;1965:11;1962:448;;;2009:1;2034:5;2030:2;2023:17;2079:4;2075:2;2065:19;2149:2;2137:10;2133:19;2130:1;2126:27;2120:4;2116:38;2185:4;2173:10;2170:20;2167:47;;;-1:-1:-1;2208:4:13;2167:47;2263:2;2258:3;2254:12;2251:1;2247:20;2241:4;2237:31;2227:41;;2318:82;2336:2;2329:5;2326:13;2318:82;;;2381:17;;;2362:1;2351:13;2318:82;;;2322:3;;;1962:448;1871:545;;;:::o;2592:1352::-;2712:10;;-1:-1:-1;;;;;2734:30:13;;2731:56;;;2767:18;;:::i;:::-;2796:97;2886:6;2846:38;2878:4;2872:11;2846:38;:::i;:::-;2840:4;2796:97;:::i;:::-;2948:4;;3012:2;3001:14;;3029:1;3024:663;;;;3731:1;3748:6;3745:89;;;-1:-1:-1;3800:19:13;;;3794:26;3745:89;-1:-1:-1;;2549:1:13;2545:11;;;2541:24;2537:29;2527:40;2573:1;2569:11;;;2524:57;3847:81;;2994:944;;3024:663;1818:1;1811:14;;;1855:4;1842:18;;-1:-1:-1;;3060:20:13;;;3178:236;3192:7;3189:1;3186:14;3178:236;;;3281:19;;;3275:26;3260:42;;3373:27;;;;3341:1;3329:14;;;;3208:19;;3178:236;;;3182:3;3442:6;3433:7;3430:19;3427:201;;;3503:19;;;3497:26;-1:-1:-1;;3586:1:13;3582:14;;;3598:3;3578:24;3574:37;3570:42;3555:58;3540:74;;3427:201;-1:-1:-1;;;;;3674:1:13;3658:14;;;3654:22;3641:36;;-1:-1:-1;2592:1352:13:o;3949:203::-;196:1115:0;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_approve_1238": {
									"entryPoint": 2053,
									"id": 1238,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_approve_1304": {
									"entryPoint": 3030,
									"id": 1304,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_baseURI_49": {
									"entryPoint": null,
									"id": 49,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_checkAuthorized_886": {
									"entryPoint": 3290,
									"id": 886,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_checkOnERC721Received_1434": {
									"entryPoint": 2592,
									"id": 1434,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@_checkOwner_226": {
									"entryPoint": 2308,
									"id": 226,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getApproved_813": {
									"entryPoint": null,
									"id": 813,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_isAuthorized_849": {
									"entryPoint": 3605,
									"id": 849,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@_msgSender_1610": {
									"entryPoint": null,
									"id": 1610,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_ownerOf_800": {
									"entryPoint": null,
									"id": 800,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_requireOwned_1370": {
									"entryPoint": 1997,
									"id": 1370,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@_setApprovalForAll_1341": {
									"entryPoint": 2434,
									"id": 1341,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@_transferOwnership_288": {
									"entryPoint": 2353,
									"id": 288,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_update_992": {
									"entryPoint": 2066,
									"id": 992,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@approve_647": {
									"entryPoint": 1019,
									"id": 647,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@balanceOf_555": {
									"entryPoint": 1309,
									"id": 555,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getApproved_664": {
									"entryPoint": 980,
									"id": 664,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@getPrice_73": {
									"entryPoint": null,
									"id": 73,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@getSinglePictureToken_65": {
									"entryPoint": 1397,
									"id": 65,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@isApprovedForAll_697": {
									"entryPoint": 1891,
									"id": 697,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@log10_2785": {
									"entryPoint": 3390,
									"id": 2785,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@name_577": {
									"entryPoint": 837,
									"id": 577,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@notPutOnSale_105": {
									"entryPoint": 1658,
									"id": 105,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@ownerOf_568": {
									"entryPoint": 1230,
									"id": 568,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@owner_209": {
									"entryPoint": null,
									"id": 209,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@price_11": {
									"entryPoint": null,
									"id": 11,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@purchase_131": {
									"entryPoint": 1240,
									"id": 131,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@putOnSale_95": {
									"entryPoint": 1207,
									"id": 95,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@renounceOwnership_240": {
									"entryPoint": 1378,
									"id": 240,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransferFrom_761": {
									"entryPoint": 1176,
									"id": 761,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransferFrom_787": {
									"entryPoint": 1717,
									"id": 787,
									"parameterSlots": 4,
									"returnSlots": 0
								},
								"@setApprovalForAll_680": {
									"entryPoint": 1706,
									"id": 680,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@setPrice_85": {
									"entryPoint": 1678,
									"id": 85,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@supportsInterface_1898": {
									"entryPoint": null,
									"id": 1898,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@supportsInterface_527": {
									"entryPoint": 756,
									"id": 527,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@symbol_586": {
									"entryPoint": 1691,
									"id": 586,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@toString_1688": {
									"entryPoint": 2886,
									"id": 1688,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@tokenURI_622": {
									"entryPoint": 1740,
									"id": 622,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"@transferFrom_743": {
									"entryPoint": 1034,
									"id": 743,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@transferOwnership_268": {
									"entryPoint": 1936,
									"id": 268,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_address": {
									"entryPoint": 3871,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 3995,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_address": {
									"entryPoint": 4389,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 3938,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr": {
									"entryPoint": 4176,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 4
								},
								"abi_decode_tuple_t_addresst_bool": {
									"entryPoint": 4099,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_addresst_uint256": {
									"entryPoint": 3898,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_decode_tuple_t_bytes4": {
									"entryPoint": 3726,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_bytes4_fromMemory": {
									"entryPoint": 4600,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 3848,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_string": {
									"entryPoint": 3787,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 4494,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed": {
									"entryPoint": 4540,
									"id": null,
									"parameterSlots": 5,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 4,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": 3830,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_struct$_tokenData_$141_memory_ptr__to_t_struct$_tokenData_$141_memory_ptr__fromStack_reversed": {
									"entryPoint": 4020,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"copy_memory_to_memory_with_cleanup": {
									"entryPoint": 3753,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"extract_byte_array_length": {
									"entryPoint": 4438,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x12": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x41": {
									"entryPoint": 4156,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_bytes4": {
									"entryPoint": 3705,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:7795:13",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:13",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "58:87:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "123:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "132:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "135:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "125:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "125:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "125:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "81:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "92:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "103:3:13",
																								"type": "",
																								"value": "224"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "108:10:13",
																								"type": "",
																								"value": "0xffffffff"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "99:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "99:20:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "88:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "88:32:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "78:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "78:43:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "71:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "71:51:13"
															},
															"nodeType": "YulIf",
															"src": "68:71:13"
														}
													]
												},
												"name": "validator_revert_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "47:5:13",
														"type": ""
													}
												],
												"src": "14:131:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "219:176:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "265:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "274:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "277:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "267:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "267:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "267:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "240:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "249:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "236:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "236:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "261:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "232:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "232:32:13"
															},
															"nodeType": "YulIf",
															"src": "229:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "290:36:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "316:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "303:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "303:23:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "294:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "359:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "335:23:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "335:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "335:30:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "374:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "384:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "374:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "185:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "196:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "208:6:13",
														"type": ""
													}
												],
												"src": "150:245:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "495:92:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "505:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "517:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "528:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "513:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "513:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "505:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "547:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "572:6:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "565:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "565:14:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "558:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "558:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "540:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "540:41:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "540:41:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "464:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "475:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "486:4:13",
														"type": ""
													}
												],
												"src": "400:187:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "658:184:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "668:10:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "677:1:13",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "672:1:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "737:63:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "dst",
																							"nodeType": "YulIdentifier",
																							"src": "762:3:13"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "767:1:13"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "758:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "758:11:13"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"name": "src",
																									"nodeType": "YulIdentifier",
																									"src": "781:3:13"
																								},
																								{
																									"name": "i",
																									"nodeType": "YulIdentifier",
																									"src": "786:1:13"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "777:3:13"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "777:11:13"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "771:5:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "771:18:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "751:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "751:39:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "751:39:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "698:1:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "701:6:13"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "695:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "695:13:13"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "709:19:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "711:15:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "720:1:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "723:2:13",
																					"type": "",
																					"value": "32"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "716:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "716:10:13"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "711:1:13"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "691:3:13",
																"statements": []
															},
															"src": "687:113:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dst",
																				"nodeType": "YulIdentifier",
																				"src": "820:3:13"
																			},
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "825:6:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "816:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "816:16:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "834:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "809:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "809:27:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "809:27:13"
														}
													]
												},
												"name": "copy_memory_to_memory_with_cleanup",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "src",
														"nodeType": "YulTypedName",
														"src": "636:3:13",
														"type": ""
													},
													{
														"name": "dst",
														"nodeType": "YulTypedName",
														"src": "641:3:13",
														"type": ""
													},
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "646:6:13",
														"type": ""
													}
												],
												"src": "592:250:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "897:221:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "907:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "927:5:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "921:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "921:12:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "911:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "949:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "954:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "942:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "942:19:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "942:19:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1009:5:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1016:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1005:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1005:16:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1027:3:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1032:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1023:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1023:14:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "1039:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "970:34:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "970:76:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "970:76:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1055:57:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "1070:3:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "length",
																								"nodeType": "YulIdentifier",
																								"src": "1083:6:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1091:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "add",
																							"nodeType": "YulIdentifier",
																							"src": "1079:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1079:15:13"
																					},
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1100:2:13",
																								"type": "",
																								"value": "31"
																							}
																						],
																						"functionName": {
																							"name": "not",
																							"nodeType": "YulIdentifier",
																							"src": "1096:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1096:7:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1075:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1075:29:13"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1066:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1066:39:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1107:4:13",
																		"type": "",
																		"value": "0x20"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1062:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1062:50:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "1055:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_string",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "874:5:13",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "881:3:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "889:3:13",
														"type": ""
													}
												],
												"src": "847:271:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1244:99:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1261:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1272:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1254:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1254:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1254:21:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1284:53:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1310:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1322:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1333:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1318:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1318:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "1292:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1292:45:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1284:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1213:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1224:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1235:4:13",
														"type": ""
													}
												],
												"src": "1123:220:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1418:110:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1464:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1473:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1476:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1466:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1466:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1466:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1439:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1448:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1435:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1435:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1460:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1431:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1431:32:13"
															},
															"nodeType": "YulIf",
															"src": "1428:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1489:33:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1512:9:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1499:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1499:23:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1489:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1384:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1395:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1407:6:13",
														"type": ""
													}
												],
												"src": "1348:180:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1634:102:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1644:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1656:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1667:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1652:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1652:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1644:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1686:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1701:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1717:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1722:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1713:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1713:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1726:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1709:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1709:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1697:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1697:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1679:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1679:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1679:51:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1603:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1614:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1625:4:13",
														"type": ""
													}
												],
												"src": "1533:203:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1790:124:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1800:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "1822:6:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1809:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1809:20:13"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "1800:5:13"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1892:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1901:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1904:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1894:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1894:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1894:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1851:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1862:5:13"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1877:3:13",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1882:1:13",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1873:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1873:11:13"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1886:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1869:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1869:19:13"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1858:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1858:31:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1848:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1848:42:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1841:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "1841:50:13"
															},
															"nodeType": "YulIf",
															"src": "1838:70:13"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "1769:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1780:5:13",
														"type": ""
													}
												],
												"src": "1741:173:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2006:167:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2052:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2061:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2064:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2054:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2054:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2054:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2027:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2036:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2023:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2023:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2048:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2019:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2019:32:13"
															},
															"nodeType": "YulIf",
															"src": "2016:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2077:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2106:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2087:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2087:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2077:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2125:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2152:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2163:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2148:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2148:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2135:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2135:32:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2125:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1964:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1975:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1987:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1995:6:13",
														"type": ""
													}
												],
												"src": "1919:254:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2282:224:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2328:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2337:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2340:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2330:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2330:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2330:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2303:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2312:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2299:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2299:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2324:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2295:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2295:32:13"
															},
															"nodeType": "YulIf",
															"src": "2292:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2353:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2382:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2363:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2363:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2353:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2401:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2434:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2445:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2430:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2430:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2411:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2411:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "2401:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "2458:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2485:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2496:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2481:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2481:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "2468:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2468:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "2458:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2232:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2243:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2255:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "2263:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "2271:6:13",
														"type": ""
													}
												],
												"src": "2178:328:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2581:116:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2627:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2636:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2639:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2629:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2629:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2629:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "2602:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2611:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "2598:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2598:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2623:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "2594:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2594:32:13"
															},
															"nodeType": "YulIf",
															"src": "2591:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2652:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2681:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "2662:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2662:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "2652:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2547:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "2558:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2570:6:13",
														"type": ""
													}
												],
												"src": "2511:186:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2803:76:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2813:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2825:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2836:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2821:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2821:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2813:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2855:9:13"
																	},
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "2866:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2848:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "2848:25:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2848:25:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2772:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2783:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2794:4:13",
														"type": ""
													}
												],
												"src": "2702:177:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3037:439:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3054:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3065:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3047:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3047:21:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3047:21:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3088:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3099:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3084:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3084:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3114:6:13"
																					}
																				],
																				"functionName": {
																					"name": "mload",
																					"nodeType": "YulIdentifier",
																					"src": "3108:5:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3108:13:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3131:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "3136:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "3127:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3127:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3140:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "3123:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3123:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "3104:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3104:39:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3077:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3077:67:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3077:67:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3153:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "3183:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3191:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3179:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3179:15:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "3173:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3173:22:13"
															},
															"variables": [
																{
																	"name": "memberValue0",
																	"nodeType": "YulTypedName",
																	"src": "3157:12:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3215:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3226:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3211:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3211:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3231:4:13",
																		"type": "",
																		"value": "0x80"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3204:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3204:32:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3204:32:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3245:66:13",
															"value": {
																"arguments": [
																	{
																		"name": "memberValue0",
																		"nodeType": "YulIdentifier",
																		"src": "3277:12:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3295:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3306:3:13",
																				"type": "",
																				"value": "160"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3291:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3291:19:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "3259:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3259:52:13"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "3249:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3331:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3342:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3327:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3327:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "value0",
																						"nodeType": "YulIdentifier",
																						"src": "3357:6:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "3365:2:13",
																						"type": "",
																						"value": "64"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "3353:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3353:15:13"
																			}
																		],
																		"functionName": {
																			"name": "mload",
																			"nodeType": "YulIdentifier",
																			"src": "3347:5:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3347:22:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3320:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3320:50:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3320:50:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3390:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3401:4:13",
																				"type": "",
																				"value": "0x80"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3386:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3386:20:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "value0",
																										"nodeType": "YulIdentifier",
																										"src": "3432:6:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "3440:2:13",
																										"type": "",
																										"value": "96"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "3428:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "3428:15:13"
																							}
																						],
																						"functionName": {
																							"name": "mload",
																							"nodeType": "YulIdentifier",
																							"src": "3422:5:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3422:22:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3415:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3415:30:13"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "3408:6:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3408:38:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3379:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3379:68:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3379:68:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3456:14:13",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "3464:6:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "3456:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_struct$_tokenData_$141_memory_ptr__to_t_struct$_tokenData_$141_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3006:9:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3017:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "3028:4:13",
														"type": ""
													}
												],
												"src": "2884:592:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3565:263:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3611:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3620:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3623:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3613:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3613:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3613:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "3586:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3595:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "3582:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3582:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3607:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "3578:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3578:32:13"
															},
															"nodeType": "YulIf",
															"src": "3575:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3636:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "3665:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "3646:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3646:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "3636:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "3684:45:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "3714:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3725:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "3710:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3710:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "3697:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3697:32:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "3688:5:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "3782:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3791:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "3794:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "3784:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "3784:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "3784:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "3751:5:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "3772:5:13"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "3765:6:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "3765:13:13"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "3758:6:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "3758:21:13"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "3748:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3748:32:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "3741:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3741:40:13"
															},
															"nodeType": "YulIf",
															"src": "3738:60:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "3807:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "3817:5:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "3807:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "3523:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "3534:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "3546:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "3554:6:13",
														"type": ""
													}
												],
												"src": "3481:347:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "3865:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3882:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3889:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "3894:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "3885:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "3885:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3875:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3875:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3875:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3922:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3925:4:13",
																		"type": "",
																		"value": "0x41"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "3915:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3915:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3915:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3946:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "3949:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "3939:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "3939:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "3939:15:13"
														}
													]
												},
												"name": "panic_error_0x41",
												"nodeType": "YulFunctionDefinition",
												"src": "3833:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "4095:1008:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4142:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4151:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4154:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4144:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4144:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4144:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4116:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4125:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4112:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4112:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4137:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "4108:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4108:33:13"
															},
															"nodeType": "YulIf",
															"src": "4105:53:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "4167:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4196:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4177:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4177:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "4167:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4215:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4248:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4259:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4244:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4244:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "4225:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4225:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "4215:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "4272:42:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4299:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4310:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4295:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4295:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4282:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4282:32:13"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "4272:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4323:46:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "4354:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4365:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4350:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4350:18:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4337:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4337:32:13"
															},
															"variables": [
																{
																	"name": "offset",
																	"nodeType": "YulTypedName",
																	"src": "4327:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4378:28:13",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "4388:18:13",
																"type": "",
																"value": "0xffffffffffffffff"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "4382:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4433:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4442:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4445:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4435:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4435:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4435:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4421:6:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4429:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4418:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4418:14:13"
															},
															"nodeType": "YulIf",
															"src": "4415:34:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4458:32:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "4472:9:13"
																	},
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "4483:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4468:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4468:22:13"
															},
															"variables": [
																{
																	"name": "_2",
																	"nodeType": "YulTypedName",
																	"src": "4462:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4538:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4547:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4550:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4540:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4540:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4540:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4517:2:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4521:4:13",
																						"type": "",
																						"value": "0x1f"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4513:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4513:13:13"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "4528:7:13"
																			}
																		],
																		"functionName": {
																			"name": "slt",
																			"nodeType": "YulIdentifier",
																			"src": "4509:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4509:27:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "4502:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4502:35:13"
															},
															"nodeType": "YulIf",
															"src": "4499:55:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4563:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "_2",
																		"nodeType": "YulIdentifier",
																		"src": "4586:2:13"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "4573:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4573:16:13"
															},
															"variables": [
																{
																	"name": "_3",
																	"nodeType": "YulTypedName",
																	"src": "4567:2:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4612:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4614:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4614:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4614:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4604:2:13"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "4608:2:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4601:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4601:10:13"
															},
															"nodeType": "YulIf",
															"src": "4598:36:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4643:17:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4657:2:13",
																		"type": "",
																		"value": "31"
																	}
																],
																"functionName": {
																	"name": "not",
																	"nodeType": "YulIdentifier",
																	"src": "4653:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4653:7:13"
															},
															"variables": [
																{
																	"name": "_4",
																	"nodeType": "YulTypedName",
																	"src": "4647:2:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4669:23:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4689:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "4683:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4683:9:13"
															},
															"variables": [
																{
																	"name": "memPtr",
																	"nodeType": "YulTypedName",
																	"src": "4673:6:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "4701:71:13",
															"value": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4723:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"name": "_3",
																										"nodeType": "YulIdentifier",
																										"src": "4747:2:13"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "4751:4:13",
																										"type": "",
																										"value": "0x1f"
																									}
																								],
																								"functionName": {
																									"name": "add",
																									"nodeType": "YulIdentifier",
																									"src": "4743:3:13"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "4743:13:13"
																							},
																							{
																								"name": "_4",
																								"nodeType": "YulIdentifier",
																								"src": "4758:2:13"
																							}
																						],
																						"functionName": {
																							"name": "and",
																							"nodeType": "YulIdentifier",
																							"src": "4739:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "4739:22:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4763:2:13",
																						"type": "",
																						"value": "63"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4735:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4735:31:13"
																			},
																			{
																				"name": "_4",
																				"nodeType": "YulIdentifier",
																				"src": "4768:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "4731:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4731:40:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "4719:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4719:53:13"
															},
															"variables": [
																{
																	"name": "newFreePtr",
																	"nodeType": "YulTypedName",
																	"src": "4705:10:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4831:22:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x41",
																				"nodeType": "YulIdentifier",
																				"src": "4833:16:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4833:18:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4833:18:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4790:10:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "4802:2:13"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "4787:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4787:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "newFreePtr",
																				"nodeType": "YulIdentifier",
																				"src": "4810:10:13"
																			},
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4822:6:13"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "4807:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4807:22:13"
																	}
																],
																"functionName": {
																	"name": "or",
																	"nodeType": "YulIdentifier",
																	"src": "4784:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4784:46:13"
															},
															"nodeType": "YulIf",
															"src": "4781:72:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "4869:2:13",
																		"type": "",
																		"value": "64"
																	},
																	{
																		"name": "newFreePtr",
																		"nodeType": "YulIdentifier",
																		"src": "4873:10:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4862:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4862:22:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4862:22:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "memPtr",
																		"nodeType": "YulIdentifier",
																		"src": "4900:6:13"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "4908:2:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "4893:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4893:18:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4893:18:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "4957:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4966:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "4969:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "4959:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "4959:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "4959:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "_2",
																						"nodeType": "YulIdentifier",
																						"src": "4934:2:13"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "4938:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "4930:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4930:11:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "4943:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4926:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4926:20:13"
																	},
																	{
																		"name": "dataEnd",
																		"nodeType": "YulIdentifier",
																		"src": "4948:7:13"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "4923:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4923:33:13"
															},
															"nodeType": "YulIf",
															"src": "4920:53:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "memPtr",
																				"nodeType": "YulIdentifier",
																				"src": "4999:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5007:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "4995:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4995:15:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "_2",
																				"nodeType": "YulIdentifier",
																				"src": "5016:2:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5020:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5012:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5012:11:13"
																	},
																	{
																		"name": "_3",
																		"nodeType": "YulIdentifier",
																		"src": "5025:2:13"
																	}
																],
																"functionName": {
																	"name": "calldatacopy",
																	"nodeType": "YulIdentifier",
																	"src": "4982:12:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "4982:46:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "4982:46:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "memPtr",
																						"nodeType": "YulIdentifier",
																						"src": "5052:6:13"
																					},
																					{
																						"name": "_3",
																						"nodeType": "YulIdentifier",
																						"src": "5060:2:13"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "5048:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5048:15:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5065:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5044:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5044:24:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5070:1:13",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5037:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5037:35:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5037:35:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5081:16:13",
															"value": {
																"name": "memPtr",
																"nodeType": "YulIdentifier",
																"src": "5091:6:13"
															},
															"variableNames": [
																{
																	"name": "value3",
																	"nodeType": "YulIdentifier",
																	"src": "5081:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "4037:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "4048:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "4060:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "4068:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "4076:6:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "4084:6:13",
														"type": ""
													}
												],
												"src": "3965:1138:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5195:173:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5241:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5250:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5253:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5243:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5243:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5243:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "5216:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5225:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5212:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5212:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5237:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "5208:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5208:32:13"
															},
															"nodeType": "YulIf",
															"src": "5205:52:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "5266:39:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5295:9:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5276:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5276:29:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "5266:6:13"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "5314:48:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "5347:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5358:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "5343:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5343:18:13"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "5324:18:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5324:38:13"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "5314:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5153:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "5164:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5176:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5184:6:13",
														"type": ""
													}
												],
												"src": "5108:260:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5428:325:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5438:22:13",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5452:1:13",
																		"type": "",
																		"value": "1"
																	},
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5455:4:13"
																	}
																],
																"functionName": {
																	"name": "shr",
																	"nodeType": "YulIdentifier",
																	"src": "5448:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5448:12:13"
															},
															"variableNames": [
																{
																	"name": "length",
																	"nodeType": "YulIdentifier",
																	"src": "5438:6:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5469:38:13",
															"value": {
																"arguments": [
																	{
																		"name": "data",
																		"nodeType": "YulIdentifier",
																		"src": "5499:4:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5505:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "5495:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5495:12:13"
															},
															"variables": [
																{
																	"name": "outOfPlaceEncoding",
																	"nodeType": "YulTypedName",
																	"src": "5473:18:13",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5546:31:13",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "5548:27:13",
																		"value": {
																			"arguments": [
																				{
																					"name": "length",
																					"nodeType": "YulIdentifier",
																					"src": "5562:6:13"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5570:4:13",
																					"type": "",
																					"value": "0x7f"
																				}
																			],
																			"functionName": {
																				"name": "and",
																				"nodeType": "YulIdentifier",
																				"src": "5558:3:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5558:17:13"
																		},
																		"variableNames": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5548:6:13"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5526:18:13"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "5519:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5519:26:13"
															},
															"nodeType": "YulIf",
															"src": "5516:61:13"
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "5636:111:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5657:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5664:3:13",
																							"type": "",
																							"value": "224"
																						},
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "5669:10:13",
																							"type": "",
																							"value": "0x4e487b71"
																						}
																					],
																					"functionName": {
																						"name": "shl",
																						"nodeType": "YulIdentifier",
																						"src": "5660:3:13"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "5660:20:13"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5650:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5650:31:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5650:31:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5701:1:13",
																					"type": "",
																					"value": "4"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5704:4:13",
																					"type": "",
																					"value": "0x22"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "5694:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5694:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5694:15:13"
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5729:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "5732:4:13",
																					"type": "",
																					"value": "0x24"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "5722:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "5722:15:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "5722:15:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "outOfPlaceEncoding",
																		"nodeType": "YulIdentifier",
																		"src": "5592:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "length",
																				"nodeType": "YulIdentifier",
																				"src": "5615:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5623:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "lt",
																			"nodeType": "YulIdentifier",
																			"src": "5612:2:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5612:14:13"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "5589:2:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5589:38:13"
															},
															"nodeType": "YulIf",
															"src": "5586:161:13"
														}
													]
												},
												"name": "extract_byte_array_length",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "data",
														"nodeType": "YulTypedName",
														"src": "5408:4:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "length",
														"nodeType": "YulTypedName",
														"src": "5417:6:13",
														"type": ""
													}
												],
												"src": "5373:380:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "5915:218:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "5925:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "5937:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5948:2:13",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "5933:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5933:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "5925:4:13"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "5960:29:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5978:3:13",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "5983:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "5974:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5974:11:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "5987:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "5970:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5970:19:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "5964:2:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6005:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6020:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6028:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6016:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6016:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "5998:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "5998:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "5998:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6052:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6063:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6048:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6048:18:13"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6068:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6041:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6041:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6041:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6095:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6106:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6091:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6091:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value2",
																				"nodeType": "YulIdentifier",
																				"src": "6115:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6123:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6111:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6111:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6084:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6084:43:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6084:43:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "5868:9:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "5879:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "5887:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "5895:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "5906:4:13",
														"type": ""
													}
												],
												"src": "5758:375:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6325:309:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6335:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "6355:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6349:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6349:13:13"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "6339:6:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6410:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6418:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6406:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6406:17:13"
																	},
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6425:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6430:6:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "6371:34:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6371:66:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6371:66:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6446:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "6463:3:13"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "6468:6:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6459:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6459:16:13"
															},
															"variables": [
																{
																	"name": "end_1",
																	"nodeType": "YulTypedName",
																	"src": "6450:5:13",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6484:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "6506:6:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "6500:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6500:13:13"
															},
															"variables": [
																{
																	"name": "length_1",
																	"nodeType": "YulTypedName",
																	"src": "6488:8:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6561:6:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6569:4:13",
																				"type": "",
																				"value": "0x20"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6557:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6557:17:13"
																	},
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "6576:5:13"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "6583:8:13"
																	}
																],
																"functionName": {
																	"name": "copy_memory_to_memory_with_cleanup",
																	"nodeType": "YulIdentifier",
																	"src": "6522:34:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6522:70:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6522:70:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "6601:27:13",
															"value": {
																"arguments": [
																	{
																		"name": "end_1",
																		"nodeType": "YulIdentifier",
																		"src": "6612:5:13"
																	},
																	{
																		"name": "length_1",
																		"nodeType": "YulIdentifier",
																		"src": "6619:8:13"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "6608:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6608:20:13"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "6601:3:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "6293:3:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6298:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6306:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "6317:3:13",
														"type": ""
													}
												],
												"src": "6138:496:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "6842:286:13",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "6852:29:13",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6870:3:13",
																				"type": "",
																				"value": "160"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6875:1:13",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "6866:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6866:11:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "6879:1:13",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "6862:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6862:19:13"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "6856:2:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "6897:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "6912:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6920:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6908:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6908:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6890:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6890:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6890:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6944:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6955:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6940:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6940:18:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value1",
																				"nodeType": "YulIdentifier",
																				"src": "6964:6:13"
																			},
																			{
																				"name": "_1",
																				"nodeType": "YulIdentifier",
																				"src": "6972:2:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "6960:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6960:15:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6933:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6933:43:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6933:43:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "6996:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7007:2:13",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6992:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6992:18:13"
																	},
																	{
																		"name": "value2",
																		"nodeType": "YulIdentifier",
																		"src": "7012:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "6985:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "6985:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "6985:34:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7039:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7050:2:13",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7035:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7035:18:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7055:3:13",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7028:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7028:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7028:31:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7068:54:13",
															"value": {
																"arguments": [
																	{
																		"name": "value3",
																		"nodeType": "YulIdentifier",
																		"src": "7094:6:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7106:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7117:3:13",
																				"type": "",
																				"value": "128"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7102:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7102:19:13"
																	}
																],
																"functionName": {
																	"name": "abi_encode_string",
																	"nodeType": "YulIdentifier",
																	"src": "7076:17:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7076:46:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7068:4:13"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "6787:9:13",
														"type": ""
													},
													{
														"name": "value3",
														"nodeType": "YulTypedName",
														"src": "6798:6:13",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "6806:6:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "6814:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "6822:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "6833:4:13",
														"type": ""
													}
												],
												"src": "6639:489:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7213:169:13",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "7259:16:13",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7268:1:13",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "7271:1:13",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "7261:6:13"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "7261:12:13"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "7261:12:13"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "7234:7:13"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7243:9:13"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "7230:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7230:23:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7255:2:13",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "7226:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7226:32:13"
															},
															"nodeType": "YulIf",
															"src": "7223:52:13"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "7284:29:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7303:9:13"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "7297:5:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7297:16:13"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "7288:5:13",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "7346:5:13"
																	}
																],
																"functionName": {
																	"name": "validator_revert_bytes4",
																	"nodeType": "YulIdentifier",
																	"src": "7322:23:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7322:30:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7322:30:13"
														},
														{
															"nodeType": "YulAssignment",
															"src": "7361:15:13",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "7371:5:13"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "7361:6:13"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bytes4_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7179:9:13",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "7190:7:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7202:6:13",
														"type": ""
													}
												],
												"src": "7133:249:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7419:95:13",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7436:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7443:3:13",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7448:10:13",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "7439:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7439:20:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7429:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7429:31:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7429:31:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7476:1:13",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7479:4:13",
																		"type": "",
																		"value": "0x12"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7469:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7469:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7469:15:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7500:1:13",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7503:4:13",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "7493:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7493:15:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7493:15:13"
														}
													]
												},
												"name": "panic_error_0x12",
												"nodeType": "YulFunctionDefinition",
												"src": "7387:127:13"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "7648:145:13",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "7658:26:13",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7670:9:13"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "7681:2:13",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "7666:3:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7666:18:13"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "7658:4:13"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "7700:9:13"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "7715:6:13"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7731:3:13",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "7736:1:13",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "7727:3:13"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "7727:11:13"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "7740:1:13",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "7723:3:13"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "7723:19:13"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "7711:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7711:32:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7693:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7693:51:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7693:51:13"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "7764:9:13"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "7775:2:13",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "7760:3:13"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "7760:18:13"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "7780:6:13"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "7753:6:13"
																},
																"nodeType": "YulFunctionCall",
																"src": "7753:34:13"
															},
															"nodeType": "YulExpressionStatement",
															"src": "7753:34:13"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "7609:9:13",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "7620:6:13",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "7628:6:13",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "7639:4:13",
														"type": ""
													}
												],
												"src": "7519:274:13"
											}
										]
									},
									"contents": "{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, shl(224, 0xffffffff)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), not(31))), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_struct$_tokenData_$141_memory_ptr__to_t_struct$_tokenData_$141_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), and(mload(value0), sub(shl(160, 1), 1)))\n        let memberValue0 := mload(add(value0, 32))\n        mstore(add(headStart, 64), 0x80)\n        let tail_1 := abi_encode_string(memberValue0, add(headStart, 160))\n        mstore(add(headStart, 96), mload(add(value0, 64)))\n        mstore(add(headStart, 0x80), iszero(iszero(mload(add(value0, 96)))))\n        tail := tail_1\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        let value := calldataload(add(headStart, 32))\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value1 := value\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_memory_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := calldataload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        calldatacopy(add(memPtr, 32), add(_2, 32), _3)\n        mstore(add(add(memPtr, _3), 32), 0)\n        value3 := memPtr\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_address__to_t_address_t_uint256_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_packed_t_string_memory_ptr_t_string_memory_ptr__to_t_string_memory_ptr_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        let end_1 := add(pos, length)\n        let length_1 := mload(value1)\n        copy_memory_to_memory_with_cleanup(add(value1, 0x20), end_1, length_1)\n        end := add(end_1, length_1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_memory_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        let _1 := sub(shl(160, 1), 1)\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        tail := abi_encode_string(value3, add(headStart, 128))\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function panic_error_0x12()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x12)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n}",
									"id": 13,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x148 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x854CBB4A GT PUSH2 0xBF JUMPI DUP1 PUSH4 0xA035B1FE GT PUSH2 0x79 JUMPI DUP1 PUSH4 0xA035B1FE EQ PUSH2 0x28C JUMPI DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x295 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x2A8 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x2BB JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x2CE JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x854CBB4A EQ PUSH2 0x23B JUMPI DUP1 PUSH4 0x8C2A5BC8 EQ PUSH2 0x250 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x258 JUMPI DUP1 PUSH4 0x91B7F5ED EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x98D5FDCA EQ PUSH2 0x284 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x42842E0E GT PUSH2 0x110 JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x1DC JUMPI DUP1 PUSH4 0x5987CC19 EQ PUSH2 0x1EF JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x1F7 JUMPI DUP1 PUSH4 0x64EDFBF0 EQ PUSH2 0x20A JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x212 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x233 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x14C JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1B4 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x1C9 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x15F PUSH2 0x15A CALLDATASIZE PUSH1 0x4 PUSH2 0xE8E JUMP JUMPDEST PUSH2 0x2F4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x17C PUSH2 0x345 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0xEF6 JUMP JUMPDEST PUSH2 0x19C PUSH2 0x197 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x3D4 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16B JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x1C2 CALLDATASIZE PUSH1 0x4 PUSH2 0xF3A JUMP JUMPDEST PUSH2 0x3FB JUMP JUMPDEST STOP JUMPDEST PUSH2 0x1C7 PUSH2 0x1D7 CALLDATASIZE PUSH1 0x4 PUSH2 0xF62 JUMP JUMPDEST PUSH2 0x40A JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x1EA CALLDATASIZE PUSH1 0x4 PUSH2 0xF62 JUMP JUMPDEST PUSH2 0x498 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x4B7 JUMP JUMPDEST PUSH2 0x19C PUSH2 0x205 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x4CE JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x4D8 JUMP JUMPDEST PUSH2 0x225 PUSH2 0x220 CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x51D JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x16B JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x562 JUMP JUMPDEST PUSH2 0x243 PUSH2 0x575 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x16B SWAP2 SWAP1 PUSH2 0xFB4 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x67A JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x19C JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x277 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x68E JUMP JUMPDEST PUSH2 0x17C PUSH2 0x69B JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x225 JUMP JUMPDEST PUSH2 0x225 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x2A3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1003 JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x2B6 CALLDATASIZE PUSH1 0x4 PUSH2 0x1050 JUMP JUMPDEST PUSH2 0x6B5 JUMP JUMPDEST PUSH2 0x17C PUSH2 0x2C9 CALLDATASIZE PUSH1 0x4 PUSH2 0xF08 JUMP JUMPDEST PUSH2 0x6CC JUMP JUMPDEST PUSH2 0x15F PUSH2 0x2DC CALLDATASIZE PUSH1 0x4 PUSH2 0x1125 JUMP JUMPDEST PUSH2 0x763 JUMP JUMPDEST PUSH2 0x1C7 PUSH2 0x2EF CALLDATASIZE PUSH1 0x4 PUSH2 0xF9B JUMP JUMPDEST PUSH2 0x790 JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x80AC58CD PUSH1 0xE0 SHL EQ DUP1 PUSH2 0x324 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP3 AND PUSH4 0x5B5E139F PUSH1 0xE0 SHL EQ JUMPDEST DUP1 PUSH2 0x33F JUMPI POP PUSH4 0x1FFC9A7 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND EQ JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 DUP1 SLOAD PUSH2 0x353 SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x37F SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x3CA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x3A1 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x3CA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x3AD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0x3DE DUP3 PUSH2 0x7CD JUMP JUMPDEST POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x33F JUMP JUMPDEST PUSH2 0x406 DUP3 DUP3 CALLER PUSH2 0x805 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x438 JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 PUSH2 0x444 DUP4 DUP4 CALLER PUSH2 0x812 JUMP JUMPDEST SWAP1 POP DUP4 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH4 0x64283D7B PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x42F JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x4B2 DUP4 DUP4 DUP4 PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x6B5 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x4BF PUSH2 0x904 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE JUMP JUMPDEST PUSH0 PUSH2 0x33F DUP3 PUSH2 0x7CD JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x40 MLOAD CALLER SWAP2 DUP1 ISZERO PUSH2 0x8FC MUL SWAP2 PUSH0 DUP2 DUP2 DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO DUP1 ISZERO PUSH2 0x503 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP PUSH2 0x50D CALLER PUSH2 0x790 JUMP JUMPDEST PUSH0 PUSH1 0x8 SSTORE PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x547 JUMPI PUSH1 0x40 MLOAD PUSH4 0x22718AD9 PUSH1 0xE2 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x56A PUSH2 0x904 JUMP JUMPDEST PUSH2 0x573 PUSH0 PUSH2 0x931 JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x5A8 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x60 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 DUP2 MSTORE PUSH1 0x20 ADD PUSH0 ISZERO ISZERO DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH2 0x5C5 PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x7 DUP1 SLOAD PUSH2 0x5E0 SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x60C SWAP1 PUSH2 0x1156 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x657 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x62E JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x657 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH0 MSTORE PUSH1 0x20 PUSH0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x63A JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP SWAP2 DUP4 MSTORE POP POP PUSH1 0x8 SLOAD PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x9 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH1 0x40 SWAP1 SWAP2 ADD MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH2 0x682 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0x696 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x8 SSTORE JUMP JUMPDEST PUSH1 0x60 PUSH1 0x1 DUP1 SLOAD PUSH2 0x353 SWAP1 PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x406 CALLER DUP4 DUP4 PUSH2 0x982 JUMP JUMPDEST PUSH2 0x6C0 DUP5 DUP5 DUP5 PUSH2 0x40A JUMP JUMPDEST PUSH2 0x492 DUP5 DUP5 DUP5 DUP5 PUSH2 0xA20 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x6D7 DUP3 PUSH2 0x7CD JUMP JUMPDEST POP PUSH0 PUSH2 0x713 PUSH1 0x40 DUP1 MLOAD DUP1 DUP3 ADD SWAP1 SWAP2 MSTORE PUSH1 0x18 DUP2 MSTORE PUSH32 0x697066733A2F2F7069656365546F6B656E426173655552490000000000000000 PUSH1 0x20 DUP3 ADD MSTORE SWAP1 JUMP JUMPDEST SWAP1 POP PUSH0 DUP2 MLOAD GT PUSH2 0x731 JUMPI PUSH1 0x40 MLOAD DUP1 PUSH1 0x20 ADD PUSH1 0x40 MSTORE DUP1 PUSH0 DUP2 MSTORE POP PUSH2 0x75C JUMP JUMPDEST DUP1 PUSH2 0x73B DUP5 PUSH2 0xB46 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x74C SWAP3 SWAP2 SWAP1 PUSH2 0x118E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP2 DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH2 0x798 PUSH2 0x904 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x7C1 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH2 0x7CA DUP2 PUSH2 0x931 JUMP JUMPDEST POP JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP1 PUSH2 0x33F JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH2 0x4B2 DUP4 DUP4 DUP4 PUSH1 0x1 PUSH2 0xBD6 JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND SWAP1 DUP4 AND ISZERO PUSH2 0x83E JUMPI PUSH2 0x83E DUP2 DUP5 DUP7 PUSH2 0xCDA JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x878 JUMPI PUSH2 0x859 PUSH0 DUP6 PUSH0 DUP1 PUSH2 0xBD6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH0 NOT ADD SWAP1 SSTORE JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND ISZERO PUSH2 0x8A6 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x3 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH0 DUP5 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP10 DUP2 AND SWAP2 DUP3 OR SWAP1 SWAP3 SSTORE SWAP2 MLOAD DUP8 SWAP4 SWAP2 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x573 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP4 AND DUP2 OR SWAP1 SWAP4 SSTORE PUSH1 0x40 MLOAD SWAP2 AND SWAP2 SWAP1 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH2 0x9B4 JUMPI PUSH1 0x40 MLOAD PUSH4 0xB611743 PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 DUP2 AND PUSH0 DUP2 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP8 AND DUP1 DUP5 MSTORE SWAP5 DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP7 ISZERO ISZERO SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE PUSH32 0x17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND EXTCODESIZE ISZERO PUSH2 0x492 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA85BD01 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0xA62 SWAP1 CALLER SWAP1 DUP9 SWAP1 DUP8 SWAP1 DUP8 SWAP1 PUSH1 0x4 ADD PUSH2 0x11BC JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL SWAP3 POP POP POP DUP1 ISZERO PUSH2 0xA9C JUMPI POP PUSH1 0x40 DUP1 MLOAD PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH1 0x1F NOT AND DUP3 ADD SWAP1 SWAP3 MSTORE PUSH2 0xA99 SWAP2 DUP2 ADD SWAP1 PUSH2 0x11F8 JUMP JUMPDEST PUSH1 0x1 JUMPDEST PUSH2 0xB03 JUMPI RETURNDATASIZE DUP1 DUP1 ISZERO PUSH2 0xAC9 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0xACE JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP DUP1 MLOAD PUSH0 SUB PUSH2 0xAFB JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST DUP1 MLOAD DUP2 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND PUSH4 0xA85BD01 PUSH1 0xE1 SHL EQ PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH4 0x32505749 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH0 PUSH2 0xB52 DUP4 PUSH2 0xD3E JUMP JUMPDEST PUSH1 0x1 ADD SWAP1 POP PUSH0 DUP2 PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB71 JUMPI PUSH2 0xB71 PUSH2 0x103C JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP1 DUP3 MSTORE DUP1 PUSH1 0x1F ADD PUSH1 0x1F NOT AND PUSH1 0x20 ADD DUP3 ADD PUSH1 0x40 MSTORE DUP1 ISZERO PUSH2 0xB9B JUMPI PUSH1 0x20 DUP3 ADD DUP2 DUP1 CALLDATASIZE DUP4 CALLDATACOPY ADD SWAP1 POP JUMPDEST POP SWAP1 POP DUP2 DUP2 ADD PUSH1 0x20 ADD JUMPDEST PUSH0 NOT ADD PUSH16 0x181899199A1A9B1B9C1CB0B131B232B3 PUSH1 0x81 SHL PUSH1 0xA DUP7 MOD BYTE DUP2 MSTORE8 PUSH1 0xA DUP6 DIV SWAP5 POP DUP5 PUSH2 0xBA5 JUMPI POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP1 DUP1 PUSH2 0xBEA JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND ISZERO ISZERO JUMPDEST ISZERO PUSH2 0xCAB JUMPI PUSH0 PUSH2 0xBF9 DUP5 PUSH2 0x7CD JUMP JUMPDEST SWAP1 POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xC25 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ ISZERO JUMPDEST DUP1 ISZERO PUSH2 0xC38 JUMPI POP PUSH2 0xC36 DUP2 DUP5 PUSH2 0x763 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0xC61 JUMPI PUSH1 0x40 MLOAD PUSH4 0xA9FBF51F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST DUP2 ISZERO PUSH2 0xCA9 JUMPI DUP4 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 JUMPDEST POP JUMPDEST POP POP PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xCE5 DUP4 DUP4 DUP4 PUSH2 0xE15 JUMP JUMPDEST PUSH2 0x4B2 JUMPI PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH2 0xD13 JUMPI PUSH1 0x40 MLOAD PUSH4 0x7E273289 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x42F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH4 0x177E802F PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x42F JUMP JUMPDEST PUSH0 DUP1 PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 LT PUSH2 0xD7C JUMPI PUSH19 0x184F03E93FF9F4DAA797ED6E38ED64BF6A1F01 PUSH1 0x40 SHL DUP4 DIV SWAP3 POP PUSH1 0x40 ADD JUMPDEST PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 LT PUSH2 0xDA8 JUMPI PUSH14 0x4EE2D6D415B85ACEF8100000000 DUP4 DIV SWAP3 POP PUSH1 0x20 ADD JUMPDEST PUSH7 0x2386F26FC10000 DUP4 LT PUSH2 0xDC6 JUMPI PUSH7 0x2386F26FC10000 DUP4 DIV SWAP3 POP PUSH1 0x10 ADD JUMPDEST PUSH4 0x5F5E100 DUP4 LT PUSH2 0xDDE JUMPI PUSH4 0x5F5E100 DUP4 DIV SWAP3 POP PUSH1 0x8 ADD JUMPDEST PUSH2 0x2710 DUP4 LT PUSH2 0xDF2 JUMPI PUSH2 0x2710 DUP4 DIV SWAP3 POP PUSH1 0x4 ADD JUMPDEST PUSH1 0x64 DUP4 LT PUSH2 0xE04 JUMPI PUSH1 0x64 DUP4 DIV SWAP3 POP PUSH1 0x2 ADD JUMPDEST PUSH1 0xA DUP4 LT PUSH2 0x33F JUMPI PUSH1 0x1 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND ISZERO DUP1 ISZERO SWAP1 PUSH2 0xE71 JUMPI POP DUP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ DUP1 PUSH2 0xE4E JUMPI POP PUSH2 0xE4E DUP5 DUP5 PUSH2 0x763 JUMP JUMPDEST DUP1 PUSH2 0xE71 JUMPI POP PUSH0 DUP3 DUP2 MSTORE PUSH1 0x4 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 AND EQ JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP2 AND DUP2 EQ PUSH2 0x7CA JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xE9E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x75C DUP2 PUSH2 0xE79 JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0xEC3 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0xEAB JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0xEE2 DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0xEA9 JUMP JUMPDEST PUSH1 0x1F ADD PUSH1 0x1F NOT AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 PUSH2 0x75C PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0xECB JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xF18 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xF35 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF4B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF54 DUP4 PUSH2 0xF1F JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0xF74 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0xF7D DUP5 PUSH2 0xF1F JUMP JUMPDEST SWAP3 POP PUSH2 0xF8B PUSH1 0x20 DUP6 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xFAB JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x75C DUP3 PUSH2 0xF1F JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP3 DUP3 ADD MSTORE DUP3 ADD MLOAD PUSH1 0x80 PUSH1 0x40 DUP4 ADD MSTORE PUSH0 SWAP1 PUSH2 0xFE1 PUSH1 0xA0 DUP5 ADD DUP3 PUSH2 0xECB JUMP JUMPDEST SWAP1 POP PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP5 ADD MSTORE PUSH1 0x60 DUP5 ADD MLOAD ISZERO ISZERO PUSH1 0x80 DUP5 ADD MSTORE DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1014 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x101D DUP4 PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x1031 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1063 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x106C DUP6 PUSH2 0xF1F JUMP JUMPDEST SWAP4 POP PUSH2 0x107A PUSH1 0x20 DUP7 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD SWAP2 POP PUSH1 0x60 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x109D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP8 ADD SWAP2 POP DUP8 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x10B0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x10C2 JUMPI PUSH2 0x10C2 PUSH2 0x103C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x10EA JUMPI PUSH2 0x10EA PUSH2 0x103C JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP11 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x1102 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP4 ADD CALLDATACOPY PUSH0 PUSH1 0x20 DUP5 DUP4 ADD ADD MSTORE DUP1 SWAP6 POP POP POP POP POP POP SWAP3 SWAP6 SWAP2 SWAP5 POP SWAP3 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1136 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x113F DUP4 PUSH2 0xF1F JUMP JUMPDEST SWAP2 POP PUSH2 0x114D PUSH1 0x20 DUP5 ADD PUSH2 0xF1F JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x116A JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x1188 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP4 MLOAD PUSH2 0x119F DUP2 DUP5 PUSH1 0x20 DUP9 ADD PUSH2 0xEA9 JUMP JUMPDEST DUP4 MLOAD SWAP1 DUP4 ADD SWAP1 PUSH2 0x11B3 DUP2 DUP4 PUSH1 0x20 DUP9 ADD PUSH2 0xEA9 JUMP JUMPDEST ADD SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 DUP2 AND DUP3 MSTORE DUP5 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH0 SWAP1 PUSH2 0x11EE SWAP1 DUP4 ADD DUP5 PUSH2 0xECB JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1208 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x75C DUP2 PUSH2 0xE79 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SHR DUP13 OR 0x4E PUSH29 0x88DFB119F5FD3F9A49E9567E0AC31A44600C86AF58E4027C3228846473 PUSH16 0x6C634300081400330000000000000000 ",
							"sourceMap": "196:1115:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1607:305:3;;;;;;:::i;:::-;;:::i;:::-;;;565:14:13;;558:22;540:41;;528:2;513:18;1607:305:3;;;;;;;;2438:91;;;:::i;:::-;;;;;;;:::i;3610:158::-;;;;;;:::i;:::-;;:::i;:::-;;;-1:-1:-1;;;;;1697:32:13;;;1679:51;;1667:2;1652:18;3610:158:3;1533:203:13;3429:115:3;;;;;;:::i;:::-;;:::i;:::-;;4279:588;;;;;;:::i;:::-;;:::i;4938:134::-;;;;;;:::i;:::-;;:::i;980:70:0:-;;;:::i;2251:120:3:-;;;;;;:::i;:::-;;:::i;1140:166:0:-;;;:::i;1976:213:3:-;;;;;;:::i;:::-;;:::i;:::-;;;2848:25:13;;;2836:2;2821:18;1976:213:3;2702:177:13;2368:103:1;;;:::i;647:145:0:-;;;:::i;:::-;;;;;;;:::i;1058:74::-;;;:::i;1693:87:1:-;1766:6;;-1:-1:-1;;;;;1766:6:1;1693:87;;888:84:0;;;;;;:::i;:::-;;:::i;2598:95:3:-;;;:::i;800:80:0:-;867:5;;800:80;;265:20;;;;;;3840:146:3;;;;;;:::i;:::-;;:::i;5143:211::-;;;;;;:::i;:::-;;:::i;2764:260::-;;;;;;:::i;:::-;;:::i;4057:155::-;;;;;;:::i;:::-;;:::i;2626:220:1:-;;;;;;:::i;:::-;;:::i;1607:305:3:-;1709:4;-1:-1:-1;;;;;;1746:40:3;;-1:-1:-1;;;1746:40:3;;:105;;-1:-1:-1;;;;;;;1803:48:3;;-1:-1:-1;;;1803:48:3;1746:105;:158;;;-1:-1:-1;;;;;;;;;;885:40:9;;;1868:36:3;1726:178;1607:305;-1:-1:-1;;1607:305:3:o;2438:91::-;2483:13;2516:5;2509:12;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2438:91;:::o;3610:158::-;3677:7;3697:22;3711:7;3697:13;:22::i;:::-;-1:-1:-1;6186:7:3;6213:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6213:24:3;3739:21;6116:129;3429:115;3501:35;3510:2;3514:7;752:10:7;3501:8:3;:35::i;:::-;3429:115;;:::o;4279:588::-;-1:-1:-1;;;;;4374:16:3;;4370:89;;4414:33;;-1:-1:-1;;;4414:33:3;;4444:1;4414:33;;;1679:51:13;1652:18;;4414:33:3;;;;;;;;4370:89;4680:21;4704:34;4712:2;4716:7;752:10:7;4704:7:3;:34::i;:::-;4680:58;;4770:4;-1:-1:-1;;;;;4753:21:3;:13;-1:-1:-1;;;;;4753:21:3;;4749:111;;4798:50;;-1:-1:-1;;;4798:50:3;;-1:-1:-1;;;;;6016:15:13;;;4798:50:3;;;5998:34:13;6048:18;;;6041:34;;;6111:15;;6091:18;;;6084:43;5933:18;;4798:50:3;5758:375:13;4749:111:3;4359:508;4279:588;;;:::o;4938:134::-;5025:39;5042:4;5048:2;5052:7;5025:39;;;;;;;;;;;;:16;:39::i;:::-;4938:134;;;:::o;980:70:0:-;1579:13:1;:11;:13::i;:::-;1029:6:0::1;:13:::0;;-1:-1:-1;;1029:13:0::1;1038:4;1029:13;::::0;;980:70::o;2251:120:3:-;2314:7;2341:22;2355:7;2341:13;:22::i;1140:166:0:-;1207:5;;1178:35;;1186:10;;1178:35;;;;;;;;;1207:5;1186:10;1178:35;;;;;;;;;;;;;;;;;;;;;1224:29;1242:10;1224:17;:29::i;:::-;1272:1;1264:5;:9;1284:6;:14;;-1:-1:-1;;1284:14:0;;;1140:166::o;1976:213:3:-;2039:7;-1:-1:-1;;;;;2063:19:3;;2059:89;;2106:30;;-1:-1:-1;;;2106:30:3;;2133:1;2106:30;;;1679:51:13;1652:18;;2106:30:3;1533:203:13;2059:89:3;-1:-1:-1;;;;;;2165:16:3;;;;;:9;:16;;;;;;;1976:213::o;2368:103:1:-;1579:13;:11;:13::i;:::-;2433:30:::1;2460:1;2433:18;:30::i;:::-;2368:103::o:0;647:145:0:-;700:16;-1:-1:-1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;700:16:0;736:48;;;;;;;;746:15;1766:6:1;;-1:-1:-1;;;;;1766:6:1;;1693:87;746:15:0;-1:-1:-1;;;;;736:48:0;;;;;763:5;736:48;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;;736:48:0;;;-1:-1:-1;;770:5:0;;736:48;;;;777:6;;;;736:48;;;;;;;729:55;647:145;-1:-1:-1;647:145:0:o;1058:74::-;1579:13:1;:11;:13::i;:::-;1110:6:0::1;:14:::0;;-1:-1:-1;;1110:14:0::1;::::0;;1058:74::o;888:84::-;1579:13:1;:11;:13::i;:::-;950:5:0::1;:14:::0;888:84::o;2598:95:3:-;2645:13;2678:7;2671:14;;;;;:::i;3840:146::-;3926:52;752:10:7;3959:8:3;3969;3926:18;:52::i;5143:211::-;5257:31;5270:4;5276:2;5280:7;5257:12;:31::i;:::-;5299:47;5322:4;5328:2;5332:7;5341:4;5299:22;:47::i;2764:260::-;2828:13;2854:22;2868:7;2854:13;:22::i;:::-;;2889:21;2913:10;598:33:0;;;;;;;;;;;;;;;;;;520:119;2913:10:3;2889:34;;2965:1;2947:7;2941:21;:25;:75;;;;;;;;;;;;;;;;;2983:7;2992:18;:7;:16;:18::i;:::-;2969:42;;;;;;;;;:::i;:::-;;;;;;;;;;;;;2941:75;2934:82;2764:260;-1:-1:-1;;;2764:260:3:o;4057:155::-;-1:-1:-1;;;;;4169:25:3;;;4145:4;4169:25;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;;;4057:155::o;2626:220:1:-;1579:13;:11;:13::i;:::-;-1:-1:-1;;;;;2711:22:1;::::1;2707:93;;2757:31;::::0;-1:-1:-1;;;2757:31:1;;2785:1:::1;2757:31;::::0;::::1;1679:51:13::0;1652:18;;2757:31:1::1;1533:203:13::0;2707:93:1::1;2810:28;2829:8;2810:18;:28::i;:::-;2626:220:::0;:::o;16585:247:3:-;16648:7;5971:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5971:16:3;;16712:90;;16759:31;;-1:-1:-1;;;16759:31:3;;;;;2848:25:13;;;2821:18;;16759:31:3;2702:177:13;14817:122:3;14898:33;14907:2;14911:7;14920:4;14926;14898:8;:33::i;9078:824::-;9164:7;5971:16;;;:7;:16;;;;;;-1:-1:-1;;;;;5971:16:3;;;;9279:18;;;9275:88;;9314:37;9331:4;9337;9343:7;9314:16;:37::i;:::-;-1:-1:-1;;;;;9410:18:3;;;9406:263;;9528:48;9545:1;9549:7;9566:1;9570:5;9528:8;:48::i;:::-;-1:-1:-1;;;;;9622:15:3;;;;;;:9;:15;;;;;:20;;-1:-1:-1;;9622:20:3;;;9406:263;-1:-1:-1;;;;;9685:16:3;;;9681:111;;-1:-1:-1;;;;;9747:13:3;;;;;;:9;:13;;;;;:18;;9764:1;9747:18;;;9681:111;9804:16;;;;:7;:16;;;;;;:21;;-1:-1:-1;;;;;;9804:21:3;-1:-1:-1;;;;;9804:21:3;;;;;;;;;9843:27;;9804:16;;9843:27;;;;;;;9890:4;9078:824;-1:-1:-1;;;;9078:824:3:o;1858:166:1:-;1766:6;;-1:-1:-1;;;;;1766:6:1;752:10:7;1918:23:1;1914:103;;1965:40;;-1:-1:-1;;;1965:40:1;;752:10:7;1965:40:1;;;1679:51:13;1652:18;;1965:40:1;1533:203:13;3006:191:1;3099:6;;;-1:-1:-1;;;;;3116:17:1;;;-1:-1:-1;;;;;;3116:17:1;;;;;;;3149:40;;3099:6;;;3116:17;3099:6;;3149:40;;3080:16;;3149:40;3069:128;3006:191;:::o;16024:318:3:-;-1:-1:-1;;;;;16132:22:3;;16128:93;;16178:31;;-1:-1:-1;;;16178:31:3;;-1:-1:-1;;;;;1697:32:13;;16178:31:3;;;1679:51:13;1652:18;;16178:31:3;1533:203:13;16128:93:3;-1:-1:-1;;;;;16231:25:3;;;;;;;:18;:25;;;;;;;;:35;;;;;;;;;;;;;:46;;-1:-1:-1;;16231:46:3;;;;;;;;;;16293:41;;540::13;;;16293::3;;513:18:13;16293:41:3;;;;;;;16024:318;;;:::o;17382:799::-;-1:-1:-1;;;;;17499:14:3;;;:18;17495:679;;17538:71;;-1:-1:-1;;;17538:71:3;;-1:-1:-1;;;;;17538:36:3;;;;;:71;;752:10:7;;17589:4:3;;17595:7;;17604:4;;17538:71;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;-1:-1:-1;17538:71:3;;;;;;;;-1:-1:-1;;17538:71:3;;;;;;;;;;;;:::i;:::-;;;17534:629;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;17852:6;:13;17869:1;17852:18;17848:300;;17902:25;;-1:-1:-1;;;17902:25:3;;-1:-1:-1;;;;;1697:32:13;;17902:25:3;;;1679:51:13;1652:18;;17902:25:3;1533:203:13;17848:300:3;18098:6;18092:13;18083:6;18079:2;18075:15;18068:38;17534:629;-1:-1:-1;;;;;;17657:51:3;;-1:-1:-1;;;17657:51:3;17653:132;;17740:25;;-1:-1:-1;;;17740:25:3;;-1:-1:-1;;;;;1697:32:13;;17740:25:3;;;1679:51:13;1652:18;;17740:25:3;1533:203:13;17653:132:3;17610:190;17382:799;;;;:::o;660:718:8:-;716:13;767:14;784:17;795:5;784:10;:17::i;:::-;804:1;784:21;767:38;;820:20;854:6;843:18;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;843:18:8;-1:-1:-1;820:41:8;-1:-1:-1;985:28:8;;;1001:2;985:28;1042:290;-1:-1:-1;;1074:5:8;-1:-1:-1;;;1211:2:8;1200:14;;1195:32;1074:5;1182:46;1274:2;1265:11;;;-1:-1:-1;1295:21:8;1042:290;1295:21;-1:-1:-1;1353:6:8;660:718;-1:-1:-1;;;660:718:8:o;15127:678:3:-;15289:9;:31;;;-1:-1:-1;;;;;;15302:18:3;;;;15289:31;15285:471;;;15337:13;15353:22;15367:7;15353:13;:22::i;:::-;15337:38;-1:-1:-1;;;;;;15506:18:3;;;;;;:35;;;15537:4;-1:-1:-1;;;;;15528:13:3;:5;-1:-1:-1;;;;;15528:13:3;;;15506:35;:69;;;;;15546:29;15563:5;15570:4;15546:16;:29::i;:::-;15545:30;15506:69;15502:144;;;15603:27;;-1:-1:-1;;;15603:27:3;;-1:-1:-1;;;;;1697:32:13;;15603:27:3;;;1679:51:13;1652:18;;15603:27:3;1533:203:13;15502:144:3;15666:9;15662:83;;;15721:7;15717:2;-1:-1:-1;;;;;15701:28:3;15710:5;-1:-1:-1;;;;;15701:28:3;;;;;;;;;;;15662:83;15322:434;15285:471;-1:-1:-1;;15768:24:3;;;;:15;:24;;;;;:29;;-1:-1:-1;;;;;;15768:29:3;-1:-1:-1;;;;;15768:29:3;;;;;;;;;;15127:678::o;7285:376::-;7398:38;7412:5;7419:7;7428;7398:13;:38::i;:::-;7393:261;;-1:-1:-1;;;;;7457:19:3;;7453:190;;7504:31;;-1:-1:-1;;;7504:31:3;;;;;2848:25:13;;;2821:18;;7504:31:3;2702:177:13;7453:190:3;7583:44;;-1:-1:-1;;;7583:44:3;;-1:-1:-1;;;;;7711:32:13;;7583:44:3;;;7693:51:13;7760:18;;;7753:34;;;7666:18;;7583:44:3;7519:274:13;12534:948:11;12587:7;;-1:-1:-1;;;12665:17:11;;12661:106;;-1:-1:-1;;;12703:17:11;;;-1:-1:-1;12749:2:11;12739:12;12661:106;12794:8;12785:5;:17;12781:106;;12832:8;12823:17;;;-1:-1:-1;12869:2:11;12859:12;12781:106;12914:8;12905:5;:17;12901:106;;12952:8;12943:17;;;-1:-1:-1;12989:2:11;12979:12;12901:106;13034:7;13025:5;:16;13021:103;;13071:7;13062:16;;;-1:-1:-1;13107:1:11;13097:11;13021:103;13151:7;13142:5;:16;13138:103;;13188:7;13179:16;;;-1:-1:-1;13224:1:11;13214:11;13138:103;13268:7;13259:5;:16;13255:103;;13305:7;13296:16;;;-1:-1:-1;13341:1:11;13331:11;13255:103;13385:7;13376:5;:16;13372:68;;13423:1;13413:11;13468:6;12534:948;-1:-1:-1;;12534:948:11:o;6565:276:3:-;6668:4;-1:-1:-1;;;;;6705:21:3;;;;;;:128;;;6753:7;-1:-1:-1;;;;;6744:16:3;:5;-1:-1:-1;;;;;6744:16:3;;:52;;;;6764:32;6781:5;6788:7;6764:16;:32::i;:::-;6744:88;;;-1:-1:-1;6186:7:3;6213:24;;;:15;:24;;;;;;-1:-1:-1;;;;;6800:32:3;;;6213:24;;6800:32;6744:88;6685:148;6565:276;-1:-1:-1;;;;6565:276:3:o;14:131:13:-;-1:-1:-1;;;;;;88:32:13;;78:43;;68:71;;135:1;132;125:12;150:245;208:6;261:2;249:9;240:7;236:23;232:32;229:52;;;277:1;274;267:12;229:52;316:9;303:23;335:30;359:5;335:30;:::i;592:250::-;677:1;687:113;701:6;698:1;695:13;687:113;;;777:11;;;771:18;758:11;;;751:39;723:2;716:10;687:113;;;-1:-1:-1;;834:1:13;816:16;;809:27;592:250::o;847:271::-;889:3;927:5;921:12;954:6;949:3;942:19;970:76;1039:6;1032:4;1027:3;1023:14;1016:4;1009:5;1005:16;970:76;:::i;:::-;1100:2;1079:15;-1:-1:-1;;1075:29:13;1066:39;;;;1107:4;1062:50;;847:271;-1:-1:-1;;847:271:13:o;1123:220::-;1272:2;1261:9;1254:21;1235:4;1292:45;1333:2;1322:9;1318:18;1310:6;1292:45;:::i;1348:180::-;1407:6;1460:2;1448:9;1439:7;1435:23;1431:32;1428:52;;;1476:1;1473;1466:12;1428:52;-1:-1:-1;1499:23:13;;1348:180;-1:-1:-1;1348:180:13:o;1741:173::-;1809:20;;-1:-1:-1;;;;;1858:31:13;;1848:42;;1838:70;;1904:1;1901;1894:12;1838:70;1741:173;;;:::o;1919:254::-;1987:6;1995;2048:2;2036:9;2027:7;2023:23;2019:32;2016:52;;;2064:1;2061;2054:12;2016:52;2087:29;2106:9;2087:29;:::i;:::-;2077:39;2163:2;2148:18;;;;2135:32;;-1:-1:-1;;;1919:254:13:o;2178:328::-;2255:6;2263;2271;2324:2;2312:9;2303:7;2299:23;2295:32;2292:52;;;2340:1;2337;2330:12;2292:52;2363:29;2382:9;2363:29;:::i;:::-;2353:39;;2411:38;2445:2;2434:9;2430:18;2411:38;:::i;:::-;2401:48;;2496:2;2485:9;2481:18;2468:32;2458:42;;2178:328;;;;;:::o;2511:186::-;2570:6;2623:2;2611:9;2602:7;2598:23;2594:32;2591:52;;;2639:1;2636;2629:12;2591:52;2662:29;2681:9;2662:29;:::i;2884:592::-;3065:2;3047:21;;;3108:13;;-1:-1:-1;;;;;3104:39:13;3084:18;;;3077:67;3179:15;;3173:22;3231:4;3226:2;3211:18;;3204:32;-1:-1:-1;;3259:52:13;3131:3;3291:19;;3173:22;3259:52;:::i;:::-;3245:66;;3365:2;3357:6;3353:15;3347:22;3342:2;3331:9;3327:18;3320:50;3440:2;3432:6;3428:15;3422:22;3415:30;3408:38;3401:4;3390:9;3386:20;3379:68;3464:6;3456:14;;;2884:592;;;;:::o;3481:347::-;3546:6;3554;3607:2;3595:9;3586:7;3582:23;3578:32;3575:52;;;3623:1;3620;3613:12;3575:52;3646:29;3665:9;3646:29;:::i;:::-;3636:39;;3725:2;3714:9;3710:18;3697:32;3772:5;3765:13;3758:21;3751:5;3748:32;3738:60;;3794:1;3791;3784:12;3738:60;3817:5;3807:15;;;3481:347;;;;;:::o;3833:127::-;3894:10;3889:3;3885:20;3882:1;3875:31;3925:4;3922:1;3915:15;3949:4;3946:1;3939:15;3965:1138;4060:6;4068;4076;4084;4137:3;4125:9;4116:7;4112:23;4108:33;4105:53;;;4154:1;4151;4144:12;4105:53;4177:29;4196:9;4177:29;:::i;:::-;4167:39;;4225:38;4259:2;4248:9;4244:18;4225:38;:::i;:::-;4215:48;;4310:2;4299:9;4295:18;4282:32;4272:42;;4365:2;4354:9;4350:18;4337:32;4388:18;4429:2;4421:6;4418:14;4415:34;;;4445:1;4442;4435:12;4415:34;4483:6;4472:9;4468:22;4458:32;;4528:7;4521:4;4517:2;4513:13;4509:27;4499:55;;4550:1;4547;4540:12;4499:55;4586:2;4573:16;4608:2;4604;4601:10;4598:36;;;4614:18;;:::i;:::-;4689:2;4683:9;4657:2;4743:13;;-1:-1:-1;;4739:22:13;;;4763:2;4735:31;4731:40;4719:53;;;4787:18;;;4807:22;;;4784:46;4781:72;;;4833:18;;:::i;:::-;4873:10;4869:2;4862:22;4908:2;4900:6;4893:18;4948:7;4943:2;4938;4934;4930:11;4926:20;4923:33;4920:53;;;4969:1;4966;4959:12;4920:53;5025:2;5020;5016;5012:11;5007:2;4999:6;4995:15;4982:46;5070:1;5065:2;5060;5052:6;5048:15;5044:24;5037:35;5091:6;5081:16;;;;;;;3965:1138;;;;;;;:::o;5108:260::-;5176:6;5184;5237:2;5225:9;5216:7;5212:23;5208:32;5205:52;;;5253:1;5250;5243:12;5205:52;5276:29;5295:9;5276:29;:::i;:::-;5266:39;;5324:38;5358:2;5347:9;5343:18;5324:38;:::i;:::-;5314:48;;5108:260;;;;;:::o;5373:380::-;5452:1;5448:12;;;;5495;;;5516:61;;5570:4;5562:6;5558:17;5548:27;;5516:61;5623:2;5615:6;5612:14;5592:18;5589:38;5586:161;;5669:10;5664:3;5660:20;5657:1;5650:31;5704:4;5701:1;5694:15;5732:4;5729:1;5722:15;5586:161;;5373:380;;;:::o;6138:496::-;6317:3;6355:6;6349:13;6371:66;6430:6;6425:3;6418:4;6410:6;6406:17;6371:66;:::i;:::-;6500:13;;6459:16;;;;6522:70;6500:13;6459:16;6569:4;6557:17;;6522:70;:::i;:::-;6608:20;;6138:496;-1:-1:-1;;;;6138:496:13:o;6639:489::-;-1:-1:-1;;;;;6908:15:13;;;6890:34;;6960:15;;6955:2;6940:18;;6933:43;7007:2;6992:18;;6985:34;;;7055:3;7050:2;7035:18;;7028:31;;;6833:4;;7076:46;;7102:19;;7094:6;7076:46;:::i;:::-;7068:54;6639:489;-1:-1:-1;;;;;;6639:489:13:o;7133:249::-;7202:6;7255:2;7243:9;7234:7;7230:23;7226:32;7223:52;;;7271:1;7268;7261:12;7223:52;7303:9;7297:16;7322:30;7346:5;7322:30;:::i"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "936200",
								"executionCost": "infinite",
								"totalCost": "infinite"
							},
							"external": {
								"approve(address,uint256)": "31531",
								"balanceOf(address)": "2696",
								"getApproved(uint256)": "infinite",
								"getPrice()": "2424",
								"getSinglePictureToken()": "infinite",
								"isApprovedForAll(address,address)": "infinite",
								"name()": "infinite",
								"notPutOnSale()": "26570",
								"owner()": "2397",
								"ownerOf(uint256)": "infinite",
								"price()": "2316",
								"purchase()": "infinite",
								"putOnSale()": "26576",
								"renounceOwnership()": "infinite",
								"safeTransferFrom(address,address,uint256)": "infinite",
								"safeTransferFrom(address,address,uint256,bytes)": "infinite",
								"setApprovalForAll(address,bool)": "26700",
								"setPrice(uint256)": "24575",
								"supportsInterface(bytes4)": "531",
								"symbol()": "infinite",
								"tokenURI(uint256)": "infinite",
								"transferFrom(address,address,uint256)": "infinite",
								"transferOwnership(address)": "28465"
							},
							"internal": {
								"_baseURI()": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "CODESIZE",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "SUB",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSHSIZE",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "DUP4",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "ADD",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "SWAP2",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "3"
								},
								{
									"begin": 312,
									"end": 512,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 312,
									"end": 512,
									"name": "tag",
									"source": 0,
									"value": "2"
								},
								{
									"begin": 312,
									"end": 512,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 415,
									"end": 427,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "C"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "2834B1BA3AB932AA37B5B2B7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MLOAD",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "2"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "PUSH",
									"source": 3,
									"value": "20"
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "ADD",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1415"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "F2"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 1419,
									"end": 1535,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 1494,
									"end": 1499,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1486,
									"end": 1491,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "DUP2",
									"source": 3
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "SWAP2",
									"source": 3
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "SWAP1",
									"source": 3
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1486,
									"end": 1499,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "tag",
									"source": 3,
									"value": "8"
								},
								{
									"begin": 1486,
									"end": 1499,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 1510,
									"end": 1517,
									"name": "PUSH",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 1510,
									"end": 1527,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1520,
									"end": 1527,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1510,
									"end": 1517,
									"name": "DUP3",
									"source": 3
								},
								{
									"begin": 1510,
									"end": 1527,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "9"
								},
								{
									"begin": 1510,
									"end": 1527,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 3
								},
								{
									"begin": 1510,
									"end": 1527,
									"name": "tag",
									"source": 3,
									"value": "10"
								},
								{
									"begin": 1510,
									"end": 1527,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 1311,
									"end": 1337,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1311,
									"end": 1337,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 1307,
									"end": 1404,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 1307,
									"end": 1404,
									"name": "JUMPI",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1E4FBDF7"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "MSTORE",
									"source": 1
								},
								{
									"begin": 1389,
									"end": 1390,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "PUSH",
									"source": 1,
									"value": "4"
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "ADD",
									"source": 1
								},
								{
									"begin": 4095,
									"end": 4146,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 4068,
									"end": 4086,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 4068,
									"end": 4086,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "SUB",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 1361,
									"end": 1392,
									"name": "REVERT",
									"source": 1
								},
								{
									"begin": 1307,
									"end": 1404,
									"name": "tag",
									"source": 1,
									"value": "12"
								},
								{
									"begin": 1307,
									"end": 1404,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 1414,
									"end": 1446,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 1433,
									"end": 1445,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 1414,
									"end": 1432,
									"name": "PUSH [tag]",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 1414,
									"end": 1446,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 1414,
									"end": 1446,
									"name": "tag",
									"source": 1,
									"value": "15"
								},
								{
									"begin": 1414,
									"end": 1446,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 445,
									"end": 450,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 0,
									"value": "7"
								},
								{
									"begin": 445,
									"end": 459,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 453,
									"end": 459,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 445,
									"end": 450,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 445,
									"end": 459,
									"modifierDepth": 2,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 445,
									"end": 459,
									"jumpType": "[in]",
									"modifierDepth": 2,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 445,
									"end": 459,
									"modifierDepth": 2,
									"name": "tag",
									"source": 0,
									"value": "18"
								},
								{
									"begin": 445,
									"end": 459,
									"modifierDepth": 2,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 478,
									"end": 479,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 470,
									"end": 475,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 0,
									"value": "8"
								},
								{
									"begin": 470,
									"end": 479,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 490,
									"end": 496,
									"modifierDepth": 2,
									"name": "PUSH",
									"source": 0,
									"value": "9"
								},
								{
									"begin": 490,
									"end": 504,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 490,
									"end": 504,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "FF"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 490,
									"end": 504,
									"modifierDepth": 2,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 490,
									"end": 504,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 490,
									"end": 504,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "26"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "JUMP",
									"source": 0
								},
								{
									"begin": 3006,
									"end": 3197,
									"name": "tag",
									"source": 1,
									"value": "16"
								},
								{
									"begin": 3006,
									"end": 3197,
									"name": "JUMPDEST",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "PUSH",
									"source": 1,
									"value": "6"
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "DUP1",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "SLOAD",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "AND",
									"source": 1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "DUP4",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "DUP2",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "OR",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "SWAP4",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "SSTORE",
									"source": 1
								},
								{
									"begin": 3149,
									"end": 3189,
									"name": "PUSH",
									"source": 1,
									"value": "40"
								},
								{
									"begin": 3149,
									"end": 3189,
									"name": "MLOAD",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "AND",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "SWAP2",
									"source": 1
								},
								{
									"begin": 3116,
									"end": 3133,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "DUP3",
									"source": 1
								},
								{
									"begin": 3099,
									"end": 3105,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3149,
									"end": 3189,
									"name": "PUSH",
									"source": 1,
									"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
								},
								{
									"begin": 3149,
									"end": 3189,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3080,
									"end": 3096,
									"name": "PUSH",
									"source": 1,
									"value": "0"
								},
								{
									"begin": 3080,
									"end": 3096,
									"name": "SWAP1",
									"source": 1
								},
								{
									"begin": 3149,
									"end": 3189,
									"name": "LOG3",
									"source": 1
								},
								{
									"begin": 3069,
									"end": 3197,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3006,
									"end": 3197,
									"name": "POP",
									"source": 1
								},
								{
									"begin": 3006,
									"end": 3197,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 1
								},
								{
									"begin": 14,
									"end": 141,
									"name": "tag",
									"source": 13,
									"value": "21"
								},
								{
									"begin": 14,
									"end": 141,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 75,
									"end": 85,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B71"
								},
								{
									"begin": 70,
									"end": 73,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 66,
									"end": 86,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 63,
									"end": 64,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 56,
									"end": 87,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 106,
									"end": 110,
									"name": "PUSH",
									"source": 13,
									"value": "41"
								},
								{
									"begin": 103,
									"end": 104,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 96,
									"end": 111,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 130,
									"end": 134,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 127,
									"end": 128,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 120,
									"end": 135,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "tag",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 235,
									"end": 241,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 243,
									"end": 249,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 296,
									"end": 298,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 284,
									"end": 293,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 275,
									"end": 282,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 271,
									"end": 294,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 267,
									"end": 299,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 264,
									"end": 316,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 264,
									"end": 316,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "29"
								},
								{
									"begin": 264,
									"end": 316,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 312,
									"end": 313,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 309,
									"end": 310,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 302,
									"end": 314,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 264,
									"end": 316,
									"name": "tag",
									"source": 13,
									"value": "29"
								},
								{
									"begin": 264,
									"end": 316,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 338,
									"end": 354,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 338,
									"end": 354,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 383,
									"end": 414,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 383,
									"end": 414,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 373,
									"end": 415,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 373,
									"end": 415,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 363,
									"end": 433,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 363,
									"end": 433,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 429,
									"end": 430,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 426,
									"end": 427,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 419,
									"end": 431,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 363,
									"end": 433,
									"name": "tag",
									"source": 13,
									"value": "30"
								},
								{
									"begin": 363,
									"end": 433,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 476,
									"end": 478,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 507,
									"end": 525,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 507,
									"end": 525,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 507,
									"end": 525,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 501,
									"end": 526,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 452,
									"end": 457,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 452,
									"end": 457,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 476,
									"end": 478,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 575,
									"end": 589,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 575,
									"end": 589,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 575,
									"end": 589,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 572,
									"end": 606,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 572,
									"end": 606,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 572,
									"end": 606,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 602,
									"end": 603,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 599,
									"end": 600,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 592,
									"end": 604,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 572,
									"end": 606,
									"name": "tag",
									"source": 13,
									"value": "31"
								},
								{
									"begin": 572,
									"end": 606,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 640,
									"end": 646,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 629,
									"end": 638,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 625,
									"end": 647,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 615,
									"end": 647,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 615,
									"end": 647,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 685,
									"end": 692,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 678,
									"end": 682,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 674,
									"end": 676,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 670,
									"end": 683,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 666,
									"end": 693,
									"name": "SLT",
									"source": 13
								},
								{
									"begin": 656,
									"end": 711,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 656,
									"end": 711,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 707,
									"end": 708,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 704,
									"end": 705,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 697,
									"end": 709,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 656,
									"end": 711,
									"name": "tag",
									"source": 13,
									"value": "32"
								},
								{
									"begin": 656,
									"end": 711,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 736,
									"end": 738,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 730,
									"end": 739,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 758,
									"end": 760,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 754,
									"end": 756,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 751,
									"end": 761,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 748,
									"end": 784,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 748,
									"end": 784,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 748,
									"end": 784,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 764,
									"end": 782,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 764,
									"end": 782,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "21"
								},
								{
									"begin": 764,
									"end": 782,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 764,
									"end": 782,
									"name": "tag",
									"source": 13,
									"value": "34"
								},
								{
									"begin": 764,
									"end": 782,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 839,
									"end": 841,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 833,
									"end": 842,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 807,
									"end": 809,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 893,
									"end": 906,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 893,
									"end": 906,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 889,
									"end": 911,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 889,
									"end": 911,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 889,
									"end": 911,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 913,
									"end": 915,
									"name": "PUSH",
									"source": 13,
									"value": "3F"
								},
								{
									"begin": 885,
									"end": 916,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 881,
									"end": 921,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 869,
									"end": 922,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 869,
									"end": 922,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 869,
									"end": 922,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 937,
									"end": 955,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 937,
									"end": 955,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 937,
									"end": 955,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 957,
									"end": 979,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 957,
									"end": 979,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 957,
									"end": 979,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 934,
									"end": 980,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 931,
									"end": 1003,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 931,
									"end": 1003,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 931,
									"end": 1003,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 983,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 983,
									"end": 1001,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "21"
								},
								{
									"begin": 983,
									"end": 1001,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 983,
									"end": 1001,
									"name": "tag",
									"source": 13,
									"value": "36"
								},
								{
									"begin": 983,
									"end": 1001,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1023,
									"end": 1033,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1019,
									"end": 1021,
									"name": "PUSH",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1012,
									"end": 1034,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1058,
									"end": 1060,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1050,
									"end": 1056,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1043,
									"end": 1061,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1098,
									"end": 1105,
									"name": "DUP10",
									"source": 13
								},
								{
									"begin": 1093,
									"end": 1095,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1088,
									"end": 1090,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1084,
									"end": 1086,
									"name": "DUP8",
									"source": 13
								},
								{
									"begin": 1080,
									"end": 1091,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1076,
									"end": 1096,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1073,
									"end": 1106,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1070,
									"end": 1123,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1070,
									"end": 1123,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 1070,
									"end": 1123,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1119,
									"end": 1120,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1116,
									"end": 1117,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1109,
									"end": 1121,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1070,
									"end": 1123,
									"name": "tag",
									"source": 13,
									"value": "37"
								},
								{
									"begin": 1070,
									"end": 1123,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1141,
									"end": 1142,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1132,
									"end": 1142,
									"name": "SWAP4",
									"source": 13
								},
								{
									"begin": 1132,
									"end": 1142,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "tag",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1165,
									"end": 1167,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1162,
									"end": 1163,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1159,
									"end": 1168,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1253,
									"end": 1263,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1253,
									"end": 1263,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1253,
									"end": 1263,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1249,
									"end": 1268,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1249,
									"end": 1268,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1243,
									"end": 1269,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 1222,
									"end": 1236,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1222,
									"end": 1236,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1222,
									"end": 1236,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1218,
									"end": 1241,
									"name": "DUP8",
									"source": 13
								},
								{
									"begin": 1218,
									"end": 1241,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1211,
									"end": 1270,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1176,
									"end": 1186,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1176,
									"end": 1186,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1176,
									"end": 1186,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1176,
									"end": 1186,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "38"
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "tag",
									"source": 13,
									"value": "40"
								},
								{
									"begin": 1151,
									"end": 1280,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1322,
									"end": 1323,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1317,
									"end": 1319,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 1312,
									"end": 1314,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 1304,
									"end": 1310,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 1300,
									"end": 1315,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1296,
									"end": 1320,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 1289,
									"end": 1324,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1343,
									"end": 1349,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "SWAP7",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1333,
									"end": 1349,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "SWAP3",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 146,
									"end": 1355,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1360,
									"end": 1740,
									"name": "tag",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 1360,
									"end": 1740,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1439,
									"end": 1440,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 1435,
									"end": 1447,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1435,
									"end": 1447,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1435,
									"end": 1447,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 1435,
									"end": 1447,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1482,
									"end": 1494,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1482,
									"end": 1494,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1482,
									"end": 1494,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 1503,
									"end": 1564,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 1503,
									"end": 1564,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1557,
									"end": 1561,
									"name": "PUSH",
									"source": 13,
									"value": "7F"
								},
								{
									"begin": 1549,
									"end": 1555,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1545,
									"end": 1562,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 1535,
									"end": 1562,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1535,
									"end": 1562,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1503,
									"end": 1564,
									"name": "tag",
									"source": 13,
									"value": "42"
								},
								{
									"begin": 1503,
									"end": 1564,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1610,
									"end": 1612,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1602,
									"end": 1608,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1599,
									"end": 1613,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 1579,
									"end": 1597,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1576,
									"end": 1614,
									"name": "SUB",
									"source": 13
								},
								{
									"begin": 1573,
									"end": 1734,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 1573,
									"end": 1734,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 1656,
									"end": 1666,
									"name": "PUSH",
									"source": 13,
									"value": "4E487B71"
								},
								{
									"begin": 1651,
									"end": 1654,
									"name": "PUSH",
									"source": 13,
									"value": "E0"
								},
								{
									"begin": 1647,
									"end": 1667,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 1644,
									"end": 1645,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1637,
									"end": 1668,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1691,
									"end": 1695,
									"name": "PUSH",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 1688,
									"end": 1689,
									"name": "PUSH",
									"source": 13,
									"value": "4"
								},
								{
									"begin": 1681,
									"end": 1696,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1719,
									"end": 1723,
									"name": "PUSH",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 1716,
									"end": 1717,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1709,
									"end": 1724,
									"name": "REVERT",
									"source": 13
								},
								{
									"begin": 1573,
									"end": 1734,
									"name": "tag",
									"source": 13,
									"value": "43"
								},
								{
									"begin": 1573,
									"end": 1734,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1573,
									"end": 1734,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1360,
									"end": 1740,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 1360,
									"end": 1740,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 1360,
									"end": 1740,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1360,
									"end": 1740,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 1871,
									"end": 2416,
									"name": "tag",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 1871,
									"end": 2416,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1973,
									"end": 1975,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 1968,
									"end": 1971,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 1965,
									"end": 1976,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 1962,
									"end": 2410,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 1962,
									"end": 2410,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 1962,
									"end": 2410,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 2009,
									"end": 2010,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 2034,
									"end": 2039,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2030,
									"end": 2032,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2023,
									"end": 2040,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 2079,
									"end": 2083,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2075,
									"end": 2077,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2065,
									"end": 2084,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": 2149,
									"end": 2151,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 2137,
									"end": 2147,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 2133,
									"end": 2152,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2130,
									"end": 2131,
									"name": "PUSH",
									"source": 13,
									"value": "5"
								},
								{
									"begin": 2126,
									"end": 2153,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 2120,
									"end": 2124,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2116,
									"end": 2154,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2185,
									"end": 2189,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2173,
									"end": 2183,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 2170,
									"end": 2190,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 2167,
									"end": 2214,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 2167,
									"end": 2214,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 2167,
									"end": 2214,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2208,
									"end": 2212,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 2167,
									"end": 2214,
									"name": "tag",
									"source": 13,
									"value": "47"
								},
								{
									"begin": 2167,
									"end": 2214,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2263,
									"end": 2265,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 2258,
									"end": 2261,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 2254,
									"end": 2266,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2251,
									"end": 2252,
									"name": "PUSH",
									"source": 13,
									"value": "5"
								},
								{
									"begin": 2247,
									"end": 2267,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 2241,
									"end": 2245,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2237,
									"end": 2268,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2227,
									"end": 2268,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 2227,
									"end": 2268,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "tag",
									"source": 13,
									"value": "48"
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2336,
									"end": 2338,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2329,
									"end": 2334,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2326,
									"end": 2339,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 2381,
									"end": 2398,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 2381,
									"end": 2398,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2381,
									"end": 2398,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 2362,
									"end": 2363,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 2351,
									"end": 2364,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "48"
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "tag",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 2318,
									"end": 2400,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2322,
									"end": 2325,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2322,
									"end": 2325,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 2322,
									"end": 2325,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1962,
									"end": 2410,
									"name": "tag",
									"source": 13,
									"value": "46"
								},
								{
									"begin": 1962,
									"end": 2410,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1871,
									"end": 2416,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1871,
									"end": 2416,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1871,
									"end": 2416,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 1871,
									"end": 2416,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2592,
									"end": 3944,
									"name": "tag",
									"source": 13,
									"value": "9"
								},
								{
									"begin": 2592,
									"end": 3944,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2712,
									"end": 2722,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2712,
									"end": 2722,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "40"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": 2734,
									"end": 2764,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2734,
									"end": 2764,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 2731,
									"end": 2787,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 2731,
									"end": 2787,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 2731,
									"end": 2787,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 2767,
									"end": 2785,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 2767,
									"end": 2785,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "21"
								},
								{
									"begin": 2767,
									"end": 2785,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2767,
									"end": 2785,
									"name": "tag",
									"source": 13,
									"value": "54"
								},
								{
									"begin": 2767,
									"end": 2785,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2796,
									"end": 2893,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "55"
								},
								{
									"begin": 2886,
									"end": 2892,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2884,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "56"
								},
								{
									"begin": 2878,
									"end": 2882,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 2872,
									"end": 2883,
									"name": "SLOAD",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2884,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "22"
								},
								{
									"begin": 2846,
									"end": 2884,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2846,
									"end": 2884,
									"name": "tag",
									"source": 13,
									"value": "56"
								},
								{
									"begin": 2846,
									"end": 2884,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2840,
									"end": 2844,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 2796,
									"end": 2893,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "24"
								},
								{
									"begin": 2796,
									"end": 2893,
									"jumpType": "[in]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 2796,
									"end": 2893,
									"name": "tag",
									"source": 13,
									"value": "55"
								},
								{
									"begin": 2796,
									"end": 2893,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 2948,
									"end": 2952,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 2948,
									"end": 2952,
									"name": "DUP1",
									"source": 13
								},
								{
									"begin": 3012,
									"end": 3014,
									"name": "PUSH",
									"source": 13,
									"value": "1F"
								},
								{
									"begin": 3001,
									"end": 3015,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3001,
									"end": 3015,
									"name": "GT",
									"source": 13
								},
								{
									"begin": 3029,
									"end": 3030,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 3024,
									"end": 3687,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3024,
									"end": 3687,
									"name": "EQ",
									"source": 13
								},
								{
									"begin": 3024,
									"end": 3687,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "58"
								},
								{
									"begin": 3024,
									"end": 3687,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 3731,
									"end": 3732,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 3748,
									"end": 3754,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3745,
									"end": 3834,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 3745,
									"end": 3834,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "59"
								},
								{
									"begin": 3745,
									"end": 3834,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3800,
									"end": 3819,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 3800,
									"end": 3819,
									"name": "DUP4",
									"source": 13
								},
								{
									"begin": 3800,
									"end": 3819,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3794,
									"end": 3820,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3745,
									"end": 3834,
									"name": "tag",
									"source": 13,
									"value": "59"
								},
								{
									"begin": 3745,
									"end": 3834,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 2549,
									"end": 2550,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 2545,
									"end": 2556,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 2545,
									"end": 2556,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2545,
									"end": 2556,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 2541,
									"end": 2565,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 2537,
									"end": 2566,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 2527,
									"end": 2567,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 2573,
									"end": 2574,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 2569,
									"end": 2580,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 2569,
									"end": 2580,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 2569,
									"end": 2580,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 2524,
									"end": 2581,
									"name": "OR",
									"source": 13
								},
								{
									"begin": 3847,
									"end": 3928,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 3847,
									"end": 3928,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 2994,
									"end": 3938,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "50"
								},
								{
									"begin": 2994,
									"end": 3938,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3024,
									"end": 3687,
									"name": "tag",
									"source": 13,
									"value": "58"
								},
								{
									"begin": 3024,
									"end": 3687,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 1818,
									"end": 1819,
									"name": "PUSH",
									"source": 13,
									"value": "0"
								},
								{
									"begin": 1811,
									"end": 1825,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 1811,
									"end": 1825,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1811,
									"end": 1825,
									"name": "MSTORE",
									"source": 13
								},
								{
									"begin": 1855,
									"end": 1859,
									"name": "PUSH",
									"source": 13,
									"value": "20"
								},
								{
									"begin": 1842,
									"end": 1860,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 1842,
									"end": 1860,
									"name": "KECCAK256",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1F"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3060,
									"end": 3080,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3080,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 3060,
									"end": 3080,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "tag",
									"source": 13,
									"value": "62"
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3192,
									"end": 3199,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3189,
									"end": 3190,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3186,
									"end": 3200,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "64"
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 3281,
									"end": 3300,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 3281,
									"end": 3300,
									"name": "DUP7",
									"source": 13
								},
								{
									"begin": 3281,
									"end": 3300,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3275,
									"end": 3301,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": 3260,
									"end": 3302,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3260,
									"end": 3302,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 3373,
									"end": 3400,
									"name": "SWAP5",
									"source": 13
								},
								{
									"begin": 3373,
									"end": 3400,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3373,
									"end": 3400,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3373,
									"end": 3400,
									"name": "SWAP5",
									"source": 13
								},
								{
									"begin": 3341,
									"end": 3342,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 3329,
									"end": 3343,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3329,
									"end": 3343,
									"name": "SWAP2",
									"source": 13
								},
								{
									"begin": 3329,
									"end": 3343,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3329,
									"end": 3343,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3208,
									"end": 3227,
									"name": "DUP5",
									"source": 13
								},
								{
									"begin": 3208,
									"end": 3227,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "62"
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "tag",
									"source": 13,
									"value": "64"
								},
								{
									"begin": 3178,
									"end": 3414,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 3182,
									"end": 3185,
									"name": "POP",
									"source": 13
								},
								{
									"begin": 3442,
									"end": 3448,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 3433,
									"end": 3440,
									"name": "DUP3",
									"source": 13
								},
								{
									"begin": 3430,
									"end": 3449,
									"name": "LT",
									"source": 13
								},
								{
									"begin": 3427,
									"end": 3628,
									"name": "ISZERO",
									"source": 13
								},
								{
									"begin": 3427,
									"end": 3628,
									"name": "PUSH [tag]",
									"source": 13,
									"value": "65"
								},
								{
									"begin": 3427,
									"end": 3628,
									"name": "JUMPI",
									"source": 13
								},
								{
									"begin": 3503,
									"end": 3522,
									"name": "DUP8",
									"source": 13
								},
								{
									"begin": 3503,
									"end": 3522,
									"name": "DUP6",
									"source": 13
								},
								{
									"begin": 3503,
									"end": 3522,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3497,
									"end": 3523,
									"name": "MLOAD",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 3586,
									"end": 3587,
									"name": "PUSH",
									"source": 13,
									"value": "3"
								},
								{
									"begin": 3582,
									"end": 3596,
									"name": "DUP9",
									"source": 13
								},
								{
									"begin": 3582,
									"end": 3596,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3582,
									"end": 3596,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 3598,
									"end": 3601,
									"name": "PUSH",
									"source": 13,
									"value": "F8"
								},
								{
									"begin": 3578,
									"end": 3602,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 3574,
									"end": 3611,
									"name": "SHR",
									"source": 13
								},
								{
									"begin": 3570,
									"end": 3612,
									"name": "NOT",
									"source": 13
								},
								{
									"begin": 3555,
									"end": 3613,
									"name": "AND",
									"source": 13
								},
								{
									"begin": 3540,
									"end": 3614,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3540,
									"end": 3614,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": 3427,
									"end": 3628,
									"name": "tag",
									"source": 13,
									"value": "65"
								},
								{
									"begin": 3427,
									"end": 3628,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 3674,
									"end": 3675,
									"name": "PUSH",
									"source": 13,
									"value": "1"
								},
								{
									"begin": 3658,
									"end": 3672,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3658,
									"end": 3672,
									"name": "DUP2",
									"source": 13
								},
								{
									"begin": 3658,
									"end": 3672,
									"name": "SHL",
									"source": 13
								},
								{
									"begin": 3654,
									"end": 3676,
									"name": "ADD",
									"source": 13
								},
								{
									"begin": 3641,
									"end": 3677,
									"name": "SWAP1",
									"source": 13
								},
								{
									"begin": 3641,
									"end": 3677,
									"name": "SSTORE",
									"source": 13
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 2592,
									"end": 3944,
									"jumpType": "[out]",
									"name": "JUMP",
									"source": 13
								},
								{
									"begin": 3949,
									"end": 4152,
									"name": "tag",
									"source": 13,
									"value": "26"
								},
								{
									"begin": 3949,
									"end": 4152,
									"name": "JUMPDEST",
									"source": 13
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 196,
									"end": 1311,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201c8c174e7c88dfb119f5fd3f9a49e9567e0ac31a44600c86af58e4027c32288464736f6c63430008140033",
									".code": [
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "854CBB4A"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "A035B1FE"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "A035B1FE"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "A22CB465"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "B88D4FDE"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "22"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "C87B56DD"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "E985E9C5"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "F2FDE38B"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "854CBB4A"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "8C2A5BC8"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "91B7F5ED"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "95D89B41"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "98D5FDCA"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "42842E0E"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "42842E0E"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "5987CC19"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "6352211E"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "64EDFBF0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "70A08231"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "715018A6"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "1FFC9A7"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "6FDDE03"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "81812FC"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "95EA7B3"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "23B872DD"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 196,
											"end": 1311,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "31"
										},
										{
											"begin": 1607,
											"end": 1912,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "tag",
											"source": 3,
											"value": "30"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1607,
											"end": 1912,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 565,
											"end": 579,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 565,
											"end": 579,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 558,
											"end": 580,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 528,
											"end": 530,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "tag",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "RETURN",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "tag",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 2438,
											"end": 2529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "tag",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 2438,
											"end": 2529,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "tag",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 3610,
											"end": 3768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "tag",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 3610,
											"end": 3768,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1667,
											"end": 1669,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 3429,
											"end": 3544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 3429,
											"end": 3544,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4279,
											"end": 4867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "tag",
											"source": 3,
											"value": "50"
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4279,
											"end": 4867,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "51"
										},
										{
											"begin": 4938,
											"end": 5072,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "tag",
											"source": 3,
											"value": "54"
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 4938,
											"end": 5072,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 980,
											"end": 1050,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 980,
											"end": 1050,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1050,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 980,
											"end": 1050,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 980,
											"end": 1050,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2251,
											"end": 2371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "tag",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2251,
											"end": 2371,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1140,
											"end": 1306,
											"name": "tag",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 1140,
											"end": 1306,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1140,
											"end": 1306,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1140,
											"end": 1306,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1140,
											"end": 1306,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "66"
										},
										{
											"begin": 1976,
											"end": 2189,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "tag",
											"source": 3,
											"value": "65"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 1976,
											"end": 2189,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "tag",
											"source": 3,
											"value": "64"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2836,
											"end": 2838,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2821,
											"end": 2839,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "33"
										},
										{
											"begin": 2702,
											"end": 2879,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2368,
											"end": 2471,
											"name": "tag",
											"source": 1,
											"value": "13"
										},
										{
											"begin": 2368,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2368,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 2368,
											"end": 2471,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 2368,
											"end": 2471,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 647,
											"end": 792,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 647,
											"end": 792,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 647,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 647,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "tag",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 647,
											"end": 792,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 647,
											"end": 792,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 647,
											"end": 792,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "75"
										},
										{
											"begin": 647,
											"end": 792,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1132,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 1058,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 1058,
											"end": 1132,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1058,
											"end": 1132,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1693,
											"end": 1780,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 1693,
											"end": 1780,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1693,
											"end": 1780,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 1693,
											"end": 1780,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 888,
											"end": 972,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 888,
											"end": 972,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 888,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "45"
										},
										{
											"begin": 888,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 888,
											"end": 972,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 888,
											"end": 972,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 888,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "41"
										},
										{
											"begin": 888,
											"end": 972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 888,
											"end": 972,
											"name": "tag",
											"source": 0,
											"value": "82"
										},
										{
											"begin": 888,
											"end": 972,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 888,
											"end": 972,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 888,
											"end": 972,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2598,
											"end": 2693,
											"name": "tag",
											"source": 3,
											"value": "18"
										},
										{
											"begin": 2598,
											"end": 2693,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2598,
											"end": 2693,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 2598,
											"end": 2693,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 2598,
											"end": 2693,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 800,
											"end": 880,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 800,
											"end": 880,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 867,
											"end": 872,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 867,
											"end": 872,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 800,
											"end": 880,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 800,
											"end": 880,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 265,
											"end": 285,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 265,
											"end": 285,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 265,
											"end": 285,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 265,
											"end": 285,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 265,
											"end": 285,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 265,
											"end": 285,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 265,
											"end": 285,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "21"
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "95"
										},
										{
											"begin": 3840,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "94"
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 3840,
											"end": 3986,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "99"
										},
										{
											"begin": 5143,
											"end": 5354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "tag",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 5143,
											"end": 5354,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "35"
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "41"
										},
										{
											"begin": 2764,
											"end": 3024,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "tag",
											"source": 3,
											"value": "102"
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 2764,
											"end": 3024,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "107"
										},
										{
											"begin": 4057,
											"end": 4212,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 3,
											"value": "106"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 4057,
											"end": 4212,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "CALLDATASIZE",
											"source": 1
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2626,
											"end": 2846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "tag",
											"source": 1,
											"value": "111"
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 2626,
											"end": 2846,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "tag",
											"source": 3,
											"value": "32"
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1709,
											"end": 1713,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1746,
											"end": 1786,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 1786,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80AC58CD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1746,
											"end": 1786,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 1786,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 1851,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 1746,
											"end": 1851,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1803,
											"end": 1851,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 1803,
											"end": 1851,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5B5E139F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1803,
											"end": 1851,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 1851,
											"name": "tag",
											"source": 3,
											"value": "114"
										},
										{
											"begin": 1746,
											"end": 1851,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 1904,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 1746,
											"end": 1904,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 1746,
											"end": 1904,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1FFC9A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 885,
											"end": 925,
											"name": "DUP4",
											"source": 9
										},
										{
											"begin": 885,
											"end": 925,
											"name": "AND",
											"source": 9
										},
										{
											"begin": 885,
											"end": 925,
											"name": "EQ",
											"source": 9
										},
										{
											"begin": 1868,
											"end": 1904,
											"name": "tag",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 1868,
											"end": 1904,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 1726,
											"end": 1904,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 1607,
											"end": 1912,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1607,
											"end": 1912,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "tag",
											"source": 3,
											"value": "36"
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2483,
											"end": 2496,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2516,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 2509,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "tag",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 2509,
											"end": 2521,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "tag",
											"source": 3,
											"value": "121"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DIV",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "tag",
											"source": 3,
											"value": "123"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "tag",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "124"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "tag",
											"source": 3,
											"value": "122"
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2509,
											"end": 2521,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2438,
											"end": 2529,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 3610,
											"end": 3768,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3677,
											"end": 3684,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 3697,
											"end": 3719,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 3711,
											"end": 3718,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3697,
											"end": 3710,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 3697,
											"end": 3719,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3697,
											"end": 3719,
											"name": "tag",
											"source": 3,
											"value": "126"
										},
										{
											"begin": 3697,
											"end": 3719,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6186,
											"end": 6193,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6228,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 3739,
											"end": 3760,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 6116,
											"end": 6245,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "tag",
											"source": 3,
											"value": "48"
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3501,
											"end": 3536,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 3510,
											"end": 3512,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 3514,
											"end": 3521,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3501,
											"end": 3509,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 3501,
											"end": 3536,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3501,
											"end": 3536,
											"name": "tag",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 3501,
											"end": 3536,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 3429,
											"end": 3544,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4374,
											"end": 4390,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4374,
											"end": 4390,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4459,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 4370,
											"end": 4459,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32505749"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4444,
											"end": 4445,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "tag",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4414,
											"end": 4447,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4370,
											"end": 4459,
											"name": "tag",
											"source": 3,
											"value": "136"
										},
										{
											"begin": 4370,
											"end": 4459,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4680,
											"end": 4701,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4704,
											"end": 4738,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 4712,
											"end": 4714,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4716,
											"end": 4723,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 4704,
											"end": 4711,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 4704,
											"end": 4738,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4704,
											"end": 4738,
											"name": "tag",
											"source": 3,
											"value": "138"
										},
										{
											"begin": 4704,
											"end": 4738,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4680,
											"end": 4738,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4680,
											"end": 4738,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4770,
											"end": 4774,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4753,
											"end": 4774,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4753,
											"end": 4766,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4753,
											"end": 4774,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4753,
											"end": 4774,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4749,
											"end": 4860,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 4749,
											"end": 4860,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "64283D7B"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6016,
											"end": 6031,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 6016,
											"end": 6031,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 6016,
											"end": 6031,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5998,
											"end": 6032,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6048,
											"end": 6066,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 6048,
											"end": 6066,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6048,
											"end": 6066,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6041,
											"end": 6075,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6041,
											"end": 6075,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6041,
											"end": 6075,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6111,
											"end": 6126,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6111,
											"end": 6126,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6091,
											"end": 6109,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 6091,
											"end": 6109,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6091,
											"end": 6109,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6084,
											"end": 6127,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5933,
											"end": 5951,
											"name": "PUSH",
											"source": 13,
											"value": "64"
										},
										{
											"begin": 5933,
											"end": 5951,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4798,
											"end": 4848,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 5758,
											"end": 6133,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4749,
											"end": 4860,
											"name": "tag",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 4749,
											"end": 4860,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4359,
											"end": 4867,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4279,
											"end": 4867,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "tag",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 5042,
											"end": 5046,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5048,
											"end": 5050,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5052,
											"end": 5059,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5041,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 5025,
											"end": 5064,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "tag",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 5025,
											"end": 5064,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4938,
											"end": 5072,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 980,
											"end": 1050,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 980,
											"end": 1050,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 1579,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 1579,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "tag",
											"source": 1,
											"value": "147"
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1029,
											"end": 1035,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1029,
											"end": 1042,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1029,
											"end": 1042,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1029,
											"end": 1042,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1038,
											"end": 1042,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1029,
											"end": 1042,
											"modifierDepth": 1,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 1029,
											"end": 1042,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1029,
											"end": 1042,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 980,
											"end": 1050,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "tag",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2251,
											"end": 2371,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2314,
											"end": 2321,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2341,
											"end": 2363,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 2355,
											"end": 2362,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2341,
											"end": 2354,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 2341,
											"end": 2363,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1140,
											"end": 1306,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 1140,
											"end": 1306,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1207,
											"end": 1212,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1207,
											"end": 1212,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 1186,
											"end": 1196,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1186,
											"end": 1196,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "PUSH",
											"source": 0,
											"value": "8FC"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1207,
											"end": 1212,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 1186,
											"end": 1196,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP9",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "tag",
											"source": 0,
											"value": "154"
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1178,
											"end": 1213,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1224,
											"end": 1253,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1242,
											"end": 1252,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 1224,
											"end": 1241,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "112"
										},
										{
											"begin": 1224,
											"end": 1253,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1224,
											"end": 1253,
											"name": "tag",
											"source": 0,
											"value": "155"
										},
										{
											"begin": 1224,
											"end": 1253,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1272,
											"end": 1273,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 1264,
											"end": 1269,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 1264,
											"end": 1273,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1284,
											"end": 1290,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1284,
											"end": 1298,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1284,
											"end": 1298,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1284,
											"end": 1298,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1284,
											"end": 1298,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1284,
											"end": 1298,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1140,
											"end": 1306,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "tag",
											"source": 3,
											"value": "67"
										},
										{
											"begin": 1976,
											"end": 2189,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2039,
											"end": 2046,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2063,
											"end": 2082,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2063,
											"end": 2082,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2059,
											"end": 2148,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 2059,
											"end": 2148,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "22718AD9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E2"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2133,
											"end": 2134,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2106,
											"end": 2136,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2059,
											"end": 2148,
											"name": "tag",
											"source": 3,
											"value": "157"
										},
										{
											"begin": 2059,
											"end": 2148,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2174,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2165,
											"end": 2181,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 1976,
											"end": 2189,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2368,
											"end": 2471,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 2368,
											"end": 2471,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "160"
										},
										{
											"begin": 1579,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 1579,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "tag",
											"source": 1,
											"value": "160"
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2433,
											"end": 2463,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 2460,
											"end": 2461,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2433,
											"end": 2451,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "163"
										},
										{
											"begin": 2433,
											"end": 2463,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2433,
											"end": 2463,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 2433,
											"end": 2463,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2368,
											"end": 2471,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 647,
											"end": 792,
											"name": "tag",
											"source": 0,
											"value": "73"
										},
										{
											"begin": 647,
											"end": 792,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 700,
											"end": 716,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "164"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MLOAD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "80"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "AND",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "60"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "20"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ADD",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "ISZERO",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "DUP2",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "MSTORE",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "JUMP",
											"source": -1
										},
										{
											"begin": 700,
											"end": 716,
											"name": "tag",
											"source": 0,
											"value": "164"
										},
										{
											"begin": 700,
											"end": 716,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 746,
											"end": 761,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1693,
											"end": 1780,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 746,
											"end": 761,
											"name": "tag",
											"source": 0,
											"value": "167"
										},
										{
											"begin": 746,
											"end": 761,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 736,
											"end": 784,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 763,
											"end": 768,
											"name": "PUSH",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 736,
											"end": 784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "tag",
											"source": 0,
											"value": "168"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "120"
										},
										{
											"begin": 736,
											"end": 784,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "tag",
											"source": 0,
											"value": "169"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "100"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DIV",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MUL",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "tag",
											"source": 0,
											"value": "171"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "KECCAK256",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "tag",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "GT",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "172"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "tag",
											"source": 0,
											"value": "170"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 770,
											"end": 775,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 770,
											"end": 775,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 777,
											"end": 783,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 777,
											"end": 783,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 777,
											"end": 783,
											"name": "PUSH",
											"source": 0,
											"value": "FF"
										},
										{
											"begin": 777,
											"end": 783,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 736,
											"end": 784,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 729,
											"end": 784,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 647,
											"end": 792,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 647,
											"end": 792,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1132,
											"name": "tag",
											"source": 0,
											"value": "77"
										},
										{
											"begin": 1058,
											"end": 1132,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 1579,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 1579,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "tag",
											"source": 1,
											"value": "174"
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1110,
											"end": 1116,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 1110,
											"end": 1124,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1110,
											"end": 1124,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1110,
											"end": 1124,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 1110,
											"end": 1124,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1110,
											"end": 1124,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 1058,
											"end": 1132,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 888,
											"end": 972,
											"name": "tag",
											"source": 0,
											"value": "83"
										},
										{
											"begin": 888,
											"end": 972,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "178"
										},
										{
											"begin": 1579,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 1579,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "tag",
											"source": 1,
											"value": "178"
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 950,
											"end": 955,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 950,
											"end": 964,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 888,
											"end": 972,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2598,
											"end": 2693,
											"name": "tag",
											"source": 3,
											"value": "85"
										},
										{
											"begin": 2598,
											"end": 2693,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2645,
											"end": 2658,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2678,
											"end": 2685,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 2671,
											"end": 2685,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2671,
											"end": 2685,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 2671,
											"end": 2685,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "119"
										},
										{
											"begin": 2671,
											"end": 2685,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2671,
											"end": 2685,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "120"
										},
										{
											"begin": 2671,
											"end": 2685,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "tag",
											"source": 3,
											"value": "96"
										},
										{
											"begin": 3840,
											"end": 3986,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3978,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "131"
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 3959,
											"end": 3967,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3969,
											"end": 3977,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 3926,
											"end": 3944,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 3926,
											"end": 3978,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "tag",
											"source": 3,
											"value": "100"
										},
										{
											"begin": 5143,
											"end": 5354,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5257,
											"end": 5288,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 5270,
											"end": 5274,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5276,
											"end": 5278,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5280,
											"end": 5287,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5257,
											"end": 5269,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 5257,
											"end": 5288,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5257,
											"end": 5288,
											"name": "tag",
											"source": 3,
											"value": "192"
										},
										{
											"begin": 5257,
											"end": 5288,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5299,
											"end": 5346,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 5322,
											"end": 5326,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5328,
											"end": 5330,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5339,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5341,
											"end": 5345,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5299,
											"end": 5321,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 5299,
											"end": 5346,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "tag",
											"source": 3,
											"value": "103"
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2828,
											"end": 2841,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 2854,
											"end": 2876,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 2868,
											"end": 2875,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 2854,
											"end": 2867,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 2854,
											"end": 2876,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2854,
											"end": 2876,
											"name": "tag",
											"source": 3,
											"value": "196"
										},
										{
											"begin": 2854,
											"end": 2876,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2854,
											"end": 2876,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2910,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2913,
											"end": 2923,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 598,
											"end": 631,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 598,
											"end": 631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "PUSH",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 598,
											"end": 631,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "PUSH",
											"source": 0,
											"value": "697066733A2F2F7069656365546F6B656E426173655552490000000000000000"
										},
										{
											"begin": 598,
											"end": 631,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 598,
											"end": 631,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 598,
											"end": 631,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 520,
											"end": 639,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2913,
											"end": 2923,
											"name": "tag",
											"source": 3,
											"value": "197"
										},
										{
											"begin": 2913,
											"end": 2923,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2923,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2889,
											"end": 2923,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2965,
											"end": 2966,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2947,
											"end": 2954,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 2962,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 2966,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "tag",
											"source": 3,
											"value": "199"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2983,
											"end": 2990,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3010,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 2992,
											"end": 2999,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3008,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "202"
										},
										{
											"begin": 2992,
											"end": 3010,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2992,
											"end": 3010,
											"name": "tag",
											"source": 3,
											"value": "201"
										},
										{
											"begin": 2992,
											"end": 3010,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "204"
										},
										{
											"begin": 2969,
											"end": 3011,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "tag",
											"source": 3,
											"value": "203"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 2969,
											"end": 3011,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "tag",
											"source": 3,
											"value": "200"
										},
										{
											"begin": 2941,
											"end": 3016,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2934,
											"end": 3016,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 2764,
											"end": 3024,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2764,
											"end": 3024,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "tag",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 4057,
											"end": 4212,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4145,
											"end": 4149,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4187,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4194,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "PUSH",
											"source": 3,
											"value": "FF"
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 4169,
											"end": 4204,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4057,
											"end": 4212,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "tag",
											"source": 1,
											"value": "112"
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 1579,
											"end": 1590,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 1579,
											"end": 1592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "tag",
											"source": 1,
											"value": "207"
										},
										{
											"begin": 1579,
											"end": 1592,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2711,
											"end": 2733,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2711,
											"end": 2733,
											"modifierDepth": 1,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 2707,
											"end": 2800,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "209"
										},
										{
											"begin": 2707,
											"end": 2800,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2757,
											"end": 2788,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 2757,
											"end": 2788,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2757,
											"end": 2788,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2757,
											"end": 2788,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2785,
											"end": 2786,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2757,
											"end": 2788,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2757,
											"end": 2788,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2757,
											"end": 2788,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2757,
											"end": 2788,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2707,
											"end": 2800,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "209"
										},
										{
											"begin": 2707,
											"end": 2800,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2810,
											"end": 2838,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 2829,
											"end": 2837,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2810,
											"end": 2828,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "163"
										},
										{
											"begin": 2810,
											"end": 2838,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2810,
											"end": 2838,
											"modifierDepth": 1,
											"name": "tag",
											"source": 1,
											"value": "211"
										},
										{
											"begin": 2810,
											"end": 2838,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2626,
											"end": 2846,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2626,
											"end": 2846,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 16585,
											"end": 16832,
											"name": "tag",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 16585,
											"end": 16832,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 16648,
											"end": 16655,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5978,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 16712,
											"end": 16802,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "116"
										},
										{
											"begin": 16712,
											"end": 16802,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7E273289"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2821,
											"end": 2839,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 2821,
											"end": 2839,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16759,
											"end": 16790,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 2702,
											"end": 2879,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 14817,
											"end": 14939,
											"name": "tag",
											"source": 3,
											"value": "134"
										},
										{
											"begin": 14817,
											"end": 14939,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 14898,
											"end": 14931,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 14907,
											"end": 14909,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 14911,
											"end": 14918,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 14920,
											"end": 14924,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 14926,
											"end": 14930,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 14898,
											"end": 14906,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 14898,
											"end": 14931,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9078,
											"end": 9902,
											"name": "tag",
											"source": 3,
											"value": "140"
										},
										{
											"begin": 9078,
											"end": 9902,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9164,
											"end": 9171,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5978,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 5971,
											"end": 5987,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9279,
											"end": 9297,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 9279,
											"end": 9297,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9279,
											"end": 9297,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9275,
											"end": 9363,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 9275,
											"end": 9363,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9314,
											"end": 9351,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 9331,
											"end": 9335,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9337,
											"end": 9341,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 9343,
											"end": 9350,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 9314,
											"end": 9330,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "227"
										},
										{
											"begin": 9314,
											"end": 9351,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9314,
											"end": 9351,
											"name": "tag",
											"source": 3,
											"value": "226"
										},
										{
											"begin": 9314,
											"end": 9351,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9410,
											"end": 9428,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9410,
											"end": 9428,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9410,
											"end": 9428,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9406,
											"end": 9669,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "228"
										},
										{
											"begin": 9406,
											"end": 9669,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 9528,
											"end": 9576,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "229"
										},
										{
											"begin": 9545,
											"end": 9546,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9549,
											"end": 9556,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 9566,
											"end": 9567,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9570,
											"end": 9575,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9528,
											"end": 9536,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 9528,
											"end": 9576,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 9528,
											"end": 9576,
											"name": "tag",
											"source": 3,
											"value": "229"
										},
										{
											"begin": 9528,
											"end": 9576,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9631,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9637,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9642,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9642,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9622,
											"end": 9642,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9642,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9622,
											"end": 9642,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 9406,
											"end": 9669,
											"name": "tag",
											"source": 3,
											"value": "228"
										},
										{
											"begin": 9406,
											"end": 9669,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9685,
											"end": 9701,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 9685,
											"end": 9701,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9685,
											"end": 9701,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 9681,
											"end": 9792,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "230"
										},
										{
											"begin": 9681,
											"end": 9792,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9756,
											"name": "PUSH",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9760,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9765,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9765,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 9764,
											"end": 9765,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 9747,
											"end": 9765,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9765,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9747,
											"end": 9765,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 9681,
											"end": 9792,
											"name": "tag",
											"source": 3,
											"value": "230"
										},
										{
											"begin": 9681,
											"end": 9792,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9811,
											"name": "PUSH",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "DUP10",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9825,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 9804,
											"end": 9820,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "PUSH",
											"source": 3,
											"value": "DDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF"
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 9843,
											"end": 9870,
											"name": "LOG4",
											"source": 3
										},
										{
											"begin": 9890,
											"end": 9894,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 9078,
											"end": 9902,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 9078,
											"end": 9902,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 1858,
											"end": 2024,
											"name": "tag",
											"source": 1,
											"value": "148"
										},
										{
											"begin": 1858,
											"end": 2024,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1766,
											"end": 1772,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1918,
											"end": 1941,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1914,
											"end": 2017,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "162"
										},
										{
											"begin": 1914,
											"end": 2017,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1965,
											"end": 2005,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3006,
											"end": 3197,
											"name": "tag",
											"source": 1,
											"value": "163"
										},
										{
											"begin": 3006,
											"end": 3197,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "PUSH",
											"source": 1,
											"value": "6"
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "SWAP4",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 3149,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 3149,
											"end": 3189,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 3116,
											"end": 3133,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 3099,
											"end": 3105,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3149,
											"end": 3189,
											"name": "PUSH",
											"source": 1,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3149,
											"end": 3189,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3080,
											"end": 3096,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 3080,
											"end": 3096,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 3149,
											"end": 3189,
											"name": "LOG3",
											"source": 1
										},
										{
											"begin": 3069,
											"end": 3197,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3197,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 3006,
											"end": 3197,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 16024,
											"end": 16342,
											"name": "tag",
											"source": 3,
											"value": "190"
										},
										{
											"begin": 16024,
											"end": 16342,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16132,
											"end": 16154,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 16132,
											"end": 16154,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 16128,
											"end": 16221,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "239"
										},
										{
											"begin": 16128,
											"end": 16221,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "B611743"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16178,
											"end": 16209,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 16128,
											"end": 16221,
											"name": "tag",
											"source": 3,
											"value": "239"
										},
										{
											"begin": 16128,
											"end": 16221,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16249,
											"name": "PUSH",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16256,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16266,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "DUP7",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 16231,
											"end": 16277,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 540,
											"end": 581,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 540,
											"end": 581,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "PUSH",
											"source": 3,
											"value": "17307EAB39AB6107E8899845AD3D59BD9653F200F220920489CA2B5937696C31"
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 513,
											"end": 531,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 16293,
											"end": 16334,
											"name": "LOG3",
											"source": 3
										},
										{
											"begin": 16024,
											"end": 16342,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 16024,
											"end": 16342,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 16024,
											"end": 16342,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 16024,
											"end": 16342,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 17382,
											"end": 18181,
											"name": "tag",
											"source": 3,
											"value": "194"
										},
										{
											"begin": 17382,
											"end": 18181,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17499,
											"end": 17513,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 17499,
											"end": 17513,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 17499,
											"end": 17513,
											"name": "EXTCODESIZE",
											"source": 3
										},
										{
											"begin": 17499,
											"end": 17517,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 17495,
											"end": 18174,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "141"
										},
										{
											"begin": 17495,
											"end": 18174,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 17538,
											"end": 17574,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17574,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17574,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17574,
											"name": "PUSH",
											"source": 3,
											"value": "150B7A02"
										},
										{
											"begin": 17538,
											"end": 17574,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 752,
											"end": 762,
											"name": "CALLER",
											"source": 7
										},
										{
											"begin": 752,
											"end": 762,
											"name": "SWAP1",
											"source": 7
										},
										{
											"begin": 17589,
											"end": 17593,
											"name": "DUP9",
											"source": 3
										},
										{
											"begin": 17589,
											"end": 17593,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17595,
											"end": 17602,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 17595,
											"end": 17602,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17604,
											"end": 17608,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 17604,
											"end": 17608,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "246"
										},
										{
											"begin": 17538,
											"end": 17609,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "tag",
											"source": 3,
											"value": "245"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP8",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "GAS",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "CALL",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "248"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "249"
										},
										{
											"begin": 17538,
											"end": 17609,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "tag",
											"source": 3,
											"value": "248"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "tag",
											"source": 3,
											"value": "247"
										},
										{
											"begin": 17538,
											"end": 17609,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "250"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "1F"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "NOT",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "3F"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "RETURNDATASIZE",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "RETURNDATACOPY",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "tag",
											"source": 3,
											"value": "255"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "tag",
											"source": 3,
											"value": "254"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17852,
											"end": 17858,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 17852,
											"end": 17865,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 17869,
											"end": 17870,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 17852,
											"end": 17870,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 17848,
											"end": 18148,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "256"
										},
										{
											"begin": 17848,
											"end": 18148,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32505749"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 17902,
											"end": 17927,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17848,
											"end": 18148,
											"name": "tag",
											"source": 3,
											"value": "256"
										},
										{
											"begin": 17848,
											"end": 18148,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 18098,
											"end": 18104,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 18092,
											"end": 18105,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 18083,
											"end": 18089,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 18079,
											"end": 18081,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 18075,
											"end": 18090,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 18068,
											"end": 18106,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "tag",
											"source": 3,
											"value": "250"
										},
										{
											"begin": 17534,
											"end": 18163,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 17657,
											"end": 17708,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17657,
											"end": 17708,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A85BD01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17657,
											"end": 17708,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 17653,
											"end": 17785,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "260"
										},
										{
											"begin": 17653,
											"end": 17785,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "32505749"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 17740,
											"end": 17765,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 17653,
											"end": 17785,
											"name": "tag",
											"source": 3,
											"value": "260"
										},
										{
											"begin": 17653,
											"end": 17785,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 17610,
											"end": 17800,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17382,
											"end": 18181,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17382,
											"end": 18181,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17382,
											"end": 18181,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17382,
											"end": 18181,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 17382,
											"end": 18181,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 660,
											"end": 1378,
											"name": "tag",
											"source": 8,
											"value": "202"
										},
										{
											"begin": 660,
											"end": 1378,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 716,
											"end": 729,
											"name": "PUSH",
											"source": 8,
											"value": "60"
										},
										{
											"begin": 767,
											"end": 781,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 784,
											"end": 801,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 795,
											"end": 800,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 784,
											"end": 794,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "265"
										},
										{
											"begin": 784,
											"end": 801,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 784,
											"end": 801,
											"name": "tag",
											"source": 8,
											"value": "264"
										},
										{
											"begin": 784,
											"end": 801,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 804,
											"end": 805,
											"name": "PUSH",
											"source": 8,
											"value": "1"
										},
										{
											"begin": 784,
											"end": 805,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 767,
											"end": 805,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 767,
											"end": 805,
											"name": "POP",
											"source": 8
										},
										{
											"begin": 820,
											"end": 840,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 854,
											"end": 860,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "GT",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "268"
										},
										{
											"begin": 843,
											"end": 861,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "tag",
											"source": 8,
											"value": "267"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "MLOAD",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "1F"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "NOT",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "AND",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ISZERO",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP3",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "CALLDATASIZE",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "DUP4",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "CALLDATACOPY",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 843,
											"end": 861,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 843,
											"end": 861,
											"name": "tag",
											"source": 8,
											"value": "269"
										},
										{
											"begin": 843,
											"end": 861,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 820,
											"end": 861,
											"name": "SWAP1",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 985,
											"end": 1013,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 985,
											"end": 1013,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 985,
											"end": 1013,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1001,
											"end": 1003,
											"name": "PUSH",
											"source": 8,
											"value": "20"
										},
										{
											"begin": 985,
											"end": 1013,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": 1042,
											"end": 1332,
											"name": "tag",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 1042,
											"end": 1332,
											"name": "JUMPDEST",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1074,
											"end": 1079,
											"name": "ADD",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "181899199A1A9B1B9C1CB0B131B232B3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1211,
											"end": 1213,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "DUP7",
											"source": 8
										},
										{
											"begin": 1200,
											"end": 1214,
											"name": "MOD",
											"source": 8
										},
										{
											"begin": 1195,
											"end": 1227,
											"name": "BYTE",
											"source": 8
										},
										{
											"begin": 1074,
											"end": 1079,
											"name": "DUP2",
											"source": 8
										},
										{
											"begin": 1182,
											"end": 1228,
											"name": "MSTORE8",
											"source": 8
										},
										{
											"begin": 1274,
											"end": 1276,
											"name": "PUSH",
											"source": 8,
											"value": "A"
										},
										{
											"begin": 1265,
											"end": 1276,
											"name": "DUP6",
											"source": 8
										},
										{
											"begin": 1265,
											"end": 1276,
											"name": "DIV",
											"source": 8
										},
										{
											"begin": 1265,
											"end": 1276,
											"name": "SWAP5",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1295,
											"end": 1316,
											"name": "DUP5",
											"source": 8
										},
										{
											"begin": 1042,
											"end": 1332,
											"name": "PUSH [tag]",
											"source": 8,
											"value": "270"
										},
										{
											"begin": 1295,
											"end": 1316,
											"name": "JUMPI",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1353,
											"end": 1359,
											"name": "SWAP4",
											"source": 8
										},
										{
											"begin": 660,
											"end": 1378,
											"name": "SWAP3",
											"source": 8
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 660,
											"end": 1378,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 8
										},
										{
											"begin": 15127,
											"end": 15805,
											"name": "tag",
											"source": 3,
											"value": "222"
										},
										{
											"begin": 15127,
											"end": 15805,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15289,
											"end": 15298,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 15289,
											"end": 15320,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 15289,
											"end": 15320,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 15289,
											"end": 15320,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15302,
											"end": 15320,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 15302,
											"end": 15320,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15302,
											"end": 15320,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15302,
											"end": 15320,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15289,
											"end": 15320,
											"name": "tag",
											"source": 3,
											"value": "278"
										},
										{
											"begin": 15289,
											"end": 15320,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15285,
											"end": 15756,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15285,
											"end": 15756,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 15285,
											"end": 15756,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 15337,
											"end": 15350,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 15353,
											"end": 15375,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 15367,
											"end": 15374,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 15353,
											"end": 15366,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "127"
										},
										{
											"begin": 15353,
											"end": 15375,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 15353,
											"end": 15375,
											"name": "tag",
											"source": 3,
											"value": "280"
										},
										{
											"begin": 15353,
											"end": 15375,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15337,
											"end": 15375,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15506,
											"end": 15524,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15524,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15524,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15524,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15524,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15524,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15541,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 15506,
											"end": 15541,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15541,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 15537,
											"end": 15541,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15528,
											"end": 15541,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15528,
											"end": 15533,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15528,
											"end": 15541,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15528,
											"end": 15541,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 15528,
											"end": 15541,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15541,
											"name": "tag",
											"source": 3,
											"value": "281"
										},
										{
											"begin": 15506,
											"end": 15541,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "282"
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 15546,
											"end": 15575,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 15563,
											"end": 15568,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 15570,
											"end": 15574,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 15546,
											"end": 15562,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 15546,
											"end": 15575,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 15546,
											"end": 15575,
											"name": "tag",
											"source": 3,
											"value": "283"
										},
										{
											"begin": 15546,
											"end": 15575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15545,
											"end": 15575,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "tag",
											"source": 3,
											"value": "282"
										},
										{
											"begin": 15506,
											"end": 15575,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15502,
											"end": 15646,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15502,
											"end": 15646,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "284"
										},
										{
											"begin": 15502,
											"end": 15646,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9FBF51F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1697,
											"end": 1729,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 1679,
											"end": 1730,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 1652,
											"end": 1670,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 15603,
											"end": 15630,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 1533,
											"end": 1736,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 15502,
											"end": 15646,
											"name": "tag",
											"source": 3,
											"value": "284"
										},
										{
											"begin": 15502,
											"end": 15646,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15666,
											"end": 15675,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 15662,
											"end": 15745,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 15662,
											"end": 15745,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 15662,
											"end": 15745,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 15721,
											"end": 15728,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 15717,
											"end": 15719,
											"name": "DUP6",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15710,
											"end": 15715,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "PUSH",
											"source": 3,
											"value": "8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925"
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15701,
											"end": 15729,
											"name": "LOG4",
											"source": 3
										},
										{
											"begin": 15662,
											"end": 15745,
											"name": "tag",
											"source": 3,
											"value": "286"
										},
										{
											"begin": 15662,
											"end": 15745,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 15322,
											"end": 15756,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 15285,
											"end": 15756,
											"name": "tag",
											"source": 3,
											"value": "279"
										},
										{
											"begin": 15285,
											"end": 15756,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15783,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15792,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "AND",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "OR",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 15768,
											"end": 15797,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 15127,
											"end": 15805,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7285,
											"end": 7661,
											"name": "tag",
											"source": 3,
											"value": "227"
										},
										{
											"begin": 7285,
											"end": 7661,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7398,
											"end": 7436,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 7412,
											"end": 7417,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7419,
											"end": 7426,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7428,
											"end": 7435,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7398,
											"end": 7411,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "289"
										},
										{
											"begin": 7398,
											"end": 7436,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 7398,
											"end": 7436,
											"name": "tag",
											"source": 3,
											"value": "288"
										},
										{
											"begin": 7398,
											"end": 7436,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7393,
											"end": 7654,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "145"
										},
										{
											"begin": 7393,
											"end": 7654,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7457,
											"end": 7476,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 7457,
											"end": 7476,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 7453,
											"end": 7643,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 7453,
											"end": 7643,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "7E273289"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2848,
											"end": 2873,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 2821,
											"end": 2839,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 2821,
											"end": 2839,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7504,
											"end": 7535,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 2702,
											"end": 2879,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7453,
											"end": 7643,
											"name": "tag",
											"source": 3,
											"value": "291"
										},
										{
											"begin": 7453,
											"end": 7643,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "177E802F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 7711,
											"end": 7743,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7711,
											"end": 7743,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 7693,
											"end": 7744,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7760,
											"end": 7778,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 7760,
											"end": 7778,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7760,
											"end": 7778,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7753,
											"end": 7787,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7753,
											"end": 7787,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7753,
											"end": 7787,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7666,
											"end": 7684,
											"name": "PUSH",
											"source": 13,
											"value": "44"
										},
										{
											"begin": 7666,
											"end": 7684,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7583,
											"end": 7627,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "137"
										},
										{
											"begin": 7519,
											"end": 7793,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 12534,
											"end": 13482,
											"name": "tag",
											"source": 11,
											"value": "265"
										},
										{
											"begin": 12534,
											"end": 13482,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12587,
											"end": 12594,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 12587,
											"end": 12594,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12665,
											"end": 12682,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12665,
											"end": 12682,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 12661,
											"end": 12767,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 12661,
											"end": 12767,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "184F03E93FF9F4DAA797ED6E38ED64BF6A1F01"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 12703,
											"end": 12720,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12703,
											"end": 12720,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 12703,
											"end": 12720,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12749,
											"end": 12751,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 12739,
											"end": 12751,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12661,
											"end": 12767,
											"name": "tag",
											"source": 11,
											"value": "297"
										},
										{
											"begin": 12661,
											"end": 12767,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12794,
											"end": 12802,
											"name": "PUSH",
											"source": 11,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 12785,
											"end": 12790,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12785,
											"end": 12802,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 12781,
											"end": 12887,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 12781,
											"end": 12887,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12832,
											"end": 12840,
											"name": "PUSH",
											"source": 11,
											"value": "4EE2D6D415B85ACEF8100000000"
										},
										{
											"begin": 12823,
											"end": 12840,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12823,
											"end": 12840,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 12823,
											"end": 12840,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12869,
											"end": 12871,
											"name": "PUSH",
											"source": 11,
											"value": "20"
										},
										{
											"begin": 12859,
											"end": 12871,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12781,
											"end": 12887,
											"name": "tag",
											"source": 11,
											"value": "300"
										},
										{
											"begin": 12781,
											"end": 12887,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 12914,
											"end": 12922,
											"name": "PUSH",
											"source": 11,
											"value": "2386F26FC10000"
										},
										{
											"begin": 12905,
											"end": 12910,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12905,
											"end": 12922,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 12901,
											"end": 13007,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "303"
										},
										{
											"begin": 12901,
											"end": 13007,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 12952,
											"end": 12960,
											"name": "PUSH",
											"source": 11,
											"value": "2386F26FC10000"
										},
										{
											"begin": 12943,
											"end": 12960,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 12943,
											"end": 12960,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 12943,
											"end": 12960,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12989,
											"end": 12991,
											"name": "PUSH",
											"source": 11,
											"value": "10"
										},
										{
											"begin": 12979,
											"end": 12991,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 12901,
											"end": 13007,
											"name": "tag",
											"source": 11,
											"value": "303"
										},
										{
											"begin": 12901,
											"end": 13007,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13034,
											"end": 13041,
											"name": "PUSH",
											"source": 11,
											"value": "5F5E100"
										},
										{
											"begin": 13025,
											"end": 13030,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13025,
											"end": 13041,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 13021,
											"end": 13124,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 13021,
											"end": 13124,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13071,
											"end": 13078,
											"name": "PUSH",
											"source": 11,
											"value": "5F5E100"
										},
										{
											"begin": 13062,
											"end": 13078,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13062,
											"end": 13078,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 13062,
											"end": 13078,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13107,
											"end": 13108,
											"name": "PUSH",
											"source": 11,
											"value": "8"
										},
										{
											"begin": 13097,
											"end": 13108,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13021,
											"end": 13124,
											"name": "tag",
											"source": 11,
											"value": "306"
										},
										{
											"begin": 13021,
											"end": 13124,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13151,
											"end": 13158,
											"name": "PUSH",
											"source": 11,
											"value": "2710"
										},
										{
											"begin": 13142,
											"end": 13147,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13142,
											"end": 13158,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 13138,
											"end": 13241,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 13138,
											"end": 13241,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13188,
											"end": 13195,
											"name": "PUSH",
											"source": 11,
											"value": "2710"
										},
										{
											"begin": 13179,
											"end": 13195,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13179,
											"end": 13195,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 13179,
											"end": 13195,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13224,
											"end": 13225,
											"name": "PUSH",
											"source": 11,
											"value": "4"
										},
										{
											"begin": 13214,
											"end": 13225,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13138,
											"end": 13241,
											"name": "tag",
											"source": 11,
											"value": "309"
										},
										{
											"begin": 13138,
											"end": 13241,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13268,
											"end": 13275,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 13259,
											"end": 13264,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13259,
											"end": 13275,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 13255,
											"end": 13358,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 13255,
											"end": 13358,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13305,
											"end": 13312,
											"name": "PUSH",
											"source": 11,
											"value": "64"
										},
										{
											"begin": 13296,
											"end": 13312,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13296,
											"end": 13312,
											"name": "DIV",
											"source": 11
										},
										{
											"begin": 13296,
											"end": 13312,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 13341,
											"end": 13342,
											"name": "PUSH",
											"source": 11,
											"value": "2"
										},
										{
											"begin": 13331,
											"end": 13342,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13255,
											"end": 13358,
											"name": "tag",
											"source": 11,
											"value": "312"
										},
										{
											"begin": 13255,
											"end": 13358,
											"name": "JUMPDEST",
											"source": 11
										},
										{
											"begin": 13385,
											"end": 13392,
											"name": "PUSH",
											"source": 11,
											"value": "A"
										},
										{
											"begin": 13376,
											"end": 13381,
											"name": "DUP4",
											"source": 11
										},
										{
											"begin": 13376,
											"end": 13392,
											"name": "LT",
											"source": 11
										},
										{
											"begin": 13372,
											"end": 13440,
											"name": "PUSH [tag]",
											"source": 11,
											"value": "116"
										},
										{
											"begin": 13372,
											"end": 13440,
											"name": "JUMPI",
											"source": 11
										},
										{
											"begin": 13423,
											"end": 13424,
											"name": "PUSH",
											"source": 11,
											"value": "1"
										},
										{
											"begin": 13413,
											"end": 13424,
											"name": "ADD",
											"source": 11
										},
										{
											"begin": 13468,
											"end": 13474,
											"name": "SWAP3",
											"source": 11
										},
										{
											"begin": 12534,
											"end": 13482,
											"name": "SWAP2",
											"source": 11
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 12534,
											"end": 13482,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 11
										},
										{
											"begin": 6565,
											"end": 6841,
											"name": "tag",
											"source": 3,
											"value": "289"
										},
										{
											"begin": 6565,
											"end": 6841,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6668,
											"end": 6672,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6705,
											"end": 6726,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6726,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6726,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6726,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6726,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6726,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6833,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 6705,
											"end": 6833,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6705,
											"end": 6833,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6753,
											"end": 6760,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6744,
											"end": 6760,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6749,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6744,
											"end": 6760,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6760,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6796,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "319"
										},
										{
											"begin": 6744,
											"end": 6796,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6796,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 6764,
											"end": 6796,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "319"
										},
										{
											"begin": 6781,
											"end": 6786,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6788,
											"end": 6795,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6764,
											"end": 6780,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "108"
										},
										{
											"begin": 6764,
											"end": 6796,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 6764,
											"end": 6796,
											"name": "tag",
											"source": 3,
											"value": "319"
										},
										{
											"begin": 6764,
											"end": 6796,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6832,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6832,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 6744,
											"end": 6832,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6186,
											"end": 6193,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6228,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6800,
											"end": 6832,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 6800,
											"end": 6832,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 6800,
											"end": 6832,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 6213,
											"end": 6237,
											"name": "AND",
											"source": 3
										},
										{
											"begin": 6800,
											"end": 6832,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 6744,
											"end": 6832,
											"name": "tag",
											"source": 3,
											"value": "320"
										},
										{
											"begin": 6744,
											"end": 6832,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 6685,
											"end": 6833,
											"name": "SWAP5",
											"source": 3
										},
										{
											"begin": 6565,
											"end": 6841,
											"name": "SWAP4",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6565,
											"end": 6841,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 14,
											"end": 145,
											"name": "tag",
											"source": 13,
											"value": "322"
										},
										{
											"begin": 14,
											"end": 145,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 88,
											"end": 120,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 88,
											"end": 120,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 78,
											"end": 121,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 78,
											"end": 121,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 68,
											"end": 139,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "211"
										},
										{
											"begin": 68,
											"end": 139,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 135,
											"end": 136,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 132,
											"end": 133,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 125,
											"end": 137,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 150,
											"end": 395,
											"name": "tag",
											"source": 13,
											"value": "31"
										},
										{
											"begin": 150,
											"end": 395,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 208,
											"end": 214,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 261,
											"end": 263,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 249,
											"end": 258,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 240,
											"end": 247,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 236,
											"end": 259,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 232,
											"end": 264,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "330"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 277,
											"end": 278,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 274,
											"end": 275,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 267,
											"end": 279,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 229,
											"end": 281,
											"name": "tag",
											"source": 13,
											"value": "330"
										},
										{
											"begin": 229,
											"end": 281,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 316,
											"end": 325,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 303,
											"end": 326,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 359,
											"end": 364,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 335,
											"end": 365,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "322"
										},
										{
											"begin": 335,
											"end": 365,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 592,
											"end": 842,
											"name": "tag",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 592,
											"end": 842,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 677,
											"end": 678,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "tag",
											"source": 13,
											"value": "334"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 701,
											"end": 707,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 698,
											"end": 699,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 695,
											"end": 708,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 687,
											"end": 800,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 687,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "336"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 777,
											"end": 788,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 777,
											"end": 788,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 777,
											"end": 788,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 771,
											"end": 789,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 758,
											"end": 769,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 758,
											"end": 769,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 758,
											"end": 769,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 751,
											"end": 790,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 723,
											"end": 725,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 716,
											"end": 726,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 687,
											"end": 800,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "334"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 687,
											"end": 800,
											"name": "tag",
											"source": 13,
											"value": "336"
										},
										{
											"begin": 687,
											"end": 800,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 834,
											"end": 835,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 816,
											"end": 832,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 816,
											"end": 832,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 809,
											"end": 836,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 592,
											"end": 842,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 847,
											"end": 1118,
											"name": "tag",
											"source": 13,
											"value": "324"
										},
										{
											"begin": 847,
											"end": 1118,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 889,
											"end": 892,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 927,
											"end": 932,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 921,
											"end": 933,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 954,
											"end": 960,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 949,
											"end": 952,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 942,
											"end": 961,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "338"
										},
										{
											"begin": 1039,
											"end": 1045,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1032,
											"end": 1036,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1027,
											"end": 1030,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1023,
											"end": 1037,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1016,
											"end": 1020,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1009,
											"end": 1014,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 1005,
											"end": 1021,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 970,
											"end": 1046,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "tag",
											"source": 13,
											"value": "338"
										},
										{
											"begin": 970,
											"end": 1046,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1100,
											"end": 1102,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 1079,
											"end": 1094,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 1075,
											"end": 1104,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 1066,
											"end": 1105,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1107,
											"end": 1111,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1062,
											"end": 1112,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 847,
											"end": 1118,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 847,
											"end": 1118,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1123,
											"end": 1343,
											"name": "tag",
											"source": 13,
											"value": "38"
										},
										{
											"begin": 1123,
											"end": 1343,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1272,
											"end": 1274,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1261,
											"end": 1270,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1254,
											"end": 1275,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 1235,
											"end": 1239,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1292,
											"end": 1337,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 1333,
											"end": 1335,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1322,
											"end": 1331,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 1318,
											"end": 1336,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 1310,
											"end": 1316,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1292,
											"end": 1337,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "324"
										},
										{
											"begin": 1292,
											"end": 1337,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1348,
											"end": 1528,
											"name": "tag",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 1348,
											"end": 1528,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1407,
											"end": 1413,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1460,
											"end": 1462,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 1448,
											"end": 1457,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 1439,
											"end": 1446,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 1435,
											"end": 1458,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 1431,
											"end": 1463,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "342"
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1476,
											"end": 1477,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1473,
											"end": 1474,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1466,
											"end": 1478,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "tag",
											"source": 13,
											"value": "342"
										},
										{
											"begin": 1428,
											"end": 1480,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 1499,
											"end": 1522,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1348,
											"end": 1528,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1348,
											"end": 1528,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "tag",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1809,
											"end": 1829,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1809,
											"end": 1829,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1858,
											"end": 1889,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1858,
											"end": 1889,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 1848,
											"end": 1890,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 1848,
											"end": 1890,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "345"
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 1904,
											"end": 1905,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1901,
											"end": 1902,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 1894,
											"end": 1906,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "tag",
											"source": 13,
											"value": "345"
										},
										{
											"begin": 1838,
											"end": 1908,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1914,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 1741,
											"end": 1914,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 1919,
											"end": 2173,
											"name": "tag",
											"source": 13,
											"value": "47"
										},
										{
											"begin": 1919,
											"end": 2173,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 1987,
											"end": 1993,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 1995,
											"end": 2001,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2048,
											"end": 2050,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2036,
											"end": 2045,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2027,
											"end": 2034,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2023,
											"end": 2046,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2019,
											"end": 2051,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2064,
											"end": 2065,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2061,
											"end": 2062,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2054,
											"end": 2066,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "tag",
											"source": 13,
											"value": "347"
										},
										{
											"begin": 2016,
											"end": 2068,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "348"
										},
										{
											"begin": 2106,
											"end": 2115,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 2087,
											"end": 2116,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "tag",
											"source": 13,
											"value": "348"
										},
										{
											"begin": 2087,
											"end": 2116,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2077,
											"end": 2116,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 2163,
											"end": 2165,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 2148,
											"end": 2166,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2135,
											"end": 2167,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1919,
											"end": 2173,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "tag",
											"source": 13,
											"value": "51"
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2255,
											"end": 2261,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2263,
											"end": 2269,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2271,
											"end": 2277,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2324,
											"end": 2326,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 2312,
											"end": 2321,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2303,
											"end": 2310,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 2299,
											"end": 2322,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2295,
											"end": 2327,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2292,
											"end": 2344,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2292,
											"end": 2344,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "350"
										},
										{
											"begin": 2292,
											"end": 2344,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2340,
											"end": 2341,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2337,
											"end": 2338,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2330,
											"end": 2342,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2292,
											"end": 2344,
											"name": "tag",
											"source": 13,
											"value": "350"
										},
										{
											"begin": 2292,
											"end": 2344,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2363,
											"end": 2392,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "351"
										},
										{
											"begin": 2382,
											"end": 2391,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2363,
											"end": 2392,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 2363,
											"end": 2392,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2363,
											"end": 2392,
											"name": "tag",
											"source": 13,
											"value": "351"
										},
										{
											"begin": 2363,
											"end": 2392,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2392,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2353,
											"end": 2392,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "352"
										},
										{
											"begin": 2445,
											"end": 2447,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2434,
											"end": 2443,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 2430,
											"end": 2448,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2449,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 2411,
											"end": 2449,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2411,
											"end": 2449,
											"name": "tag",
											"source": 13,
											"value": "352"
										},
										{
											"begin": 2411,
											"end": 2449,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2401,
											"end": 2449,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2401,
											"end": 2449,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2496,
											"end": 2498,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 2485,
											"end": 2494,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2481,
											"end": 2499,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 2468,
											"end": 2500,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 2458,
											"end": 2500,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 2458,
											"end": 2500,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2178,
											"end": 2506,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2511,
											"end": 2697,
											"name": "tag",
											"source": 13,
											"value": "66"
										},
										{
											"begin": 2511,
											"end": 2697,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2570,
											"end": 2576,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2623,
											"end": 2625,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 2611,
											"end": 2620,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2602,
											"end": 2609,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 2598,
											"end": 2621,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 2594,
											"end": 2626,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 2591,
											"end": 2643,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 2591,
											"end": 2643,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "354"
										},
										{
											"begin": 2591,
											"end": 2643,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 2639,
											"end": 2640,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 2636,
											"end": 2637,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 2629,
											"end": 2641,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 2591,
											"end": 2643,
											"name": "tag",
											"source": 13,
											"value": "354"
										},
										{
											"begin": 2591,
											"end": 2643,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 2662,
											"end": 2691,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 2681,
											"end": 2690,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 2662,
											"end": 2691,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 2662,
											"end": 2691,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 2884,
											"end": 3476,
											"name": "tag",
											"source": 13,
											"value": "75"
										},
										{
											"begin": 2884,
											"end": 3476,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3065,
											"end": 3067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3047,
											"end": 3068,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3047,
											"end": 3068,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3047,
											"end": 3068,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3108,
											"end": 3121,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3108,
											"end": 3121,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3104,
											"end": 3143,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 3084,
											"end": 3102,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3084,
											"end": 3102,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3084,
											"end": 3102,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3077,
											"end": 3144,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3179,
											"end": 3194,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3179,
											"end": 3194,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3173,
											"end": 3195,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3231,
											"end": 3235,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3226,
											"end": 3228,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3211,
											"end": 3229,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3211,
											"end": 3229,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3204,
											"end": 3236,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 3259,
											"end": 3311,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "358"
										},
										{
											"begin": 3131,
											"end": 3134,
											"name": "PUSH",
											"source": 13,
											"value": "A0"
										},
										{
											"begin": 3291,
											"end": 3310,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3291,
											"end": 3310,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3173,
											"end": 3195,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 3259,
											"end": 3311,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "324"
										},
										{
											"begin": 3259,
											"end": 3311,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3259,
											"end": 3311,
											"name": "tag",
											"source": 13,
											"value": "358"
										},
										{
											"begin": 3259,
											"end": 3311,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3245,
											"end": 3311,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3245,
											"end": 3311,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3365,
											"end": 3367,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3357,
											"end": 3363,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3353,
											"end": 3368,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3347,
											"end": 3369,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3342,
											"end": 3344,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3331,
											"end": 3340,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3327,
											"end": 3345,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3320,
											"end": 3370,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3440,
											"end": 3442,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 3432,
											"end": 3438,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3428,
											"end": 3443,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3422,
											"end": 3444,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 3415,
											"end": 3445,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3408,
											"end": 3446,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3401,
											"end": 3405,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 3390,
											"end": 3399,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 3386,
											"end": 3406,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3379,
											"end": 3447,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3464,
											"end": 3470,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3470,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3470,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3456,
											"end": 3470,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2884,
											"end": 3476,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 2884,
											"end": 3476,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 2884,
											"end": 3476,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2884,
											"end": 3476,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 2884,
											"end": 3476,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "tag",
											"source": 13,
											"value": "95"
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3546,
											"end": 3552,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3554,
											"end": 3560,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3607,
											"end": 3609,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 3595,
											"end": 3604,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3586,
											"end": 3593,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 3582,
											"end": 3605,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 3578,
											"end": 3610,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 3575,
											"end": 3627,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3575,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "360"
										},
										{
											"begin": 3575,
											"end": 3627,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3623,
											"end": 3624,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3620,
											"end": 3621,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3613,
											"end": 3625,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3575,
											"end": 3627,
											"name": "tag",
											"source": 13,
											"value": "360"
										},
										{
											"begin": 3575,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3646,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "361"
										},
										{
											"begin": 3665,
											"end": 3674,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3646,
											"end": 3675,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 3646,
											"end": 3675,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3646,
											"end": 3675,
											"name": "tag",
											"source": 13,
											"value": "361"
										},
										{
											"begin": 3646,
											"end": 3675,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3636,
											"end": 3675,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3636,
											"end": 3675,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3725,
											"end": 3727,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 3714,
											"end": 3723,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 3710,
											"end": 3728,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 3697,
											"end": 3729,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 3772,
											"end": 3777,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3765,
											"end": 3778,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3758,
											"end": 3779,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 3751,
											"end": 3756,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 3748,
											"end": 3780,
											"name": "EQ",
											"source": 13
										},
										{
											"begin": 3738,
											"end": 3798,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "362"
										},
										{
											"begin": 3738,
											"end": 3798,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 3794,
											"end": 3795,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3791,
											"end": 3792,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3784,
											"end": 3796,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3738,
											"end": 3798,
											"name": "tag",
											"source": 13,
											"value": "362"
										},
										{
											"begin": 3738,
											"end": 3798,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3817,
											"end": 3822,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 3807,
											"end": 3822,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3807,
											"end": 3822,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3807,
											"end": 3822,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3481,
											"end": 3828,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "tag",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 3833,
											"end": 3960,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 3894,
											"end": 3904,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 3889,
											"end": 3892,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 3885,
											"end": 3905,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 3882,
											"end": 3883,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3875,
											"end": 3906,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3925,
											"end": 3929,
											"name": "PUSH",
											"source": 13,
											"value": "41"
										},
										{
											"begin": 3922,
											"end": 3923,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 3915,
											"end": 3930,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 3949,
											"end": 3953,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 3946,
											"end": 3947,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 3939,
											"end": 3954,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "tag",
											"source": 13,
											"value": "99"
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4060,
											"end": 4066,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4068,
											"end": 4074,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4076,
											"end": 4082,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4084,
											"end": 4090,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4137,
											"end": 4140,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 4125,
											"end": 4134,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4116,
											"end": 4123,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4112,
											"end": 4135,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 4108,
											"end": 4141,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4105,
											"end": 4158,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4105,
											"end": 4158,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "365"
										},
										{
											"begin": 4105,
											"end": 4158,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4154,
											"end": 4155,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4151,
											"end": 4152,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4144,
											"end": 4156,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4105,
											"end": 4158,
											"name": "tag",
											"source": 13,
											"value": "365"
										},
										{
											"begin": 4105,
											"end": 4158,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4177,
											"end": 4206,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "366"
										},
										{
											"begin": 4196,
											"end": 4205,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4177,
											"end": 4206,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 4177,
											"end": 4206,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4177,
											"end": 4206,
											"name": "tag",
											"source": 13,
											"value": "366"
										},
										{
											"begin": 4177,
											"end": 4206,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4167,
											"end": 4206,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": 4167,
											"end": 4206,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4225,
											"end": 4263,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "367"
										},
										{
											"begin": 4259,
											"end": 4261,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4248,
											"end": 4257,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 4244,
											"end": 4262,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4225,
											"end": 4263,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 4225,
											"end": 4263,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4225,
											"end": 4263,
											"name": "tag",
											"source": 13,
											"value": "367"
										},
										{
											"begin": 4225,
											"end": 4263,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4215,
											"end": 4263,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 4215,
											"end": 4263,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4310,
											"end": 4312,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4299,
											"end": 4308,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4295,
											"end": 4313,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4282,
											"end": 4314,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4272,
											"end": 4314,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4272,
											"end": 4314,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4365,
											"end": 4367,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 4354,
											"end": 4363,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 4350,
											"end": 4368,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4337,
											"end": 4369,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4388,
											"end": 4406,
											"name": "PUSH",
											"source": 13,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4429,
											"end": 4431,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4421,
											"end": 4427,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4418,
											"end": 4432,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4415,
											"end": 4449,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4415,
											"end": 4449,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "368"
										},
										{
											"begin": 4415,
											"end": 4449,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4445,
											"end": 4446,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4442,
											"end": 4443,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4435,
											"end": 4447,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4415,
											"end": 4449,
											"name": "tag",
											"source": 13,
											"value": "368"
										},
										{
											"begin": 4415,
											"end": 4449,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4483,
											"end": 4489,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4472,
											"end": 4481,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4468,
											"end": 4490,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4458,
											"end": 4490,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 4458,
											"end": 4490,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 4528,
											"end": 4535,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4521,
											"end": 4525,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4517,
											"end": 4519,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4513,
											"end": 4526,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4509,
											"end": 4536,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 4499,
											"end": 4554,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "369"
										},
										{
											"begin": 4499,
											"end": 4554,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4550,
											"end": 4551,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4547,
											"end": 4548,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4540,
											"end": 4552,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4499,
											"end": 4554,
											"name": "tag",
											"source": 13,
											"value": "369"
										},
										{
											"begin": 4499,
											"end": 4554,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4586,
											"end": 4588,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4573,
											"end": 4589,
											"name": "CALLDATALOAD",
											"source": 13
										},
										{
											"begin": 4608,
											"end": 4610,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4604,
											"end": 4606,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4601,
											"end": 4611,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4598,
											"end": 4634,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4598,
											"end": 4634,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "371"
										},
										{
											"begin": 4598,
											"end": 4634,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4614,
											"end": 4632,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "371"
										},
										{
											"begin": 4614,
											"end": 4632,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 4614,
											"end": 4632,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4614,
											"end": 4632,
											"name": "tag",
											"source": 13,
											"value": "371"
										},
										{
											"begin": 4614,
											"end": 4632,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4689,
											"end": 4691,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4683,
											"end": 4692,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 4657,
											"end": 4659,
											"name": "PUSH",
											"source": 13,
											"value": "1F"
										},
										{
											"begin": 4743,
											"end": 4756,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4743,
											"end": 4756,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4739,
											"end": 4761,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4739,
											"end": 4761,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4739,
											"end": 4761,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4763,
											"end": 4765,
											"name": "PUSH",
											"source": 13,
											"value": "3F"
										},
										{
											"begin": 4735,
											"end": 4766,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4731,
											"end": 4771,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 4719,
											"end": 4772,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4719,
											"end": 4772,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4719,
											"end": 4772,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 4787,
											"end": 4805,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4787,
											"end": 4805,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4787,
											"end": 4805,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4807,
											"end": 4829,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4807,
											"end": 4829,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4807,
											"end": 4829,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 4784,
											"end": 4830,
											"name": "OR",
											"source": 13
										},
										{
											"begin": 4781,
											"end": 4853,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4781,
											"end": 4853,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "373"
										},
										{
											"begin": 4781,
											"end": 4853,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "373"
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "268"
										},
										{
											"begin": 4833,
											"end": 4851,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "tag",
											"source": 13,
											"value": "373"
										},
										{
											"begin": 4833,
											"end": 4851,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 4873,
											"end": 4883,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4869,
											"end": 4871,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 4862,
											"end": 4884,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4908,
											"end": 4910,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 4900,
											"end": 4906,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 4893,
											"end": 4911,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 4948,
											"end": 4955,
											"name": "DUP11",
											"source": 13
										},
										{
											"begin": 4943,
											"end": 4945,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4938,
											"end": 4940,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 4934,
											"end": 4936,
											"name": "DUP8",
											"source": 13
										},
										{
											"begin": 4930,
											"end": 4941,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4926,
											"end": 4946,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4923,
											"end": 4956,
											"name": "GT",
											"source": 13
										},
										{
											"begin": 4920,
											"end": 4973,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 4920,
											"end": 4973,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "374"
										},
										{
											"begin": 4920,
											"end": 4973,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 4969,
											"end": 4970,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 4966,
											"end": 4967,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 4959,
											"end": 4971,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 4920,
											"end": 4973,
											"name": "tag",
											"source": 13,
											"value": "374"
										},
										{
											"begin": 4920,
											"end": 4973,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5025,
											"end": 5027,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5020,
											"end": 5022,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5016,
											"end": 5018,
											"name": "DUP7",
											"source": 13
										},
										{
											"begin": 5012,
											"end": 5023,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5007,
											"end": 5009,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 4999,
											"end": 5005,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 4995,
											"end": 5010,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 4982,
											"end": 5028,
											"name": "CALLDATACOPY",
											"source": 13
										},
										{
											"begin": 5070,
											"end": 5071,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5065,
											"end": 5067,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5060,
											"end": 5062,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5052,
											"end": 5058,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5048,
											"end": 5063,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5044,
											"end": 5068,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5037,
											"end": 5072,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5091,
											"end": 5097,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5081,
											"end": 5097,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 3965,
											"end": 5103,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "tag",
											"source": 13,
											"value": "107"
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5176,
											"end": 5182,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5184,
											"end": 5190,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5237,
											"end": 5239,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 5225,
											"end": 5234,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5216,
											"end": 5223,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 5212,
											"end": 5235,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5208,
											"end": 5240,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5257,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5257,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "376"
										},
										{
											"begin": 5205,
											"end": 5257,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5253,
											"end": 5254,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5250,
											"end": 5251,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5243,
											"end": 5255,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 5205,
											"end": 5257,
											"name": "tag",
											"source": 13,
											"value": "376"
										},
										{
											"begin": 5205,
											"end": 5257,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5276,
											"end": 5305,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "377"
										},
										{
											"begin": 5295,
											"end": 5304,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 5276,
											"end": 5305,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 5276,
											"end": 5305,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5276,
											"end": 5305,
											"name": "tag",
											"source": 13,
											"value": "377"
										},
										{
											"begin": 5276,
											"end": 5305,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5266,
											"end": 5305,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5266,
											"end": 5305,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5324,
											"end": 5362,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "378"
										},
										{
											"begin": 5358,
											"end": 5360,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5347,
											"end": 5356,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 5343,
											"end": 5361,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 5324,
											"end": 5362,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "325"
										},
										{
											"begin": 5324,
											"end": 5362,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5324,
											"end": 5362,
											"name": "tag",
											"source": 13,
											"value": "378"
										},
										{
											"begin": 5324,
											"end": 5362,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5314,
											"end": 5362,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5314,
											"end": 5362,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "SWAP3",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5108,
											"end": 5368,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 5373,
											"end": 5753,
											"name": "tag",
											"source": 13,
											"value": "120"
										},
										{
											"begin": 5373,
											"end": 5753,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5452,
											"end": 5453,
											"name": "PUSH",
											"source": 13,
											"value": "1"
										},
										{
											"begin": 5448,
											"end": 5460,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5448,
											"end": 5460,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5448,
											"end": 5460,
											"name": "SHR",
											"source": 13
										},
										{
											"begin": 5448,
											"end": 5460,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5495,
											"end": 5507,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5495,
											"end": 5507,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5495,
											"end": 5507,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 5516,
											"end": 5577,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 5516,
											"end": 5577,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5570,
											"end": 5574,
											"name": "PUSH",
											"source": 13,
											"value": "7F"
										},
										{
											"begin": 5562,
											"end": 5568,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5558,
											"end": 5575,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5575,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5548,
											"end": 5575,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5516,
											"end": 5577,
											"name": "tag",
											"source": 13,
											"value": "380"
										},
										{
											"begin": 5516,
											"end": 5577,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5623,
											"end": 5625,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 5615,
											"end": 5621,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 5612,
											"end": 5626,
											"name": "LT",
											"source": 13
										},
										{
											"begin": 5592,
											"end": 5610,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 5589,
											"end": 5627,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 5586,
											"end": 5747,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 5586,
											"end": 5747,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 5669,
											"end": 5679,
											"name": "PUSH",
											"source": 13,
											"value": "4E487B71"
										},
										{
											"begin": 5664,
											"end": 5667,
											"name": "PUSH",
											"source": 13,
											"value": "E0"
										},
										{
											"begin": 5660,
											"end": 5680,
											"name": "SHL",
											"source": 13
										},
										{
											"begin": 5657,
											"end": 5658,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5650,
											"end": 5681,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5704,
											"end": 5708,
											"name": "PUSH",
											"source": 13,
											"value": "22"
										},
										{
											"begin": 5701,
											"end": 5702,
											"name": "PUSH",
											"source": 13,
											"value": "4"
										},
										{
											"begin": 5694,
											"end": 5709,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 5732,
											"end": 5736,
											"name": "PUSH",
											"source": 13,
											"value": "24"
										},
										{
											"begin": 5729,
											"end": 5730,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 5722,
											"end": 5737,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 5586,
											"end": 5747,
											"name": "tag",
											"source": 13,
											"value": "381"
										},
										{
											"begin": 5586,
											"end": 5747,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 5586,
											"end": 5747,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5373,
											"end": 5753,
											"name": "SWAP2",
											"source": 13
										},
										{
											"begin": 5373,
											"end": 5753,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 5373,
											"end": 5753,
											"name": "POP",
											"source": 13
										},
										{
											"begin": 5373,
											"end": 5753,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6138,
											"end": 6634,
											"name": "tag",
											"source": 13,
											"value": "204"
										},
										{
											"begin": 6138,
											"end": 6634,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6317,
											"end": 6320,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6355,
											"end": 6361,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6349,
											"end": 6362,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6371,
											"end": 6437,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 6430,
											"end": 6436,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6425,
											"end": 6428,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6418,
											"end": 6422,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6410,
											"end": 6416,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 6406,
											"end": 6423,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6371,
											"end": 6437,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 6371,
											"end": 6437,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6371,
											"end": 6437,
											"name": "tag",
											"source": 13,
											"value": "384"
										},
										{
											"begin": 6371,
											"end": 6437,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6500,
											"end": 6513,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6500,
											"end": 6513,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 6459,
											"end": 6475,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6459,
											"end": 6475,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6459,
											"end": 6475,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6459,
											"end": 6475,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6522,
											"end": 6592,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "385"
										},
										{
											"begin": 6500,
											"end": 6513,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6459,
											"end": 6475,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6569,
											"end": 6573,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6557,
											"end": 6574,
											"name": "DUP9",
											"source": 13
										},
										{
											"begin": 6557,
											"end": 6574,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6522,
											"end": 6592,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "323"
										},
										{
											"begin": 6522,
											"end": 6592,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6522,
											"end": 6592,
											"name": "tag",
											"source": 13,
											"value": "385"
										},
										{
											"begin": 6522,
											"end": 6592,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 6608,
											"end": 6628,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6608,
											"end": 6628,
											"name": "SWAP5",
											"source": 13
										},
										{
											"begin": 6138,
											"end": 6634,
											"name": "SWAP4",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6138,
											"end": 6634,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 6639,
											"end": 7128,
											"name": "tag",
											"source": 13,
											"value": "246"
										},
										{
											"begin": 6639,
											"end": 7128,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 6908,
											"end": 6923,
											"name": "DUP6",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 6923,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6908,
											"end": 6923,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 6924,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6890,
											"end": 6924,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6960,
											"end": 6975,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 6960,
											"end": 6975,
											"name": "AND",
											"source": 13
										},
										{
											"begin": 6955,
											"end": 6957,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 6940,
											"end": 6958,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6933,
											"end": 6976,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7007,
											"end": 7009,
											"name": "PUSH",
											"source": 13,
											"value": "40"
										},
										{
											"begin": 6992,
											"end": 7010,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 6992,
											"end": 7010,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 6985,
											"end": 7019,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 6985,
											"end": 7019,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 6985,
											"end": 7019,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 7055,
											"end": 7058,
											"name": "PUSH",
											"source": 13,
											"value": "80"
										},
										{
											"begin": 7050,
											"end": 7052,
											"name": "PUSH",
											"source": 13,
											"value": "60"
										},
										{
											"begin": 7035,
											"end": 7053,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7035,
											"end": 7053,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7028,
											"end": 7059,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7028,
											"end": 7059,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7028,
											"end": 7059,
											"name": "MSTORE",
											"source": 13
										},
										{
											"begin": 6833,
											"end": 6837,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 6833,
											"end": 6837,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7076,
											"end": 7122,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "387"
										},
										{
											"begin": 7076,
											"end": 7122,
											"name": "SWAP1",
											"source": 13
										},
										{
											"begin": 7102,
											"end": 7121,
											"name": "DUP4",
											"source": 13
										},
										{
											"begin": 7102,
											"end": 7121,
											"name": "ADD",
											"source": 13
										},
										{
											"begin": 7094,
											"end": 7100,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7076,
											"end": 7122,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "324"
										},
										{
											"begin": 7076,
											"end": 7122,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7076,
											"end": 7122,
											"name": "tag",
											"source": 13,
											"value": "387"
										},
										{
											"begin": 7076,
											"end": 7122,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7068,
											"end": 7122,
											"name": "SWAP7",
											"source": 13
										},
										{
											"begin": 6639,
											"end": 7128,
											"name": "SWAP6",
											"source": 13
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 6639,
											"end": 7128,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 13
										},
										{
											"begin": 7133,
											"end": 7382,
											"name": "tag",
											"source": 13,
											"value": "249"
										},
										{
											"begin": 7133,
											"end": 7382,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7202,
											"end": 7208,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7255,
											"end": 7257,
											"name": "PUSH",
											"source": 13,
											"value": "20"
										},
										{
											"begin": 7243,
											"end": 7252,
											"name": "DUP3",
											"source": 13
										},
										{
											"begin": 7234,
											"end": 7241,
											"name": "DUP5",
											"source": 13
										},
										{
											"begin": 7230,
											"end": 7253,
											"name": "SUB",
											"source": 13
										},
										{
											"begin": 7226,
											"end": 7258,
											"name": "SLT",
											"source": 13
										},
										{
											"begin": 7223,
											"end": 7275,
											"name": "ISZERO",
											"source": 13
										},
										{
											"begin": 7223,
											"end": 7275,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "389"
										},
										{
											"begin": 7223,
											"end": 7275,
											"name": "JUMPI",
											"source": 13
										},
										{
											"begin": 7271,
											"end": 7272,
											"name": "PUSH",
											"source": 13,
											"value": "0"
										},
										{
											"begin": 7268,
											"end": 7269,
											"name": "DUP1",
											"source": 13
										},
										{
											"begin": 7261,
											"end": 7273,
											"name": "REVERT",
											"source": 13
										},
										{
											"begin": 7223,
											"end": 7275,
											"name": "tag",
											"source": 13,
											"value": "389"
										},
										{
											"begin": 7223,
											"end": 7275,
											"name": "JUMPDEST",
											"source": 13
										},
										{
											"begin": 7303,
											"end": 7312,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7297,
											"end": 7313,
											"name": "MLOAD",
											"source": 13
										},
										{
											"begin": 7322,
											"end": 7352,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "200"
										},
										{
											"begin": 7346,
											"end": 7351,
											"name": "DUP2",
											"source": 13
										},
										{
											"begin": 7322,
											"end": 7352,
											"name": "PUSH [tag]",
											"source": 13,
											"value": "322"
										},
										{
											"begin": 7322,
											"end": 7352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 13
										}
									]
								}
							},
							"sourceList": [
								"PictureToken.sol",
								"openzeppelin-contracts/contracts/access/Ownable.sol",
								"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
								"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"openzeppelin-contracts/contracts/utils/Context.sol",
								"openzeppelin-contracts/contracts/utils/Strings.sol",
								"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
								"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"openzeppelin-contracts/contracts/utils/math/Math.sol",
								"openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"getPrice()": "98d5fdca",
							"getSinglePictureToken()": "854cbb4a",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"notPutOnSale()": "8c2a5bc8",
							"owner()": "8da5cb5b",
							"ownerOf(uint256)": "6352211e",
							"price()": "a035b1fe",
							"purchase()": "64edfbf0",
							"putOnSale()": "5987cc19",
							"renounceOwnership()": "715018a6",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"setPrice(uint256)": "91b7f5ed",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_image\",\"type\":\"string\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSinglePictureToken\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"ownerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"image\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"onSale\",\"type\":\"bool\"}],\"internalType\":\"struct tokenData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"notPutOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"putOnSale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"PictureToken.sol\":\"PictureToken\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"PictureToken.sol\":{\"keccak256\":\"0x3ed0d4002926ea3efa431264bc25fb9a16a24413a0e962f8f0923e57596c8600\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b16ba72899dce8d184d9453fd94549932415d63ef56ef4511bfb7f525799301e\",\"dweb:/ipfs/QmaztfhAYFCMpz3AtJAxpNeNwWgKM29pHqBRmjmfTTNpFp\"]},\"openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xe889e9f6b8469155c967f403ad7508eaa66af8cad1cb9a003536a8e4f281d348\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6e32c81c8d84199eda0de40d33bb77c7acbb482e3f545d5cfba8195af0a88e0\",\"dweb:/ipfs/Qmaf1WAinzjYWGNxRzCTmn2QABFWS912HwC8eiD7cyTgis\"]},\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]},\"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xdde6917a300a3e655ca443b76266ce89145a7c9eb6a70298bf8aab4965bc40fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39416f61b555df983b22c85803cbe7606fb7f2004b4dbbd51995c7dc552a7137\",\"dweb:/ipfs/QmUG2ghvGz4iDLrvaUfEjcjn8qbvfcoi5AFpGW9t4cupGc\"]},\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb8745c44e53e2a74e9a5d97de4f91d065f1e05cc3e624639485e7b29fb73b728\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d9aba69c37eedb96c529c03c006e8c7f9ea3c2cc11635b21aedc0a65810cfd\",\"dweb:/ipfs/QmUDZnzN5VAmQY6w2Vr6Uef6xNT5jFM9Grb4MUkECXWzjz\"]},\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa324c22ef2aaa7b7cd4db27007e7c6fc2d7877cc6381510fca9c83d72bb9ab3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://acb98725687905d9183432eeaa3f7dca110b258ea403fd07b01fcc32ddb16d04\",\"dweb:/ipfs/QmaWdFfHxZdggD16Hu3CgJ3dSGvQzsmovZBW3rorYh6S5N\"]},\"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x62e9e9e364dcd065b87229e727198f2ee8592c3c22010ead00f66cc370b6db43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fda109e10a60e3ad248094787cffc42e12579215e30536d26c38cca922a951de\",\"dweb:/ipfs/QmdAZxHrJpLj9nUvv61CV1QyCP28vvgJCva4e5949DqFNT\"]},\"openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xa98ceb8734832ea51ee2ea6bafded757acaba7d232143ac9e50565760f7cf366\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51854d853bb0a17e1d669a9f33699986d13ff42425c1e2eeea2ffc9190e6e42a\",\"dweb:/ipfs/QmWwqcGd2pWwnBcKwBKC7CWYsSvtWUkZ1qJTSQ3fhednfA\"]},\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x5e93dc51cc1dd89d1ae31658302b93f7adef0eee525eafbc563195afc9345e39\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fd926ba3c959be85a706285338cc7dde03af8ecb4e2a936f3bac18441abfe97\",\"dweb:/ipfs/QmaSdTPxbPPscAxiNFqExm7dTuXp4VuBsiiuGcuk4euJie\"]},\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9\",\"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N\"]},\"openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 459,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 461,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 465,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_owners",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 469,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 473,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 479,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							},
							{
								"astId": 150,
								"contract": "PictureToken.sol:PictureToken",
								"label": "_owner",
								"offset": 0,
								"slot": "6",
								"type": "t_address"
							},
							{
								"astId": 9,
								"contract": "PictureToken.sol:PictureToken",
								"label": "image",
								"offset": 0,
								"slot": "7",
								"type": "t_string_storage"
							},
							{
								"astId": 11,
								"contract": "PictureToken.sol:PictureToken",
								"label": "price",
								"offset": 0,
								"slot": "8",
								"type": "t_uint256"
							},
							{
								"astId": 13,
								"contract": "PictureToken.sol:PictureToken",
								"label": "onSale",
								"offset": 0,
								"slot": "9",
								"type": "t_bool"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/access/Ownable.sol": {
				"Ownable": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"constructor": {
								"details": "Initializes the contract setting the address provided by the deployer as the initial owner."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Initializes the contract setting the address provided by the deployer as the initial owner.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/access/Ownable.sol\":\"Ownable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/access/Ownable.sol\":{\"keccak256\":\"0xe889e9f6b8469155c967f403ad7508eaa66af8cad1cb9a003536a8e4f281d348\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e6e32c81c8d84199eda0de40d33bb77c7acbb482e3f545d5cfba8195af0a88e0\",\"dweb:/ipfs/Qmaf1WAinzjYWGNxRzCTmn2QABFWS912HwC8eiD7cyTgis\"]},\"openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xa98ceb8734832ea51ee2ea6bafded757acaba7d232143ac9e50565760f7cf366\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51854d853bb0a17e1d669a9f33699986d13ff42425c1e2eeea2ffc9190e6e42a\",\"dweb:/ipfs/QmWwqcGd2pWwnBcKwBKC7CWYsSvtWUkZ1qJTSQ3fhednfA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 150,
								"contract": "openzeppelin-contracts/contracts/access/Ownable.sol:Ownable",
								"label": "_owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"IERC1155Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC1155InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "idsLength",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "valuesLength",
									"type": "uint256"
								}
							],
							"name": "ERC1155InvalidArrayLength",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC1155InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC1155MissingApprovalForAll",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.",
						"errors": {
							"ERC1155InsufficientBalance(address,uint256,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC1155InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC1155InvalidArrayLength(uint256,uint256)": [
								{
									"details": "Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.",
									"params": {
										"idsLength": "Length of the array of token identifiers",
										"valuesLength": "Length of the array of token amounts"
									}
								}
							],
							"ERC1155InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC1155InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC1155InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC1155MissingApprovalForAll(address,address)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"owner": "Address of the current owner of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC1155InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"idsLength\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"valuesLength\",\"type\":\"uint256\"}],\"name\":\"ERC1155InvalidArrayLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC1155InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC1155MissingApprovalForAll\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\",\"errors\":{\"ERC1155InsufficientBalance(address,uint256,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC1155InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC1155InvalidArrayLength(uint256,uint256)\":[{\"details\":\"Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.\",\"params\":{\"idsLength\":\"Length of the array of token identifiers\",\"valuesLength\":\"Length of the array of token amounts\"}}],\"ERC1155InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC1155InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC1155InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC1155MissingApprovalForAll(address,address)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"owner\":\"Address of the current owner of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC1155Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "allowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "needed",
									"type": "uint256"
								}
							],
							"name": "ERC20InsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC20InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "ERC20InvalidSpender",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.",
						"errors": {
							"ERC20InsufficientAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
									"params": {
										"allowance": "Amount of tokens a `spender` is allowed to operate with.",
										"needed": "Minimum amount required to perform a transfer.",
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC20InsufficientBalance(address,uint256,uint256)": [
								{
									"details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
									"params": {
										"balance": "Current balance for the interacting account.",
										"needed": "Minimum amount required to perform a transfer.",
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC20InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC20InvalidSpender(address)": [
								{
									"details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
									"params": {
										"spender": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\",\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC20Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC721Errors": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":\"IERC721Errors\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
				"ERC721": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721IncorrectOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721InsufficientApproval",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "approver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidApprover",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOperator",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "ERC721InvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								}
							],
							"name": "ERC721InvalidReceiver",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "sender",
									"type": "address"
								}
							],
							"name": "ERC721InvalidSender",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ERC721NonexistentToken",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.",
						"errors": {
							"ERC721IncorrectOwner(address,uint256,address)": [
								{
									"details": "Indicates an error related to the ownership over a particular token. Used in transfers.",
									"params": {
										"owner": "Address of the current owner of a token.",
										"sender": "Address whose tokens are being transferred.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InsufficientApproval(address,uint256)": [
								{
									"details": "Indicates a failure with the `operator`’s approval. Used in transfers.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner.",
										"tokenId": "Identifier number of a token."
									}
								}
							],
							"ERC721InvalidApprover(address)": [
								{
									"details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
									"params": {
										"approver": "Address initiating an approval operation."
									}
								}
							],
							"ERC721InvalidOperator(address)": [
								{
									"details": "Indicates a failure with the `operator` to be approved. Used in approvals.",
									"params": {
										"operator": "Address that may be allowed to operate on tokens without being their owner."
									}
								}
							],
							"ERC721InvalidOwner(address)": [
								{
									"details": "Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.",
									"params": {
										"owner": "Address of the current owner of a token."
									}
								}
							],
							"ERC721InvalidReceiver(address)": [
								{
									"details": "Indicates a failure with the token `receiver`. Used in transfers.",
									"params": {
										"receiver": "Address to which tokens are being transferred."
									}
								}
							],
							"ERC721InvalidSender(address)": [
								{
									"details": "Indicates a failure with the token `sender`. Used in transfers.",
									"params": {
										"sender": "Address whose tokens are being transferred."
									}
								}
							],
							"ERC721NonexistentToken(uint256)": [
								{
									"details": "Indicates a `tokenId` whose `owner` is the zero address.",
									"params": {
										"tokenId": "Identifier number of a token."
									}
								}
							]
						},
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "See {IERC721-approve}."
							},
							"balanceOf(address)": {
								"details": "See {IERC721-balanceOf}."
							},
							"constructor": {
								"details": "Initializes the contract by setting a `name` and a `symbol` to the token collection."
							},
							"getApproved(uint256)": {
								"details": "See {IERC721-getApproved}."
							},
							"isApprovedForAll(address,address)": {
								"details": "See {IERC721-isApprovedForAll}."
							},
							"name()": {
								"details": "See {IERC721Metadata-name}."
							},
							"ownerOf(uint256)": {
								"details": "See {IERC721-ownerOf}."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "See {IERC721-safeTransferFrom}."
							},
							"setApprovalForAll(address,bool)": {
								"details": "See {IERC721-setApprovalForAll}."
							},
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							},
							"symbol()": {
								"details": "See {IERC721Metadata-symbol}."
							},
							"tokenURI(uint256)": {
								"details": "See {IERC721Metadata-tokenURI}."
							},
							"transferFrom(address,address,uint256)": {
								"details": "See {IERC721-transferFrom}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721IncorrectOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721InsufficientApproval\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOperator\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC721InvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC721InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC721InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonexistentToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.\",\"errors\":{\"ERC721IncorrectOwner(address,uint256,address)\":[{\"details\":\"Indicates an error related to the ownership over a particular token. Used in transfers.\",\"params\":{\"owner\":\"Address of the current owner of a token.\",\"sender\":\"Address whose tokens are being transferred.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InsufficientApproval(address,uint256)\":[{\"details\":\"Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\",\"tokenId\":\"Identifier number of a token.\"}}],\"ERC721InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC721InvalidOperator(address)\":[{\"details\":\"Indicates a failure with the `operator` to be approved. Used in approvals.\",\"params\":{\"operator\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC721InvalidOwner(address)\":[{\"details\":\"Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20. Used in balance queries.\",\"params\":{\"owner\":\"Address of the current owner of a token.\"}}],\"ERC721InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC721InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC721NonexistentToken(uint256)\":[{\"details\":\"Indicates a `tokenId` whose `owner` is the zero address.\",\"params\":{\"tokenId\":\"Identifier number of a token.\"}}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"constructor\":{\"details\":\"Initializes the contract by setting a `name` and a `symbol` to the token collection.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":\"ERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol\":{\"keccak256\":\"0xbd56d5c2cdbeb156c65a1a929f5ea9be5af3bde54244c8d8dcd7eb560512ed7d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://dc97f1f9f1a8162af5098a609cf9a62afc2856a042243ce274762709e223711b\",\"dweb:/ipfs/QmTA2uoKWE1HyVGmdnGC5YNLuSBaPbDJVmmfUvvoEVN7Zj\"]},\"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol\":{\"keccak256\":\"0xdde6917a300a3e655ca443b76266ce89145a7c9eb6a70298bf8aab4965bc40fc\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://39416f61b555df983b22c85803cbe7606fb7f2004b4dbbd51995c7dc552a7137\",\"dweb:/ipfs/QmUG2ghvGz4iDLrvaUfEjcjn8qbvfcoi5AFpGW9t4cupGc\"]},\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb8745c44e53e2a74e9a5d97de4f91d065f1e05cc3e624639485e7b29fb73b728\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d9aba69c37eedb96c529c03c006e8c7f9ea3c2cc11635b21aedc0a65810cfd\",\"dweb:/ipfs/QmUDZnzN5VAmQY6w2Vr6Uef6xNT5jFM9Grb4MUkECXWzjz\"]},\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa324c22ef2aaa7b7cd4db27007e7c6fc2d7877cc6381510fca9c83d72bb9ab3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://acb98725687905d9183432eeaa3f7dca110b258ea403fd07b01fcc32ddb16d04\",\"dweb:/ipfs/QmaWdFfHxZdggD16Hu3CgJ3dSGvQzsmovZBW3rorYh6S5N\"]},\"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x62e9e9e364dcd065b87229e727198f2ee8592c3c22010ead00f66cc370b6db43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fda109e10a60e3ad248094787cffc42e12579215e30536d26c38cca922a951de\",\"dweb:/ipfs/QmdAZxHrJpLj9nUvv61CV1QyCP28vvgJCva4e5949DqFNT\"]},\"openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xa98ceb8734832ea51ee2ea6bafded757acaba7d232143ac9e50565760f7cf366\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51854d853bb0a17e1d669a9f33699986d13ff42425c1e2eeea2ffc9190e6e42a\",\"dweb:/ipfs/QmWwqcGd2pWwnBcKwBKC7CWYsSvtWUkZ1qJTSQ3fhednfA\"]},\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x5e93dc51cc1dd89d1ae31658302b93f7adef0eee525eafbc563195afc9345e39\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fd926ba3c959be85a706285338cc7dde03af8ecb4e2a936f3bac18441abfe97\",\"dweb:/ipfs/QmaSdTPxbPPscAxiNFqExm7dTuXp4VuBsiiuGcuk4euJie\"]},\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9\",\"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N\"]},\"openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 459,
								"contract": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_name",
								"offset": 0,
								"slot": "0",
								"type": "t_string_storage"
							},
							{
								"astId": 461,
								"contract": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_symbol",
								"offset": 0,
								"slot": "1",
								"type": "t_string_storage"
							},
							{
								"astId": 465,
								"contract": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_owners",
								"offset": 0,
								"slot": "2",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 469,
								"contract": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_balances",
								"offset": 0,
								"slot": "3",
								"type": "t_mapping(t_address,t_uint256)"
							},
							{
								"astId": 473,
								"contract": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_tokenApprovals",
								"offset": 0,
								"slot": "4",
								"type": "t_mapping(t_uint256,t_address)"
							},
							{
								"astId": 479,
								"contract": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol:ERC721",
								"label": "_operatorApprovals",
								"offset": 0,
								"slot": "5",
								"type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							},
							"t_bool": {
								"encoding": "inplace",
								"label": "bool",
								"numberOfBytes": "1"
							},
							"t_mapping(t_address,t_bool)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => bool)",
								"numberOfBytes": "32",
								"value": "t_bool"
							},
							"t_mapping(t_address,t_mapping(t_address,t_bool))": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => mapping(address => bool))",
								"numberOfBytes": "32",
								"value": "t_mapping(t_address,t_bool)"
							},
							"t_mapping(t_address,t_uint256)": {
								"encoding": "mapping",
								"key": "t_address",
								"label": "mapping(address => uint256)",
								"numberOfBytes": "32",
								"value": "t_uint256"
							},
							"t_mapping(t_uint256,t_address)": {
								"encoding": "mapping",
								"key": "t_uint256",
								"label": "mapping(uint256 => address)",
								"numberOfBytes": "32",
								"value": "t_address"
							},
							"t_string_storage": {
								"encoding": "bytes",
								"label": "string",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"IERC721": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Required interface of an ERC721 compliant contract.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Required interface of an ERC721 compliant contract.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb8745c44e53e2a74e9a5d97de4f91d065f1e05cc3e624639485e7b29fb73b728\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d9aba69c37eedb96c529c03c006e8c7f9ea3c2cc11635b21aedc0a65810cfd\",\"dweb:/ipfs/QmUDZnzN5VAmQY6w2Vr6Uef6xNT5jFM9Grb4MUkECXWzjz\"]},\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9\",\"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"IERC721Receiver": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "onERC721Received",
							"outputs": [
								{
									"internalType": "bytes4",
									"name": "",
									"type": "bytes4"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.",
						"kind": "dev",
						"methods": {
							"onERC721Received(address,address,uint256,bytes)": {
								"details": "Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
							}
						},
						"title": "ERC721 token receiver interface",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"onERC721Received(address,address,uint256,bytes)": "150b7a02"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom} by `operator` from `from`, this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\"}},\"title\":\"ERC721 token receiver interface\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol\":{\"keccak256\":\"0xa324c22ef2aaa7b7cd4db27007e7c6fc2d7877cc6381510fca9c83d72bb9ab3c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://acb98725687905d9183432eeaa3f7dca110b258ea403fd07b01fcc32ddb16d04\",\"dweb:/ipfs/QmaWdFfHxZdggD16Hu3CgJ3dSGvQzsmovZBW3rorYh6S5N\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"IERC721Metadata": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "approved",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "ApprovalForAll",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "balance",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "getApproved",
							"outputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								}
							],
							"name": "isApprovedForAll",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "name",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "ownerOf",
							"outputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								},
								{
									"internalType": "bytes",
									"name": "data",
									"type": "bytes"
								}
							],
							"name": "safeTransferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "operator",
									"type": "address"
								},
								{
									"internalType": "bool",
									"name": "approved",
									"type": "bool"
								}
							],
							"name": "setApprovalForAll",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "symbol",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "tokenURI",
							"outputs": [
								{
									"internalType": "string",
									"name": "",
									"type": "string"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "tokenId",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "See https://eips.ethereum.org/EIPS/eip-721",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when `owner` enables `approved` to manage the `tokenId` token."
							},
							"ApprovalForAll(address,address,bool)": {
								"details": "Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `tokenId` token is transferred from `from` to `to`."
							}
						},
						"kind": "dev",
						"methods": {
							"approve(address,uint256)": {
								"details": "Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the number of tokens in ``owner``'s account."
							},
							"getApproved(uint256)": {
								"details": "Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"isApprovedForAll(address,address)": {
								"details": "Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}"
							},
							"name()": {
								"details": "Returns the token collection name."
							},
							"ownerOf(uint256)": {
								"details": "Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist."
							},
							"safeTransferFrom(address,address,uint256)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"safeTransferFrom(address,address,uint256,bytes)": {
								"details": "Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event."
							},
							"setApprovalForAll(address,bool)": {
								"details": "Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event."
							},
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							},
							"symbol()": {
								"details": "Returns the token collection symbol."
							},
							"tokenURI(uint256)": {
								"details": "Returns the Uniform Resource Identifier (URI) for `tokenId` token."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event."
							}
						},
						"title": "ERC-721 Non-Fungible Token Standard, optional metadata extension",
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"getApproved(uint256)": "081812fc",
							"isApprovedForAll(address,address)": "e985e9c5",
							"name()": "06fdde03",
							"ownerOf(uint256)": "6352211e",
							"safeTransferFrom(address,address,uint256)": "42842e0e",
							"safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
							"setApprovalForAll(address,bool)": "a22cb465",
							"supportsInterface(bytes4)": "01ffc9a7",
							"symbol()": "95d89b41",
							"tokenURI(uint256)": "c87b56dd",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when `owner` enables `approved` to manage the `tokenId` token.\"},\"ApprovalForAll(address,address,bool)\":{\"details\":\"Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `tokenId` token is transferred from `from` to `to`.\"}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Gives permission to `to` to transfer `tokenId` token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - `tokenId` must exist. Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the number of tokens in ``owner``'s account.\"},\"getApproved(uint256)\":{\"details\":\"Returns the account approved for `tokenId` token. Requirements: - `tokenId` must exist.\"},\"isApprovedForAll(address,address)\":{\"details\":\"Returns if the `operator` is allowed to manage all of the assets of `owner`. See {setApprovalForAll}\"},\"name()\":{\"details\":\"Returns the token collection name.\"},\"ownerOf(uint256)\":{\"details\":\"Returns the owner of the `tokenId` token. Requirements: - `tokenId` must exist.\"},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must have been allowed to move this token by either {approve} or   {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Safely transfers `tokenId` token from `from` to `to`. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must exist and be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon   a safe transfer. Emits a {Transfer} event.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"Approve or remove `operator` as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The `operator` cannot be the address zero. Emits an {ApprovalForAll} event.\"},\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"},\"symbol()\":{\"details\":\"Returns the token collection symbol.\"},\"tokenURI(uint256)\":{\"details\":\"Returns the Uniform Resource Identifier (URI) for `tokenId` token.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfers `tokenId` token from `from` to `to`. WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - `from` cannot be the zero address. - `to` cannot be the zero address. - `tokenId` token must be owned by `from`. - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.\"}},\"title\":\"ERC-721 Non-Fungible Token Standard, optional metadata extension\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol\":{\"keccak256\":\"0xb8745c44e53e2a74e9a5d97de4f91d065f1e05cc3e624639485e7b29fb73b728\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://76d9aba69c37eedb96c529c03c006e8c7f9ea3c2cc11635b21aedc0a65810cfd\",\"dweb:/ipfs/QmUDZnzN5VAmQY6w2Vr6Uef6xNT5jFM9Grb4MUkECXWzjz\"]},\"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"keccak256\":\"0x62e9e9e364dcd065b87229e727198f2ee8592c3c22010ead00f66cc370b6db43\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://fda109e10a60e3ad248094787cffc42e12579215e30536d26c38cca922a951de\",\"dweb:/ipfs/QmdAZxHrJpLj9nUvv61CV1QyCP28vvgJCva4e5949DqFNT\"]},\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9\",\"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/utils/Context.sol": {
				"Context": {
					"abi": [],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/utils/Context.sol\":{\"keccak256\":\"0xa98ceb8734832ea51ee2ea6bafded757acaba7d232143ac9e50565760f7cf366\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://51854d853bb0a17e1d669a9f33699986d13ff42425c1e2eeea2ffc9190e6e42a\",\"dweb:/ipfs/QmWwqcGd2pWwnBcKwBKC7CWYsSvtWUkZ1qJTSQ3fhednfA\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/utils/Strings.sol": {
				"Strings": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "length",
									"type": "uint256"
								}
							],
							"name": "StringsInsufficientHexLength",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "String operations.",
						"errors": {
							"StringsInsufficientHexLength(uint256,uint256)": [
								{
									"details": "The `value` string doesn't fit in the specified `length`."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":262:3191  library Strings {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-contracts/contracts/utils/Strings.sol\":262:3191  library Strings {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122034b98d893e4ee82e6e7e847d74dbb504717633c7be141ac6c80d266272f4e21964736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122034b98d893e4ee82e6e7e847d74dbb504717633c7be141ac6c80d266272f4e21964736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE 0xB9 DUP14 DUP10 RETURNDATACOPY 0x4E 0xE8 0x2E PUSH15 0x7E847D74DBB504717633C7BE141AC6 0xC8 0xD 0x26 PUSH3 0x72F4E2 NOT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "262:2929:8:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;262:2929:8;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122034b98d893e4ee82e6e7e847d74dbb504717633c7be141ac6c80d266272f4e21964736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CALLVALUE 0xB9 DUP14 DUP10 RETURNDATACOPY 0x4E 0xE8 0x2E PUSH15 0x7E847D74DBB504717633C7BE141AC6 0xC8 0xD 0x26 PUSH3 0x72F4E2 NOT PUSH5 0x736F6C6343 STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "262:2929:8:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"equal(string memory,string memory)": "infinite",
								"toHexString(address)": "infinite",
								"toHexString(uint256)": "infinite",
								"toHexString(uint256,uint256)": "infinite",
								"toString(uint256)": "infinite",
								"toStringSigned(int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH #[$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH [$]",
									"source": 8,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "B"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "CODECOPY",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP1",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MLOAD",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "BYTE",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "EQ",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH [tag]",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "JUMPI",
									"source": 8
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "4"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "24"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "REVERT",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "tag",
									"source": 8,
									"value": "1"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "JUMPDEST",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "ADDRESS",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "0"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "PUSH",
									"source": 8,
									"value": "73"
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "MSTORE8",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP3",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "DUP2",
									"source": 8
								},
								{
									"begin": 262,
									"end": 3191,
									"name": "RETURN",
									"source": 8
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122034b98d893e4ee82e6e7e847d74dbb504717633c7be141ac6c80d266272f4e21964736f6c63430008140033",
									".code": [
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSHDEPLOYADDRESS",
											"source": 8
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "ADDRESS",
											"source": 8
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "EQ",
											"source": 8
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "80"
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "40"
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "MSTORE",
											"source": 8
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "PUSH",
											"source": 8,
											"value": "0"
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "DUP1",
											"source": 8
										},
										{
											"begin": 262,
											"end": 3191,
											"name": "REVERT",
											"source": 8
										}
									]
								}
							},
							"sourceList": [
								"PictureToken.sol",
								"openzeppelin-contracts/contracts/access/Ownable.sol",
								"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
								"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"openzeppelin-contracts/contracts/utils/Context.sol",
								"openzeppelin-contracts/contracts/utils/Strings.sol",
								"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
								"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"openzeppelin-contracts/contracts/utils/math/Math.sol",
								"openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"String operations.\",\"errors\":{\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x53da138fbc253114bcb7593eff7a23bdffdfd1392137cd59e2dd90e423cb5f92\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a50918f60f4975d1342119a8decea30e44497d85a0f19aa9022666a295a37368\",\"dweb:/ipfs/QmcSCczAJqotocW4pBJqtJawtd9ergdxiJ3vn2MqzxBaYz\"]},\"openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]},\"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"ERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "See {IERC165-supportsInterface}."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: ```solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } ```\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":\"ERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol\":{\"keccak256\":\"0x5e93dc51cc1dd89d1ae31658302b93f7adef0eee525eafbc563195afc9345e39\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3fd926ba3c959be85a706285338cc7dde03af8ecb4e2a936f3bac18441abfe97\",\"dweb:/ipfs/QmaSdTPxbPPscAxiNFqExm7dTuXp4VuBsiiuGcuk4euJie\"]},\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9\",\"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"IERC165": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "bytes4",
									"name": "interfaceId",
									"type": "bytes4"
								}
							],
							"name": "supportsInterface",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.",
						"kind": "dev",
						"methods": {
							"supportsInterface(bytes4)": {
								"details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"supportsInterface(bytes4)": "01ffc9a7"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol\":{\"keccak256\":\"0x97a5e5c6659add3f13418d219e705d6cc732ca3c31b62a64d66f92b159c5375d\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4a42c9e92e0b080329a3084019cc95423bdc4c5c20250a82e53d252650e79da9\",\"dweb:/ipfs/QmXffSTGqZXofPd7ueueXQowGPTQr9DJvZEzQFmJKzB24N\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"Math": {
					"abi": [
						{
							"inputs": [],
							"name": "MathOverflowedMulDiv",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Standard math utilities missing in the Solidity language.",
						"errors": {
							"MathOverflowedMulDiv()": [
								{
									"details": "Muldiv operation overflow."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":211:15531  library Math {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-contracts/contracts/utils/math/Math.sol\":211:15531  library Math {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212205bcd364daad269d9597b42c21c3c8c0445d444fe5ea898871f7e11379ada2c9864736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205bcd364daad269d9597b42c21c3c8c0445d444fe5ea898871f7e11379ada2c9864736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xCD CALLDATASIZE 0x4D 0xAA 0xD2 PUSH10 0xD9597B42C21C3C8C0445 0xD4 PREVRANDAO INVALID 0x5E 0xA8 SWAP9 DUP8 0x1F PUSH31 0x11379ADA2C9864736F6C634300081400330000000000000000000000000000 ",
							"sourceMap": "211:15320:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;211:15320:11;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212205bcd364daad269d9597b42c21c3c8c0445d444fe5ea898871f7e11379ada2c9864736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 JUMPDEST 0xCD CALLDATASIZE 0x4D 0xAA 0xD2 PUSH10 0xD9597B42C21C3C8C0445 0xD4 PREVRANDAO INVALID 0x5E 0xA8 SWAP9 DUP8 0x1F PUSH31 0x11379ADA2C9864736F6C634300081400330000000000000000000000000000 ",
							"sourceMap": "211:15320:11:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"average(uint256,uint256)": "infinite",
								"ceilDiv(uint256,uint256)": "infinite",
								"log10(uint256)": "infinite",
								"log10(uint256,enum Math.Rounding)": "infinite",
								"log2(uint256)": "infinite",
								"log2(uint256,enum Math.Rounding)": "infinite",
								"log256(uint256)": "infinite",
								"log256(uint256,enum Math.Rounding)": "infinite",
								"max(uint256,uint256)": "infinite",
								"min(uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256)": "infinite",
								"mulDiv(uint256,uint256,uint256,enum Math.Rounding)": "infinite",
								"sqrt(uint256)": "infinite",
								"sqrt(uint256,enum Math.Rounding)": "infinite",
								"tryAdd(uint256,uint256)": "infinite",
								"tryDiv(uint256,uint256)": "infinite",
								"tryMod(uint256,uint256)": "infinite",
								"tryMul(uint256,uint256)": "infinite",
								"trySub(uint256,uint256)": "infinite",
								"unsignedRoundsUp(enum Math.Rounding)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH #[$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH [$]",
									"source": 11,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "B"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "CODECOPY",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP1",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MLOAD",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "BYTE",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "EQ",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH [tag]",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "JUMPI",
									"source": 11
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "4"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "24"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "REVERT",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "tag",
									"source": 11,
									"value": "1"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "JUMPDEST",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "ADDRESS",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "0"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "PUSH",
									"source": 11,
									"value": "73"
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "MSTORE8",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP3",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "DUP2",
									"source": 11
								},
								{
									"begin": 211,
									"end": 15531,
									"name": "RETURN",
									"source": 11
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212205bcd364daad269d9597b42c21c3c8c0445d444fe5ea898871f7e11379ada2c9864736f6c63430008140033",
									".code": [
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSHDEPLOYADDRESS",
											"source": 11
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "ADDRESS",
											"source": 11
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "EQ",
											"source": 11
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSH",
											"source": 11,
											"value": "80"
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSH",
											"source": 11,
											"value": "40"
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "MSTORE",
											"source": 11
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "PUSH",
											"source": 11,
											"value": "0"
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "DUP1",
											"source": 11
										},
										{
											"begin": 211,
											"end": 15531,
											"name": "REVERT",
											"source": 11
										}
									]
								}
							},
							"sourceList": [
								"PictureToken.sol",
								"openzeppelin-contracts/contracts/access/Ownable.sol",
								"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
								"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"openzeppelin-contracts/contracts/utils/Context.sol",
								"openzeppelin-contracts/contracts/utils/Strings.sol",
								"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
								"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"openzeppelin-contracts/contracts/utils/math/Math.sol",
								"openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"MathOverflowedMulDiv\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"errors\":{\"MathOverflowedMulDiv()\":[{\"details\":\"Muldiv operation overflow.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0x2c5cdfbc8308c34f76fc8fde760a72890e1178aedbeb3651662f177a2efe8e02\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://2c3ae15eb2fd97ec390937660d1db1ce41a5c939ba5f5da0f359a1ba237ea063\",\"dweb:/ipfs/QmXN2hveEkj9KsfSsNVodzxE626tmnpHK2SmjXDUP6arg1\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"SignedMath": {
					"abi": [],
					"devdoc": {
						"details": "Standard signed math utilities missing in the Solidity language.",
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":224:1305  library SignedMath {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":224:1305  library SignedMath {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200edc9b62172585d658ddf978cad99e1e405b880404e85e839a8fa2580b1faa5d64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200edc9b62172585d658ddf978cad99e1e405b880404e85e839a8fa2580b1faa5d64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0xDC SWAP12 PUSH3 0x172585 0xD6 PC 0xDD 0xF9 PUSH25 0xCAD99E1E405B880404E85E839A8FA2580B1FAA5D64736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "224:1081:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;224:1081:12;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200edc9b62172585d658ddf978cad99e1e405b880404e85e839a8fa2580b1faa5d64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0xDC SWAP12 PUSH3 0x172585 0xD6 PC 0xDD 0xF9 PUSH25 0xCAD99E1E405B880404E85E839A8FA2580B1FAA5D64736F6C63 NUMBER STOP ADDMOD EQ STOP CALLER ",
							"sourceMap": "224:1081:12:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"abs(int256)": "infinite",
								"average(int256,int256)": "infinite",
								"max(int256,int256)": "infinite",
								"min(int256,int256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH #[$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH [$]",
									"source": 12,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "B"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "CODECOPY",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP1",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MLOAD",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "BYTE",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "EQ",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH [tag]",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "JUMPI",
									"source": 12
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "4"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "24"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "REVERT",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "tag",
									"source": 12,
									"value": "1"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "JUMPDEST",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "ADDRESS",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "0"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "PUSH",
									"source": 12,
									"value": "73"
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "MSTORE8",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP3",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "DUP2",
									"source": 12
								},
								{
									"begin": 224,
									"end": 1305,
									"name": "RETURN",
									"source": 12
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200edc9b62172585d658ddf978cad99e1e405b880404e85e839a8fa2580b1faa5d64736f6c63430008140033",
									".code": [
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSHDEPLOYADDRESS",
											"source": 12
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "ADDRESS",
											"source": 12
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "EQ",
											"source": 12
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSH",
											"source": 12,
											"value": "80"
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSH",
											"source": 12,
											"value": "40"
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "MSTORE",
											"source": 12
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "PUSH",
											"source": 12,
											"value": "0"
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "DUP1",
											"source": 12
										},
										{
											"begin": 224,
											"end": 1305,
											"name": "REVERT",
											"source": 12
										}
									]
								}
							},
							"sourceList": [
								"PictureToken.sol",
								"openzeppelin-contracts/contracts/access/Ownable.sol",
								"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
								"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
								"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
								"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
								"openzeppelin-contracts/contracts/utils/Context.sol",
								"openzeppelin-contracts/contracts/utils/Strings.sol",
								"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
								"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
								"openzeppelin-contracts/contracts/utils/math/Math.sol",
								"openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xd49b8824c2908c601bb2aa619e1331672c1d46f743bac0e23997766ea8bc16eb\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6334c9e7fe628d4886a4f7f1dbb458dfe0ef401913b0e5ba59d565eba62db3cf\",\"dweb:/ipfs/QmXcsGpRXBPb3S1kQ5cyt21UDBf7irkuwZMFv64gtbENy6\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"PictureToken.sol": {
				"ast": {
					"absolutePath": "PictureToken.sol",
					"exportedSymbols": {
						"Context": [
							1620
						],
						"ERC165": [
							1899
						],
						"ERC721": [
							1435
						],
						"IERC165": [
							1911
						],
						"IERC721": [
							1552
						],
						"IERC721Errors": [
							379
						],
						"IERC721Metadata": [
							1598
						],
						"IERC721Receiver": [
							1570
						],
						"Ownable": [
							289
						],
						"PictureToken": [
							132
						],
						"Strings": [
							1875
						],
						"tokenData": [
							141
						]
					},
					"id": 142,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "33:24:0"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
							"file": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
							"id": 2,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 142,
							"sourceUnit": 1436,
							"src": "63:66:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/access/Ownable.sol",
							"file": "openzeppelin-contracts/contracts/access/Ownable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 142,
							"sourceUnit": 290,
							"src": "131:61:0",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 4,
										"name": "ERC721",
										"nameLocations": [
											"221:6:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1435,
										"src": "221:6:0"
									},
									"id": 5,
									"nodeType": "InheritanceSpecifier",
									"src": "221:6:0"
								},
								{
									"baseName": {
										"id": 6,
										"name": "Ownable",
										"nameLocations": [
											"229:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 289,
										"src": "229:7:0"
									},
									"id": 7,
									"nodeType": "InheritanceSpecifier",
									"src": "229:7:0"
								}
							],
							"canonicalName": "PictureToken",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 132,
							"linearizedBaseContracts": [
								132,
								289,
								1435,
								379,
								1598,
								1552,
								1899,
								1911,
								1620
							],
							"name": "PictureToken",
							"nameLocation": "205:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 9,
									"mutability": "mutable",
									"name": "image",
									"nameLocation": "253:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 132,
									"src": "246:12:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 8,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "246:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"functionSelector": "a035b1fe",
									"id": 11,
									"mutability": "mutable",
									"name": "price",
									"nameLocation": "280:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 132,
									"src": "265:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 10,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "265:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "public"
								},
								{
									"constant": false,
									"id": 13,
									"mutability": "mutable",
									"name": "onSale",
									"nameLocation": "297:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 132,
									"src": "292:11:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 12,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "292:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								},
								{
									"body": {
										"id": 39,
										"nodeType": "Block",
										"src": "434:78:0",
										"statements": [
											{
												"expression": {
													"id": 29,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 27,
														"name": "image",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 9,
														"src": "445:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 28,
														"name": "_image",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 17,
														"src": "453:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "445:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 30,
												"nodeType": "ExpressionStatement",
												"src": "445:14:0"
											},
											{
												"expression": {
													"id": 33,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 31,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "470:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 32,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "478:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "470:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 34,
												"nodeType": "ExpressionStatement",
												"src": "470:9:0"
											},
											{
												"expression": {
													"id": 37,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 35,
														"name": "onSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "490:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 36,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "499:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "490:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 38,
												"nodeType": "ExpressionStatement",
												"src": "490:14:0"
											}
										]
									},
									"id": 40,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [
										{
											"arguments": [
												{
													"hexValue": "50696374757265546f6b656e",
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "380:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_b16317b605d859d01e62110a39392369612adda77165f01ce0edaa2790789650",
														"typeString": "literal_string \"PictureToken\""
													},
													"value": "PictureToken"
												},
												{
													"hexValue": "5054",
													"id": 21,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "396:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_47751c5767bbb0bdd931d7dded7762feff2f8f523644b7476475f9e271d38fe4",
														"typeString": "literal_string \"PT\""
													},
													"value": "PT"
												}
											],
											"id": 22,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 19,
												"name": "ERC721",
												"nameLocations": [
													"373:6:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1435,
												"src": "373:6:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "373:28:0"
										},
										{
											"arguments": [
												{
													"id": 24,
													"name": "initialOwner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 15,
													"src": "415:12:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												}
											],
											"id": 25,
											"kind": "baseConstructorSpecifier",
											"modifierName": {
												"id": 23,
												"name": "Ownable",
												"nameLocations": [
													"407:7:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 289,
												"src": "407:7:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "407:21:0"
										}
									],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 18,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 15,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "332:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "324:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 14,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "324:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 17,
												"mutability": "mutable",
												"name": "_image",
												"nameLocation": "360:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 40,
												"src": "346:20:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 16,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "346:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "323:44:0"
									},
									"returnParameters": {
										"id": 26,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "434:0:0"
									},
									"scope": 132,
									"src": "312:200:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										631
									],
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "587:52:0",
										"statements": [
											{
												"expression": {
													"hexValue": "697066733a2f2f7069656365546f6b656e42617365555249",
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "605:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c582b98acd129d18a774c828c2c965070de5771f1be0828f6a15b1d42e5444ce",
														"typeString": "literal_string \"ipfs://pieceTokenBaseURI\""
													},
													"value": "ipfs://pieceTokenBaseURI"
												},
												"functionReturnParameters": 45,
												"id": 47,
												"nodeType": "Return",
												"src": "598:33:0"
											}
										]
									},
									"id": 49,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "529:8:0",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 42,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "554:8:0"
									},
									"parameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "537:2:0"
									},
									"returnParameters": {
										"id": 45,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 44,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "572:13:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 43,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "572:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "571:15:0"
									},
									"scope": 132,
									"src": "520:119:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 64,
										"nodeType": "Block",
										"src": "718:74:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"expression": {
																	"id": 56,
																	"name": "Ownable",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 289,
																	"src": "746:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_Ownable_$289_$",
																		"typeString": "type(contract Ownable)"
																	}
																},
																"id": 57,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "754:5:0",
																"memberName": "owner",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 209,
																"src": "746:13:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "746:15:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 59,
															"name": "image",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 9,
															"src": "763:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															}
														},
														{
															"id": 60,
															"name": "price",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "770:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 61,
															"name": "onSale",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 13,
															"src": "777:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_string_storage",
																"typeString": "string storage ref"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 55,
														"name": "tokenData",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 141,
														"src": "736:9:0",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_struct$_tokenData_$141_storage_ptr_$",
															"typeString": "type(struct tokenData storage pointer)"
														}
													},
													"id": 62,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "structConstructorCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "736:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tokenData_$141_memory_ptr",
														"typeString": "struct tokenData memory"
													}
												},
												"functionReturnParameters": 54,
												"id": 63,
												"nodeType": "Return",
												"src": "729:55:0"
											}
										]
									},
									"functionSelector": "854cbb4a",
									"id": 65,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getSinglePictureToken",
									"nameLocation": "656:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 50,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "677:2:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 65,
												"src": "700:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_tokenData_$141_memory_ptr",
													"typeString": "struct tokenData"
												},
												"typeName": {
													"id": 52,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 51,
														"name": "tokenData",
														"nameLocations": [
															"700:9:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 141,
														"src": "700:9:0"
													},
													"referencedDeclaration": 141,
													"src": "700:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_tokenData_$141_storage_ptr",
														"typeString": "struct tokenData"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "699:18:0"
									},
									"scope": 132,
									"src": "647:145:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 72,
										"nodeType": "Block",
										"src": "849:31:0",
										"statements": [
											{
												"expression": {
													"id": 70,
													"name": "price",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 11,
													"src": "867:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 69,
												"id": 71,
												"nodeType": "Return",
												"src": "860:12:0"
											}
										]
									},
									"functionSelector": "98d5fdca",
									"id": 73,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getPrice",
									"nameLocation": "809:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "817:2:0"
									},
									"returnParameters": {
										"id": 69,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 68,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "840:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 67,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "840:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:9:0"
									},
									"scope": 132,
									"src": "800:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 84,
										"nodeType": "Block",
										"src": "939:33:0",
										"statements": [
											{
												"expression": {
													"id": 82,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 80,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "950:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 81,
														"name": "_price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 75,
														"src": "958:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "950:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 83,
												"nodeType": "ExpressionStatement",
												"src": "950:14:0"
											}
										]
									},
									"functionSelector": "91b7f5ed",
									"id": 85,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 78,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 77,
												"name": "onlyOwner",
												"nameLocations": [
													"929:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 200,
												"src": "929:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "929:9:0"
										}
									],
									"name": "setPrice",
									"nameLocation": "897:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 76,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 75,
												"mutability": "mutable",
												"name": "_price",
												"nameLocation": "914:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "906:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 74,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "906:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "905:16:0"
									},
									"returnParameters": {
										"id": 79,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "939:0:0"
									},
									"scope": 132,
									"src": "888:84:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 94,
										"nodeType": "Block",
										"src": "1018:32:0",
										"statements": [
											{
												"expression": {
													"id": 92,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 90,
														"name": "onSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "1029:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 91,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1038:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "1029:13:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 93,
												"nodeType": "ExpressionStatement",
												"src": "1029:13:0"
											}
										]
									},
									"functionSelector": "5987cc19",
									"id": 95,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 88,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 87,
												"name": "onlyOwner",
												"nameLocations": [
													"1008:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 200,
												"src": "1008:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1008:9:0"
										}
									],
									"name": "putOnSale",
									"nameLocation": "989:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "998:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1018:0:0"
									},
									"scope": 132,
									"src": "980:70:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 104,
										"nodeType": "Block",
										"src": "1099:33:0",
										"statements": [
											{
												"expression": {
													"id": 102,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 100,
														"name": "onSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "1110:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 101,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1119:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1110:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 103,
												"nodeType": "ExpressionStatement",
												"src": "1110:14:0"
											}
										]
									},
									"functionSelector": "8c2a5bc8",
									"id": 105,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 98,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 97,
												"name": "onlyOwner",
												"nameLocations": [
													"1089:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 200,
												"src": "1089:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1089:9:0"
										}
									],
									"name": "notPutOnSale",
									"nameLocation": "1067:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 96,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1079:2:0"
									},
									"returnParameters": {
										"id": 99,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1099:0:0"
									},
									"scope": 132,
									"src": "1058:74:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "1167:139:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 114,
															"name": "price",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 11,
															"src": "1207:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"expression": {
																		"id": 110,
																		"name": "msg",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967281,
																		"src": "1186:3:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_message",
																			"typeString": "msg"
																		}
																	},
																	"id": 111,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "1190:6:0",
																	"memberName": "sender",
																	"nodeType": "MemberAccess",
																	"src": "1186:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 109,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1178:8:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_payable_$",
																	"typeString": "type(address payable)"
																},
																"typeName": {
																	"id": 108,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1178:8:0",
																	"stateMutability": "payable",
																	"typeDescriptions": {}
																}
															},
															"id": 112,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1178:19:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address_payable",
																"typeString": "address payable"
															}
														},
														"id": 113,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1198:8:0",
														"memberName": "transfer",
														"nodeType": "MemberAccess",
														"src": "1178:28:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 115,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1178:35:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 116,
												"nodeType": "ExpressionStatement",
												"src": "1178:35:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 118,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "1242:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 119,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1246:6:0",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "1242:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 117,
														"name": "transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 268,
														"src": "1224:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 120,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1224:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 121,
												"nodeType": "ExpressionStatement",
												"src": "1224:29:0"
											},
											{
												"expression": {
													"id": 124,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 122,
														"name": "price",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 11,
														"src": "1264:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 123,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1272:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "1264:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"id": 125,
												"nodeType": "ExpressionStatement",
												"src": "1264:9:0"
											},
											{
												"expression": {
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 126,
														"name": "onSale",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 13,
														"src": "1284:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 127,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "1293:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "1284:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "1284:14:0"
											}
										]
									},
									"functionSelector": "64edfbf0",
									"id": 131,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "purchase",
									"nameLocation": "1149:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 106,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1157:2:0"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1167:0:0"
									},
									"scope": 132,
									"src": "1140:166:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 142,
							"src": "196:1115:0",
							"usedErrors": [
								155,
								160,
								337,
								342,
								351,
								356,
								361,
								368,
								373,
								378
							],
							"usedEvents": [
								166,
								1451,
								1460,
								1469
							]
						},
						{
							"canonicalName": "tokenData",
							"id": 141,
							"members": [
								{
									"constant": false,
									"id": 134,
									"mutability": "mutable",
									"name": "ownerAddress",
									"nameLocation": "1347:12:0",
									"nodeType": "VariableDeclaration",
									"scope": 141,
									"src": "1339:20:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 133,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "1339:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 136,
									"mutability": "mutable",
									"name": "image",
									"nameLocation": "1373:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 141,
									"src": "1366:12:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage_ptr",
										"typeString": "string"
									},
									"typeName": {
										"id": 135,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "1366:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 138,
									"mutability": "mutable",
									"name": "price",
									"nameLocation": "1393:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 141,
									"src": "1385:13:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint256",
										"typeString": "uint256"
									},
									"typeName": {
										"id": 137,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "1385:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"id": 140,
									"mutability": "mutable",
									"name": "onSale",
									"nameLocation": "1410:6:0",
									"nodeType": "VariableDeclaration",
									"scope": 141,
									"src": "1405:11:0",
									"stateVariable": false,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bool",
										"typeString": "bool"
									},
									"typeName": {
										"id": 139,
										"name": "bool",
										"nodeType": "ElementaryTypeName",
										"src": "1405:4:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bool",
											"typeString": "bool"
										}
									},
									"visibility": "internal"
								}
							],
							"name": "tokenData",
							"nameLocation": "1322:9:0",
							"nodeType": "StructDefinition",
							"scope": 142,
							"src": "1315:105:0",
							"visibility": "public"
						}
					],
					"src": "33:1387:0"
				},
				"id": 0
			},
			"openzeppelin-contracts/contracts/access/Ownable.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/access/Ownable.sol",
					"exportedSymbols": {
						"Context": [
							1620
						],
						"Ownable": [
							289
						]
					},
					"id": 290,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 143,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "105:24:1"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../utils/Context.sol",
							"id": 145,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 290,
							"sourceUnit": 1621,
							"src": "133:45:1",
							"symbolAliases": [
								{
									"foreign": {
										"id": 144,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1620,
										"src": "141:7:1",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 147,
										"name": "Context",
										"nameLocations": [
											"711:7:1"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1620,
										"src": "711:7:1"
									},
									"id": 148,
									"nodeType": "InheritanceSpecifier",
									"src": "711:7:1"
								}
							],
							"canonicalName": "Ownable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 146,
								"nodeType": "StructuredDocumentation",
								"src": "182:498:1",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 289,
							"linearizedBaseContracts": [
								289,
								1620
							],
							"name": "Ownable",
							"nameLocation": "700:7:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"id": 150,
									"mutability": "mutable",
									"name": "_owner",
									"nameLocation": "742:6:1",
									"nodeType": "VariableDeclaration",
									"scope": 289,
									"src": "726:22:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 149,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "726:7:1",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 151,
										"nodeType": "StructuredDocumentation",
										"src": "757:87:1",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 155,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "856:26:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "891:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 155,
												"src": "883:15:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 152,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "883:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "882:17:1"
									},
									"src": "850:50:1"
								},
								{
									"documentation": {
										"id": 156,
										"nodeType": "StructuredDocumentation",
										"src": "908:84:1",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 160,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1004:19:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 159,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 158,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1032:5:1",
												"nodeType": "VariableDeclaration",
												"scope": 160,
												"src": "1024:13:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 157,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1024:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1023:15:1"
									},
									"src": "998:41:1"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 166,
									"name": "OwnershipTransferred",
									"nameLocation": "1053:20:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 165,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1090:13:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "1074:29:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1074:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 164,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1121:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 166,
												"src": "1105:24:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 163,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1105:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1073:57:1"
									},
									"src": "1047:84:1"
								},
								{
									"body": {
										"id": 191,
										"nodeType": "Block",
										"src": "1296:158:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 177,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 172,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 169,
														"src": "1311:12:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 175,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1335:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 174,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1327:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 173,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "1327:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 176,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1327:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1311:26:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 186,
												"nodeType": "IfStatement",
												"src": "1307:97:1",
												"trueBody": {
													"id": 185,
													"nodeType": "Block",
													"src": "1339:65:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 181,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "1389:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 180,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1381:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 179,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1381:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 182,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1381:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 178,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 160,
																	"src": "1361:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 183,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1361:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 184,
															"nodeType": "RevertStatement",
															"src": "1354:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 188,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 169,
															"src": "1433:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 187,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 288,
														"src": "1414:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 189,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1414:32:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 190,
												"nodeType": "ExpressionStatement",
												"src": "1414:32:1"
											}
										]
									},
									"documentation": {
										"id": 167,
										"nodeType": "StructuredDocumentation",
										"src": "1139:117:1",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 192,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 170,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 169,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1282:12:1",
												"nodeType": "VariableDeclaration",
												"scope": 192,
												"src": "1274:20:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 168,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1274:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1273:22:1"
									},
									"returnParameters": {
										"id": 171,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1296:0:1"
									},
									"scope": 289,
									"src": "1262:192:1",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 199,
										"nodeType": "Block",
										"src": "1568:44:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 195,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 226,
														"src": "1579:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 196,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1579:13:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 197,
												"nodeType": "ExpressionStatement",
												"src": "1579:13:1"
											},
											{
												"id": 198,
												"nodeType": "PlaceholderStatement",
												"src": "1603:1:1"
											}
										]
									},
									"documentation": {
										"id": 193,
										"nodeType": "StructuredDocumentation",
										"src": "1462:79:1",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 200,
									"name": "onlyOwner",
									"nameLocation": "1556:9:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 194,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1565:2:1"
									},
									"src": "1547:65:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 208,
										"nodeType": "Block",
										"src": "1748:32:1",
										"statements": [
											{
												"expression": {
													"id": 206,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "1766:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 205,
												"id": 207,
												"nodeType": "Return",
												"src": "1759:13:1"
											}
										]
									},
									"documentation": {
										"id": 201,
										"nodeType": "StructuredDocumentation",
										"src": "1620:67:1",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 209,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "1702:5:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 202,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1707:2:1"
									},
									"returnParameters": {
										"id": 205,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 204,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 209,
												"src": "1739:7:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 203,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1739:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1738:9:1"
									},
									"scope": 289,
									"src": "1693:87:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 225,
										"nodeType": "Block",
										"src": "1903:121:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 213,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 209,
															"src": "1918:5:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 214,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1918:7:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 215,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1610,
															"src": "1929:10:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 216,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1929:12:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "1918:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 224,
												"nodeType": "IfStatement",
												"src": "1914:103:1",
												"trueBody": {
													"id": 223,
													"nodeType": "Block",
													"src": "1943:74:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 219,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1610,
																			"src": "1992:10:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 220,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1992:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 218,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 155,
																	"src": "1965:26:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 221,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1965:40:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 222,
															"nodeType": "RevertStatement",
															"src": "1958:47:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 210,
										"nodeType": "StructuredDocumentation",
										"src": "1788:64:1",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 226,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "1867:11:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 211,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1878:2:1"
									},
									"returnParameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1903:0:1"
									},
									"scope": 289,
									"src": "1858:166:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 239,
										"nodeType": "Block",
										"src": "2422:49:1",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 235,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2460:1:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 234,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2452:7:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 233,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "2452:7:1",
																	"typeDescriptions": {}
																}
															},
															"id": 236,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2452:10:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 232,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 288,
														"src": "2433:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 237,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2433:30:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 238,
												"nodeType": "ExpressionStatement",
												"src": "2433:30:1"
											}
										]
									},
									"documentation": {
										"id": 227,
										"nodeType": "StructuredDocumentation",
										"src": "2032:330:1",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 240,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 230,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 229,
												"name": "onlyOwner",
												"nameLocations": [
													"2412:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 200,
												"src": "2412:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2412:9:1"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "2377:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 228,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2394:2:1"
									},
									"returnParameters": {
										"id": 231,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2422:0:1"
									},
									"scope": 289,
									"src": "2368:103:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 267,
										"nodeType": "Block",
										"src": "2696:150:1",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 253,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 248,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 243,
														"src": "2711:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 251,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2731:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 250,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2723:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 249,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2723:7:1",
																"typeDescriptions": {}
															}
														},
														"id": 252,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2723:10:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2711:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 262,
												"nodeType": "IfStatement",
												"src": "2707:93:1",
												"trueBody": {
													"id": 261,
													"nodeType": "Block",
													"src": "2735:65:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 257,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2785:1:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 256,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2777:7:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 255,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2777:7:1",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 258,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2777:10:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 254,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 160,
																	"src": "2757:19:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 259,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2757:31:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 260,
															"nodeType": "RevertStatement",
															"src": "2750:38:1"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 264,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 243,
															"src": "2829:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 263,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 288,
														"src": "2810:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 265,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2810:28:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 266,
												"nodeType": "ExpressionStatement",
												"src": "2810:28:1"
											}
										]
									},
									"documentation": {
										"id": 241,
										"nodeType": "StructuredDocumentation",
										"src": "2479:141:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 268,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 246,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 245,
												"name": "onlyOwner",
												"nameLocations": [
													"2686:9:1"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 200,
												"src": "2686:9:1"
											},
											"nodeType": "ModifierInvocation",
											"src": "2686:9:1"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "2635:17:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 244,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 243,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "2661:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 268,
												"src": "2653:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 242,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2653:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2652:18:1"
									},
									"returnParameters": {
										"id": 247,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2696:0:1"
									},
									"scope": 289,
									"src": "2626:220:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 287,
										"nodeType": "Block",
										"src": "3069:128:1",
										"statements": [
											{
												"assignments": [
													275
												],
												"declarations": [
													{
														"constant": false,
														"id": 275,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3088:8:1",
														"nodeType": "VariableDeclaration",
														"scope": 287,
														"src": "3080:16:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 274,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3080:7:1",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 277,
												"initialValue": {
													"id": 276,
													"name": "_owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 150,
													"src": "3099:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3080:25:1"
											},
											{
												"expression": {
													"id": 280,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 278,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 150,
														"src": "3116:6:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 279,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 271,
														"src": "3125:8:1",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3116:17:1",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 281,
												"nodeType": "ExpressionStatement",
												"src": "3116:17:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 283,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 275,
															"src": "3170:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 284,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 271,
															"src": "3180:8:1",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 282,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 166,
														"src": "3149:20:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 285,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3149:40:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 286,
												"nodeType": "EmitStatement",
												"src": "3144:45:1"
											}
										]
									},
									"documentation": {
										"id": 269,
										"nodeType": "StructuredDocumentation",
										"src": "2854:146:1",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 288,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3015:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 272,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 271,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3042:8:1",
												"nodeType": "VariableDeclaration",
												"scope": 288,
												"src": "3034:16:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 270,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3034:7:1",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3033:18:1"
									},
									"returnParameters": {
										"id": 273,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3069:0:1"
									},
									"scope": 289,
									"src": "3006:191:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 290,
							"src": "682:2518:1",
							"usedErrors": [
								155,
								160
							],
							"usedEvents": [
								166
							]
						}
					],
					"src": "105:3097:1"
				},
				"id": 1
			},
			"openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
					"exportedSymbols": {
						"IERC1155Errors": [
							426
						],
						"IERC20Errors": [
							331
						],
						"IERC721Errors": [
							379
						]
					},
					"id": 427,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 291,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "114:24:2"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 292,
								"nodeType": "StructuredDocumentation",
								"src": "142:142:2",
								"text": " @dev Standard ERC20 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens."
							},
							"fullyImplemented": true,
							"id": 331,
							"linearizedBaseContracts": [
								331
							],
							"name": "IERC20Errors",
							"nameLocation": "296:12:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 293,
										"nodeType": "StructuredDocumentation",
										"src": "316:314:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "e450d38c",
									"id": 301,
									"name": "ERC20InsufficientBalance",
									"nameLocation": "642:24:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 295,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "675:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "667:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 294,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "667:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 297,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "691:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "683:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 296,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "683:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "708:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 301,
												"src": "700:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 298,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "700:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "666:49:2"
									},
									"src": "636:80:2"
								},
								{
									"documentation": {
										"id": 302,
										"nodeType": "StructuredDocumentation",
										"src": "724:155:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "96c6fd1e",
									"id": 306,
									"name": "ERC20InvalidSender",
									"nameLocation": "891:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 305,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 304,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "918:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 306,
												"src": "910:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 303,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "910:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "909:16:2"
									},
									"src": "885:41:2"
								},
								{
									"documentation": {
										"id": 307,
										"nodeType": "StructuredDocumentation",
										"src": "934:162:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "ec442f05",
									"id": 311,
									"name": "ERC20InvalidReceiver",
									"nameLocation": "1108:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 309,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "1137:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 311,
												"src": "1129:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1129:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1128:18:2"
									},
									"src": "1102:45:2"
								},
								{
									"documentation": {
										"id": 312,
										"nodeType": "StructuredDocumentation",
										"src": "1155:350:2",
										"text": " @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n @param spender Address that may be allowed to operate on tokens without being their owner.\n @param allowance Amount of tokens a `spender` is allowed to operate with.\n @param needed Minimum amount required to perform a transfer."
									},
									"errorSelector": "fb8f41b2",
									"id": 320,
									"name": "ERC20InsufficientAllowance",
									"nameLocation": "1517:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 319,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 314,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "1552:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1544:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 313,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1544:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "allowance",
												"nameLocation": "1569:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1561:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 315,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1561:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 318,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "1588:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 320,
												"src": "1580:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 317,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1580:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1543:52:2"
									},
									"src": "1511:85:2"
								},
								{
									"documentation": {
										"id": 321,
										"nodeType": "StructuredDocumentation",
										"src": "1604:177:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "e602df05",
									"id": 325,
									"name": "ERC20InvalidApprover",
									"nameLocation": "1793:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 324,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 323,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "1822:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 325,
												"src": "1814:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 322,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1814:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1813:18:2"
									},
									"src": "1787:45:2"
								},
								{
									"documentation": {
										"id": 326,
										"nodeType": "StructuredDocumentation",
										"src": "1840:198:2",
										"text": " @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n @param spender Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "94280d62",
									"id": 330,
									"name": "ERC20InvalidSpender",
									"nameLocation": "2050:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 329,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 328,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "2078:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 330,
												"src": "2070:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 327,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2070:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2069:17:2"
									},
									"src": "2044:43:2"
								}
							],
							"scope": 427,
							"src": "286:1804:2",
							"usedErrors": [
								301,
								306,
								311,
								320,
								325,
								330
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 332,
								"nodeType": "StructuredDocumentation",
								"src": "2094:144:2",
								"text": " @dev Standard ERC721 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens."
							},
							"fullyImplemented": true,
							"id": 379,
							"linearizedBaseContracts": [
								379
							],
							"name": "IERC721Errors",
							"nameLocation": "2250:13:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 333,
										"nodeType": "StructuredDocumentation",
										"src": "2271:223:2",
										"text": " @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n Used in balance queries.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "89c62b64",
									"id": 337,
									"name": "ERC721InvalidOwner",
									"nameLocation": "2506:18:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 336,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 335,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2533:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 337,
												"src": "2525:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 334,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2525:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2524:15:2"
									},
									"src": "2500:40:2"
								},
								{
									"documentation": {
										"id": 338,
										"nodeType": "StructuredDocumentation",
										"src": "2548:135:2",
										"text": " @dev Indicates a `tokenId` whose `owner` is the zero address.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "7e273289",
									"id": 342,
									"name": "ERC721NonexistentToken",
									"nameLocation": "2695:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 341,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 340,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2726:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 342,
												"src": "2718:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 339,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2718:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2717:17:2"
									},
									"src": "2689:46:2"
								},
								{
									"documentation": {
										"id": 343,
										"nodeType": "StructuredDocumentation",
										"src": "2743:294:2",
										"text": " @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param tokenId Identifier number of a token.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "64283d7b",
									"id": 351,
									"name": "ERC721IncorrectOwner",
									"nameLocation": "3049:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 345,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3078:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "3070:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 344,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3070:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 347,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3094:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "3086:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 346,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3086:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "3111:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "3103:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 348,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3103:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3069:48:2"
									},
									"src": "3043:75:2"
								},
								{
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "3126:155:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "73c6ac6e",
									"id": 356,
									"name": "ERC721InvalidSender",
									"nameLocation": "3293:19:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 355,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "3321:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 356,
												"src": "3313:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3313:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3312:16:2"
									},
									"src": "3287:42:2"
								},
								{
									"documentation": {
										"id": 357,
										"nodeType": "StructuredDocumentation",
										"src": "3337:162:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "64a0ae92",
									"id": 361,
									"name": "ERC721InvalidReceiver",
									"nameLocation": "3511:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 360,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 359,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "3541:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 361,
												"src": "3533:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 358,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3533:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3532:18:2"
									},
									"src": "3505:46:2"
								},
								{
									"documentation": {
										"id": 362,
										"nodeType": "StructuredDocumentation",
										"src": "3559:251:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "177e802f",
									"id": 368,
									"name": "ERC721InsufficientApproval",
									"nameLocation": "3822:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 364,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3857:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "3849:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 363,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3849:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 366,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3875:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 368,
												"src": "3867:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 365,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3867:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3848:35:2"
									},
									"src": "3816:68:2"
								},
								{
									"documentation": {
										"id": 369,
										"nodeType": "StructuredDocumentation",
										"src": "3892:177:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "a9fbf51f",
									"id": 373,
									"name": "ERC721InvalidApprover",
									"nameLocation": "4081:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 372,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 371,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "4111:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 373,
												"src": "4103:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 370,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4103:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4102:18:2"
									},
									"src": "4075:46:2"
								},
								{
									"documentation": {
										"id": 374,
										"nodeType": "StructuredDocumentation",
										"src": "4129:200:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "5b08ba18",
									"id": 378,
									"name": "ERC721InvalidOperator",
									"nameLocation": "4341:21:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 377,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 376,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4371:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 378,
												"src": "4363:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 375,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4363:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4362:18:2"
									},
									"src": "4335:46:2"
								}
							],
							"scope": 427,
							"src": "2240:2144:2",
							"usedErrors": [
								337,
								342,
								351,
								356,
								361,
								368,
								373,
								378
							],
							"usedEvents": []
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC1155Errors",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 380,
								"nodeType": "StructuredDocumentation",
								"src": "4388:146:2",
								"text": " @dev Standard ERC1155 Errors\n Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens."
							},
							"fullyImplemented": true,
							"id": 426,
							"linearizedBaseContracts": [
								426
							],
							"name": "IERC1155Errors",
							"nameLocation": "4546:14:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 381,
										"nodeType": "StructuredDocumentation",
										"src": "4568:367:2",
										"text": " @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred.\n @param balance Current balance for the interacting account.\n @param needed Minimum amount required to perform a transfer.\n @param tokenId Identifier number of a token."
									},
									"errorSelector": "03dee4c5",
									"id": 391,
									"name": "ERC1155InsufficientBalance",
									"nameLocation": "4947:26:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 390,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 383,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "4982:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "4974:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 382,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4974:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 385,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "4998:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "4990:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 384,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4990:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "needed",
												"nameLocation": "5015:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "5007:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 386,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5007:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5031:7:2",
												"nodeType": "VariableDeclaration",
												"scope": 391,
												"src": "5023:15:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 388,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5023:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4973:66:2"
									},
									"src": "4941:99:2"
								},
								{
									"documentation": {
										"id": 392,
										"nodeType": "StructuredDocumentation",
										"src": "5048:155:2",
										"text": " @dev Indicates a failure with the token `sender`. Used in transfers.\n @param sender Address whose tokens are being transferred."
									},
									"errorSelector": "01a83514",
									"id": 396,
									"name": "ERC1155InvalidSender",
									"nameLocation": "5215:20:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 395,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 394,
												"mutability": "mutable",
												"name": "sender",
												"nameLocation": "5244:6:2",
												"nodeType": "VariableDeclaration",
												"scope": 396,
												"src": "5236:14:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 393,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5236:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5235:16:2"
									},
									"src": "5209:43:2"
								},
								{
									"documentation": {
										"id": 397,
										"nodeType": "StructuredDocumentation",
										"src": "5260:162:2",
										"text": " @dev Indicates a failure with the token `receiver`. Used in transfers.\n @param receiver Address to which tokens are being transferred."
									},
									"errorSelector": "57f447ce",
									"id": 401,
									"name": "ERC1155InvalidReceiver",
									"nameLocation": "5434:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 400,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 399,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "5465:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 401,
												"src": "5457:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 398,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5457:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5456:18:2"
									},
									"src": "5428:47:2"
								},
								{
									"documentation": {
										"id": 402,
										"nodeType": "StructuredDocumentation",
										"src": "5483:260:2",
										"text": " @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n @param operator Address that may be allowed to operate on tokens without being their owner.\n @param owner Address of the current owner of a token."
									},
									"errorSelector": "e237d922",
									"id": 408,
									"name": "ERC1155MissingApprovalForAll",
									"nameLocation": "5755:28:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 407,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 404,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5792:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 408,
												"src": "5784:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 403,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5784:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 406,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5810:5:2",
												"nodeType": "VariableDeclaration",
												"scope": 408,
												"src": "5802:13:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 405,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5802:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5783:33:2"
									},
									"src": "5749:68:2"
								},
								{
									"documentation": {
										"id": 409,
										"nodeType": "StructuredDocumentation",
										"src": "5825:177:2",
										"text": " @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n @param approver Address initiating an approval operation."
									},
									"errorSelector": "3e31884e",
									"id": 413,
									"name": "ERC1155InvalidApprover",
									"nameLocation": "6014:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "approver",
												"nameLocation": "6045:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 413,
												"src": "6037:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 410,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6037:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6036:18:2"
									},
									"src": "6008:47:2"
								},
								{
									"documentation": {
										"id": 414,
										"nodeType": "StructuredDocumentation",
										"src": "6063:200:2",
										"text": " @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n @param operator Address that may be allowed to operate on tokens without being their owner."
									},
									"errorSelector": "ced3e100",
									"id": 418,
									"name": "ERC1155InvalidOperator",
									"nameLocation": "6275:22:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 417,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 416,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "6306:8:2",
												"nodeType": "VariableDeclaration",
												"scope": 418,
												"src": "6298:16:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 415,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6298:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6297:18:2"
									},
									"src": "6269:47:2"
								},
								{
									"documentation": {
										"id": 419,
										"nodeType": "StructuredDocumentation",
										"src": "6324:285:2",
										"text": " @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n Used in batch transfers.\n @param idsLength Length of the array of token identifiers\n @param valuesLength Length of the array of token amounts"
									},
									"errorSelector": "5b059991",
									"id": 425,
									"name": "ERC1155InvalidArrayLength",
									"nameLocation": "6621:25:2",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 424,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 421,
												"mutability": "mutable",
												"name": "idsLength",
												"nameLocation": "6655:9:2",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "6647:17:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 420,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6647:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 423,
												"mutability": "mutable",
												"name": "valuesLength",
												"nameLocation": "6674:12:2",
												"nodeType": "VariableDeclaration",
												"scope": 425,
												"src": "6666:20:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 422,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6666:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6646:41:2"
									},
									"src": "6615:73:2"
								}
							],
							"scope": 427,
							"src": "4536:2155:2",
							"usedErrors": [
								391,
								396,
								401,
								408,
								413,
								418,
								425
							],
							"usedEvents": []
						}
					],
					"src": "114:6579:2"
				},
				"id": 2
			},
			"openzeppelin-contracts/contracts/token/ERC721/ERC721.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/ERC721.sol",
					"exportedSymbols": {
						"Context": [
							1620
						],
						"ERC165": [
							1899
						],
						"ERC721": [
							1435
						],
						"IERC165": [
							1911
						],
						"IERC721": [
							1552
						],
						"IERC721Errors": [
							379
						],
						"IERC721Metadata": [
							1598
						],
						"IERC721Receiver": [
							1570
						],
						"Strings": [
							1875
						]
					},
					"id": 1436,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 428,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "110:24:3"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
							"file": "./IERC721.sol",
							"id": 430,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1553,
							"src": "138:38:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 429,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1552,
										"src": "146:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
							"file": "./IERC721Receiver.sol",
							"id": 432,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1571,
							"src": "178:54:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 431,
										"name": "IERC721Receiver",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1570,
										"src": "186:15:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
							"file": "./extensions/IERC721Metadata.sol",
							"id": 434,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1599,
							"src": "234:65:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 433,
										"name": "IERC721Metadata",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1598,
										"src": "242:15:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/Context.sol",
							"file": "../../utils/Context.sol",
							"id": 436,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1621,
							"src": "301:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 435,
										"name": "Context",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1620,
										"src": "309:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/Strings.sol",
							"file": "../../utils/Strings.sol",
							"id": 438,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1876,
							"src": "351:48:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 437,
										"name": "Strings",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1875,
										"src": "359:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
							"file": "../../utils/introspection/ERC165.sol",
							"id": 441,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 1900,
							"src": "401:69:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 439,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1911,
										"src": "409:7:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								},
								{
									"foreign": {
										"id": 440,
										"name": "ERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1899,
										"src": "418:6:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/interfaces/draft-IERC6093.sol",
							"file": "../../interfaces/draft-IERC6093.sol",
							"id": 443,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1436,
							"sourceUnit": 427,
							"src": "472:66:3",
							"symbolAliases": [
								{
									"foreign": {
										"id": 442,
										"name": "IERC721Errors",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 379,
										"src": "480:13:3",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 445,
										"name": "Context",
										"nameLocations": [
											"822:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1620,
										"src": "822:7:3"
									},
									"id": 446,
									"nodeType": "InheritanceSpecifier",
									"src": "822:7:3"
								},
								{
									"baseName": {
										"id": 447,
										"name": "ERC165",
										"nameLocations": [
											"831:6:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1899,
										"src": "831:6:3"
									},
									"id": 448,
									"nodeType": "InheritanceSpecifier",
									"src": "831:6:3"
								},
								{
									"baseName": {
										"id": 449,
										"name": "IERC721",
										"nameLocations": [
											"839:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1552,
										"src": "839:7:3"
									},
									"id": 450,
									"nodeType": "InheritanceSpecifier",
									"src": "839:7:3"
								},
								{
									"baseName": {
										"id": 451,
										"name": "IERC721Metadata",
										"nameLocations": [
											"848:15:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1598,
										"src": "848:15:3"
									},
									"id": 452,
									"nodeType": "InheritanceSpecifier",
									"src": "848:15:3"
								},
								{
									"baseName": {
										"id": 453,
										"name": "IERC721Errors",
										"nameLocations": [
											"865:13:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 379,
										"src": "865:13:3"
									},
									"id": 454,
									"nodeType": "InheritanceSpecifier",
									"src": "865:13:3"
								}
							],
							"canonicalName": "ERC721",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 444,
								"nodeType": "StructuredDocumentation",
								"src": "542:250:3",
								"text": " @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n the Metadata extension, but not including the Enumerable extension, which is available separately as\n {ERC721Enumerable}."
							},
							"fullyImplemented": true,
							"id": 1435,
							"linearizedBaseContracts": [
								1435,
								379,
								1598,
								1552,
								1899,
								1911,
								1620
							],
							"name": "ERC721",
							"nameLocation": "812:6:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 457,
									"libraryName": {
										"id": 455,
										"name": "Strings",
										"nameLocations": [
											"892:7:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1875,
										"src": "892:7:3"
									},
									"nodeType": "UsingForDirective",
									"src": "886:26:3",
									"typeName": {
										"id": 456,
										"name": "uint256",
										"nodeType": "ElementaryTypeName",
										"src": "904:7:3",
										"typeDescriptions": {
											"typeIdentifier": "t_uint256",
											"typeString": "uint256"
										}
									}
								},
								{
									"constant": false,
									"id": 459,
									"mutability": "mutable",
									"name": "_name",
									"nameLocation": "954:5:3",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "939:20:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 458,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "939:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 461,
									"mutability": "mutable",
									"name": "_symbol",
									"nameLocation": "1004:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "989:22:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_string_storage",
										"typeString": "string"
									},
									"typeName": {
										"id": 460,
										"name": "string",
										"nodeType": "ElementaryTypeName",
										"src": "989:6:3",
										"typeDescriptions": {
											"typeIdentifier": "t_string_storage_ptr",
											"typeString": "string"
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 465,
									"mutability": "mutable",
									"name": "_owners",
									"nameLocation": "1064:7:3",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "1020:51:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 464,
										"keyName": "tokenId",
										"keyNameLocation": "1036:7:3",
										"keyType": {
											"id": 462,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1028:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1020:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 463,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1047:7:3",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 469,
									"mutability": "mutable",
									"name": "_balances",
									"nameLocation": "1122:9:3",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "1080:51:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
										"typeString": "mapping(address => uint256)"
									},
									"typeName": {
										"id": 468,
										"keyName": "owner",
										"keyNameLocation": "1096:5:3",
										"keyType": {
											"id": 466,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1088:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1080:33:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
											"typeString": "mapping(address => uint256)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 467,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1105:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 473,
									"mutability": "mutable",
									"name": "_tokenApprovals",
									"nameLocation": "1184:15:3",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "1140:59:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
										"typeString": "mapping(uint256 => address)"
									},
									"typeName": {
										"id": 472,
										"keyName": "tokenId",
										"keyNameLocation": "1156:7:3",
										"keyType": {
											"id": 470,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "1148:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"nodeType": "Mapping",
										"src": "1140:35:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
											"typeString": "mapping(uint256 => address)"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 471,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1167:7:3",
											"stateMutability": "nonpayable",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										}
									},
									"visibility": "private"
								},
								{
									"constant": false,
									"id": 479,
									"mutability": "mutable",
									"name": "_operatorApprovals",
									"nameLocation": "1276:18:3",
									"nodeType": "VariableDeclaration",
									"scope": 1435,
									"src": "1208:86:3",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
										"typeString": "mapping(address => mapping(address => bool))"
									},
									"typeName": {
										"id": 478,
										"keyName": "owner",
										"keyNameLocation": "1224:5:3",
										"keyType": {
											"id": 474,
											"name": "address",
											"nodeType": "ElementaryTypeName",
											"src": "1216:7:3",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											}
										},
										"nodeType": "Mapping",
										"src": "1208:59:3",
										"typeDescriptions": {
											"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
											"typeString": "mapping(address => mapping(address => bool))"
										},
										"valueName": "",
										"valueNameLocation": "-1:-1:-1",
										"valueType": {
											"id": 477,
											"keyName": "operator",
											"keyNameLocation": "1249:8:3",
											"keyType": {
												"id": 475,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "1241:7:3",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"nodeType": "Mapping",
											"src": "1233:33:3",
											"typeDescriptions": {
												"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
												"typeString": "mapping(address => bool)"
											},
											"valueName": "",
											"valueNameLocation": "-1:-1:-1",
											"valueType": {
												"id": 476,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "1261:4:3",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											}
										}
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 495,
										"nodeType": "Block",
										"src": "1475:60:3",
										"statements": [
											{
												"expression": {
													"id": 489,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 487,
														"name": "_name",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 459,
														"src": "1486:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 488,
														"name": "name_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 482,
														"src": "1494:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1486:13:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 490,
												"nodeType": "ExpressionStatement",
												"src": "1486:13:3"
											},
											{
												"expression": {
													"id": 493,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 491,
														"name": "_symbol",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 461,
														"src": "1510:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_storage",
															"typeString": "string storage ref"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 492,
														"name": "symbol_",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 484,
														"src": "1520:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"src": "1510:17:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"id": 494,
												"nodeType": "ExpressionStatement",
												"src": "1510:17:3"
											}
										]
									},
									"documentation": {
										"id": 480,
										"nodeType": "StructuredDocumentation",
										"src": "1303:110:3",
										"text": " @dev Initializes the contract by setting a `name` and a `symbol` to the token collection."
									},
									"id": 496,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 485,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "name_",
												"nameLocation": "1445:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "1431:19:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 481,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1431:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 484,
												"mutability": "mutable",
												"name": "symbol_",
												"nameLocation": "1466:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 496,
												"src": "1452:21:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 483,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1452:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1430:44:3"
									},
									"returnParameters": {
										"id": 486,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1475:0:3"
									},
									"scope": 1435,
									"src": "1419:116:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1898,
										1910
									],
									"body": {
										"id": 526,
										"nodeType": "Block",
										"src": "1715:197:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 524,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 519,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 512,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 507,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 499,
																"src": "1746:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 509,
																			"name": "IERC721",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1552,
																			"src": "1766:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$1552_$",
																				"typeString": "type(contract IERC721)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721_$1552_$",
																				"typeString": "type(contract IERC721)"
																			}
																		],
																		"id": 508,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "1761:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 510,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1761:13:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721_$1552",
																		"typeString": "type(contract IERC721)"
																	}
																},
																"id": 511,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1775:11:3",
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "1761:25:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "1746:40:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "||",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_bytes4",
																"typeString": "bytes4"
															},
															"id": 518,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 513,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 499,
																"src": "1803:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 515,
																			"name": "IERC721Metadata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1598,
																			"src": "1823:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1598_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_type$_t_contract$_IERC721Metadata_$1598_$",
																				"typeString": "type(contract IERC721Metadata)"
																			}
																		],
																		"id": 514,
																		"name": "type",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 4294967269,
																		"src": "1818:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																			"typeString": "function () pure"
																		}
																	},
																	"id": 516,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1818:21:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_meta_type_t_contract$_IERC721Metadata_$1598",
																		"typeString": "type(contract IERC721Metadata)"
																	}
																},
																"id": 517,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "1840:11:3",
																"memberName": "interfaceId",
																"nodeType": "MemberAccess",
																"src": "1818:33:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"src": "1803:48:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "1746:105:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"arguments": [
															{
																"id": 522,
																"name": "interfaceId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 499,
																"src": "1892:11:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															],
															"expression": {
																"id": 520,
																"name": "super",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967271,
																"src": "1868:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_super$_ERC721_$1435_$",
																	"typeString": "type(contract super ERC721)"
																}
															},
															"id": 521,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1874:17:3",
															"memberName": "supportsInterface",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 1898,
															"src": "1868:23:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_bytes4_$returns$_t_bool_$",
																"typeString": "function (bytes4) view returns (bool)"
															}
														},
														"id": 523,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "1868:36:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1746:158:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 506,
												"id": 525,
												"nodeType": "Return",
												"src": "1726:178:3"
											}
										]
									},
									"documentation": {
										"id": 497,
										"nodeType": "StructuredDocumentation",
										"src": "1543:58:3",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 527,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "1616:17:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 503,
										"nodeType": "OverrideSpecifier",
										"overrides": [
											{
												"id": 501,
												"name": "ERC165",
												"nameLocations": [
													"1683:6:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1899,
												"src": "1683:6:3"
											},
											{
												"id": 502,
												"name": "IERC165",
												"nameLocations": [
													"1691:7:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 1911,
												"src": "1691:7:3"
											}
										],
										"src": "1674:25:3"
									},
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 499,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "1641:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "1634:18:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 498,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1634:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1633:20:3"
									},
									"returnParameters": {
										"id": 506,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 505,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 527,
												"src": "1709:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 504,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1709:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1708:6:3"
									},
									"scope": 1435,
									"src": "1607:305:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1477
									],
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "2048:141:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 540,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 535,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "2063:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 538,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2080:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 537,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2072:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 536,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2072:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 539,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2072:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2063:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 549,
												"nodeType": "IfStatement",
												"src": "2059:89:3",
												"trueBody": {
													"id": 548,
													"nodeType": "Block",
													"src": "2084:64:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 544,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2133:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 543,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2125:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 542,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2125:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 545,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2125:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 541,
																	"name": "ERC721InvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 337,
																	"src": "2106:18:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 546,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2106:30:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 547,
															"nodeType": "RevertStatement",
															"src": "2099:37:3"
														}
													]
												}
											},
											{
												"expression": {
													"baseExpression": {
														"id": 550,
														"name": "_balances",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 469,
														"src": "2165:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
															"typeString": "mapping(address => uint256)"
														}
													},
													"id": 552,
													"indexExpression": {
														"id": 551,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 530,
														"src": "2175:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "2165:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 534,
												"id": 553,
												"nodeType": "Return",
												"src": "2158:23:3"
											}
										]
									},
									"documentation": {
										"id": 528,
										"nodeType": "StructuredDocumentation",
										"src": "1920:50:3",
										"text": " @dev See {IERC721-balanceOf}."
									},
									"functionSelector": "70a08231",
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "1985:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 530,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "2003:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "1995:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 529,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1995:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1994:15:3"
									},
									"returnParameters": {
										"id": 534,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 533,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "2039:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 532,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2039:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2038:9:3"
									},
									"scope": 1435,
									"src": "1976:213:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1485
									],
									"body": {
										"id": 567,
										"nodeType": "Block",
										"src": "2323:48:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 564,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 558,
															"src": "2355:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 563,
														"name": "_requireOwned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "2341:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 565,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2341:22:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 562,
												"id": 566,
												"nodeType": "Return",
												"src": "2334:29:3"
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "2197:48:3",
										"text": " @dev See {IERC721-ownerOf}."
									},
									"functionSelector": "6352211e",
									"id": 568,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "2260:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 559,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 558,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2276:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "2268:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 557,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2268:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2267:17:3"
									},
									"returnParameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 568,
												"src": "2314:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 560,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2314:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2313:9:3"
									},
									"scope": 1435,
									"src": "2251:120:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1583
									],
									"body": {
										"id": 576,
										"nodeType": "Block",
										"src": "2498:31:3",
										"statements": [
											{
												"expression": {
													"id": 574,
													"name": "_name",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 459,
													"src": "2516:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 573,
												"id": 575,
												"nodeType": "Return",
												"src": "2509:12:3"
											}
										]
									},
									"documentation": {
										"id": 569,
										"nodeType": "StructuredDocumentation",
										"src": "2379:53:3",
										"text": " @dev See {IERC721Metadata-name}."
									},
									"functionSelector": "06fdde03",
									"id": 577,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "2447:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 570,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2451:2:3"
									},
									"returnParameters": {
										"id": 573,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 572,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 577,
												"src": "2483:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 571,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2483:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2482:15:3"
									},
									"scope": 1435,
									"src": "2438:91:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1589
									],
									"body": {
										"id": 585,
										"nodeType": "Block",
										"src": "2660:33:3",
										"statements": [
											{
												"expression": {
													"id": 583,
													"name": "_symbol",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 461,
													"src": "2678:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage",
														"typeString": "string storage ref"
													}
												},
												"functionReturnParameters": 582,
												"id": 584,
												"nodeType": "Return",
												"src": "2671:14:3"
											}
										]
									},
									"documentation": {
										"id": 578,
										"nodeType": "StructuredDocumentation",
										"src": "2537:55:3",
										"text": " @dev See {IERC721Metadata-symbol}."
									},
									"functionSelector": "95d89b41",
									"id": 586,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "2607:6:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2613:2:3"
									},
									"returnParameters": {
										"id": 582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 586,
												"src": "2645:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 580,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2645:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2644:15:3"
									},
									"scope": 1435,
									"src": "2598:95:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1597
									],
									"body": {
										"id": 621,
										"nodeType": "Block",
										"src": "2843:181:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 595,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 589,
															"src": "2868:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 594,
														"name": "_requireOwned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "2854:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 596,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2854:22:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 597,
												"nodeType": "ExpressionStatement",
												"src": "2854:22:3"
											},
											{
												"assignments": [
													599
												],
												"declarations": [
													{
														"constant": false,
														"id": 599,
														"mutability": "mutable",
														"name": "baseURI",
														"nameLocation": "2903:7:3",
														"nodeType": "VariableDeclaration",
														"scope": 621,
														"src": "2889:21:3",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string"
														},
														"typeName": {
															"id": 598,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2889:6:3",
															"typeDescriptions": {
																"typeIdentifier": "t_string_storage_ptr",
																"typeString": "string"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 602,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 600,
														"name": "_baseURI",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 631,
														"src": "2913:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () view returns (string memory)"
														}
													},
													"id": 601,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2913:10:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2889:34:3"
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 609,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 605,
																		"name": "baseURI",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 599,
																		"src": "2947:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 604,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "2941:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 603,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "2941:5:3",
																		"typeDescriptions": {}
																	}
																},
																"id": 606,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2941:14:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 607,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2956:6:3",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "2941:21:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 608,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2965:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "2941:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"hexValue": "",
														"id": 618,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3014:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
															"typeString": "literal_string \"\""
														},
														"value": ""
													},
													"id": 619,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2941:75:3",
													"trueExpression": {
														"arguments": [
															{
																"id": 613,
																"name": "baseURI",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 599,
																"src": "2983:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															},
															{
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"expression": {
																		"id": 614,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 589,
																		"src": "2992:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 615,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "3000:8:3",
																	"memberName": "toString",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1688,
																	"src": "2992:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (string memory)"
																	}
																},
																"id": 616,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2992:18:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																},
																{
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string memory"
																}
															],
															"expression": {
																"id": 611,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2969:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																	"typeString": "type(string storage pointer)"
																},
																"typeName": {
																	"id": 610,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "2969:6:3",
																	"typeDescriptions": {}
																}
															},
															"id": 612,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "2976:6:3",
															"memberName": "concat",
															"nodeType": "MemberAccess",
															"src": "2969:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
																"typeString": "function () pure returns (string memory)"
															}
														},
														"id": 617,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2969:42:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_string_memory_ptr",
															"typeString": "string memory"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 593,
												"id": 620,
												"nodeType": "Return",
												"src": "2934:82:3"
											}
										]
									},
									"documentation": {
										"id": 587,
										"nodeType": "StructuredDocumentation",
										"src": "2701:57:3",
										"text": " @dev See {IERC721Metadata-tokenURI}."
									},
									"functionSelector": "c87b56dd",
									"id": 622,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "2773:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 590,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 589,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2790:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "2782:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 588,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2782:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2781:17:3"
									},
									"returnParameters": {
										"id": 593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 592,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 622,
												"src": "2828:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 591,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2828:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2827:15:3"
									},
									"scope": 1435,
									"src": "2764:260:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 630,
										"nodeType": "Block",
										"src": "3339:28:3",
										"statements": [
											{
												"expression": {
													"hexValue": "",
													"id": 628,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "string",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "3357:2:3",
													"typeDescriptions": {
														"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
														"typeString": "literal_string \"\""
													},
													"value": ""
												},
												"functionReturnParameters": 627,
												"id": 629,
												"nodeType": "Return",
												"src": "3350:9:3"
											}
										]
									},
									"documentation": {
										"id": 623,
										"nodeType": "StructuredDocumentation",
										"src": "3032:235:3",
										"text": " @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n by default, can be overridden in child contracts."
									},
									"id": 631,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_baseURI",
									"nameLocation": "3282:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3290:2:3"
									},
									"returnParameters": {
										"id": 627,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 626,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 631,
												"src": "3324:13:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 625,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3324:6:3",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3323:15:3"
									},
									"scope": 1435,
									"src": "3273:94:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"baseFunctions": [
										1525
									],
									"body": {
										"id": 646,
										"nodeType": "Block",
										"src": "3490:54:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 640,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 634,
															"src": "3510:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 641,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 636,
															"src": "3514:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 642,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1610,
																"src": "3523:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 643,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3523:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 639,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1238,
															1304
														],
														"referencedDeclaration": 1238,
														"src": "3501:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$",
															"typeString": "function (address,uint256,address)"
														}
													},
													"id": 644,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3501:35:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 645,
												"nodeType": "ExpressionStatement",
												"src": "3501:35:3"
											}
										]
									},
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "3375:48:3",
										"text": " @dev See {IERC721-approve}."
									},
									"functionSelector": "095ea7b3",
									"id": 647,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "3438:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 637,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3454:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3446:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 633,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3446:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 636,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3466:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "3458:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3458:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3445:29:3"
									},
									"returnParameters": {
										"id": 638,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3490:0:3"
									},
									"scope": 1435,
									"src": "3429:115:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1541
									],
									"body": {
										"id": 663,
										"nodeType": "Block",
										"src": "3686:82:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 656,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 650,
															"src": "3711:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 655,
														"name": "_requireOwned",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1370,
														"src": "3697:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 657,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3697:22:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 658,
												"nodeType": "ExpressionStatement",
												"src": "3697:22:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 660,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 650,
															"src": "3752:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 659,
														"name": "_getApproved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 813,
														"src": "3739:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 661,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3739:21:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 654,
												"id": 662,
												"nodeType": "Return",
												"src": "3732:28:3"
											}
										]
									},
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "3552:52:3",
										"text": " @dev See {IERC721-getApproved}."
									},
									"functionSelector": "081812fc",
									"id": 664,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "3619:11:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3639:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "3631:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3631:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3630:17:3"
									},
									"returnParameters": {
										"id": 654,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 653,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 664,
												"src": "3677:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 652,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3677:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3676:9:3"
									},
									"scope": 1435,
									"src": "3610:158:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1533
									],
									"body": {
										"id": 679,
										"nodeType": "Block",
										"src": "3915:71:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 673,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1610,
																"src": "3945:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 674,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3945:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 675,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "3959:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 676,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 669,
															"src": "3969:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 672,
														"name": "_setApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1341,
														"src": "3926:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 677,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3926:52:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 678,
												"nodeType": "ExpressionStatement",
												"src": "3926:52:3"
											}
										]
									},
									"documentation": {
										"id": 665,
										"nodeType": "StructuredDocumentation",
										"src": "3776:58:3",
										"text": " @dev See {IERC721-setApprovalForAll}."
									},
									"functionSelector": "a22cb465",
									"id": 680,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "3849:17:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 670,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 667,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "3875:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "3867:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 666,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3867:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 669,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "3890:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 680,
												"src": "3885:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 668,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3885:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3866:33:3"
									},
									"returnParameters": {
										"id": 671,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3915:0:3"
									},
									"scope": 1435,
									"src": "3840:146:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1551
									],
									"body": {
										"id": 696,
										"nodeType": "Block",
										"src": "4151:61:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"baseExpression": {
															"id": 690,
															"name": "_operatorApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 479,
															"src": "4169:18:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																"typeString": "mapping(address => mapping(address => bool))"
															}
														},
														"id": 692,
														"indexExpression": {
															"id": 691,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 683,
															"src": "4188:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "IndexAccess",
														"src": "4169:25:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
															"typeString": "mapping(address => bool)"
														}
													},
													"id": 694,
													"indexExpression": {
														"id": 693,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 685,
														"src": "4195:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "4169:35:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 689,
												"id": 695,
												"nodeType": "Return",
												"src": "4162:42:3"
											}
										]
									},
									"documentation": {
										"id": 681,
										"nodeType": "StructuredDocumentation",
										"src": "3994:57:3",
										"text": " @dev See {IERC721-isApprovedForAll}."
									},
									"functionSelector": "e985e9c5",
									"id": 697,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4066:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 686,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 683,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "4091:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "4083:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 682,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4083:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 685,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4106:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "4098:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 684,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4098:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4082:33:3"
									},
									"returnParameters": {
										"id": 689,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 688,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 697,
												"src": "4145:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 687,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4145:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4144:6:3"
									},
									"scope": 1435,
									"src": "4057:155:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1517
									],
									"body": {
										"id": 742,
										"nodeType": "Block",
										"src": "4359:508:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 712,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 707,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 702,
														"src": "4374:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 710,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4388:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 709,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "4380:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 708,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "4380:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 711,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "4380:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4374:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 721,
												"nodeType": "IfStatement",
												"src": "4370:89:3",
												"trueBody": {
													"id": 720,
													"nodeType": "Block",
													"src": "4392:67:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 716,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "4444:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 715,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "4436:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 714,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "4436:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 717,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "4436:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 713,
																	"name": "ERC721InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 361,
																	"src": "4414:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 718,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4414:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 719,
															"nodeType": "RevertStatement",
															"src": "4407:40:3"
														}
													]
												}
											},
											{
												"assignments": [
													723
												],
												"declarations": [
													{
														"constant": false,
														"id": 723,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "4688:13:3",
														"nodeType": "VariableDeclaration",
														"scope": 742,
														"src": "4680:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 722,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "4680:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 730,
												"initialValue": {
													"arguments": [
														{
															"id": 725,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 702,
															"src": "4712:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 726,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 704,
															"src": "4716:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [],
															"expression": {
																"argumentTypes": [],
																"id": 727,
																"name": "_msgSender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1610,
																"src": "4725:10:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																	"typeString": "function () view returns (address)"
																}
															},
															"id": 728,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "4725:12:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 724,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 992,
														"src": "4704:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 729,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4704:34:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4680:58:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 733,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 731,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 723,
														"src": "4753:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"id": 732,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 700,
														"src": "4770:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "4753:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 741,
												"nodeType": "IfStatement",
												"src": "4749:111:3",
												"trueBody": {
													"id": 740,
													"nodeType": "Block",
													"src": "4776:84:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 735,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 700,
																		"src": "4819:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 736,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 704,
																		"src": "4825:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 737,
																		"name": "previousOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 723,
																		"src": "4834:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 734,
																	"name": "ERC721IncorrectOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 351,
																	"src": "4798:20:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$",
																		"typeString": "function (address,uint256,address) pure"
																	}
																},
																"id": 738,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4798:50:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 739,
															"nodeType": "RevertStatement",
															"src": "4791:57:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 698,
										"nodeType": "StructuredDocumentation",
										"src": "4220:53:3",
										"text": " @dev See {IERC721-transferFrom}."
									},
									"functionSelector": "23b872dd",
									"id": 743,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "4288:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 705,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 700,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4309:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 743,
												"src": "4301:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 699,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4301:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 702,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4323:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 743,
												"src": "4315:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 701,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4315:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 704,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4335:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 743,
												"src": "4327:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 703,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4327:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4300:43:3"
									},
									"returnParameters": {
										"id": 706,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4359:0:3"
									},
									"scope": 1435,
									"src": "4279:588:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1507
									],
									"body": {
										"id": 760,
										"nodeType": "Block",
										"src": "5014:58:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 754,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 746,
															"src": "5042:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 755,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 748,
															"src": "5048:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 756,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 750,
															"src": "5052:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 757,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "5061:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 753,
														"name": "safeTransferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															761,
															787
														],
														"referencedDeclaration": 787,
														"src": "5025:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 758,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5025:39:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 759,
												"nodeType": "ExpressionStatement",
												"src": "5025:39:3"
											}
										]
									},
									"documentation": {
										"id": 744,
										"nodeType": "StructuredDocumentation",
										"src": "4875:57:3",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "42842e0e",
									"id": 761,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "4947:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 751,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 746,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "4972:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "4964:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 745,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4964:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 748,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4986:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "4978:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 747,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4978:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 750,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4998:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 761,
												"src": "4990:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 749,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4990:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4963:43:3"
									},
									"returnParameters": {
										"id": 752,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5014:0:3"
									},
									"scope": 1435,
									"src": "4938:134:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"baseFunctions": [
										1497
									],
									"body": {
										"id": 786,
										"nodeType": "Block",
										"src": "5246:108:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 774,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "5270:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 775,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 766,
															"src": "5276:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 776,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 768,
															"src": "5280:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 773,
														"name": "transferFrom",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 743,
														"src": "5257:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 777,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5257:31:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 778,
												"nodeType": "ExpressionStatement",
												"src": "5257:31:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 780,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 764,
															"src": "5322:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 781,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 766,
															"src": "5328:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 782,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 768,
															"src": "5332:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 783,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 770,
															"src": "5341:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 779,
														"name": "_checkOnERC721Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1434,
														"src": "5299:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 784,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "5299:47:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 785,
												"nodeType": "ExpressionStatement",
												"src": "5299:47:3"
											}
										]
									},
									"documentation": {
										"id": 762,
										"nodeType": "StructuredDocumentation",
										"src": "5080:57:3",
										"text": " @dev See {IERC721-safeTransferFrom}."
									},
									"functionSelector": "b88d4fde",
									"id": 787,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "5152:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 771,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 764,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "5177:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "5169:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 763,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5169:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 766,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "5191:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "5183:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 765,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5183:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 768,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5203:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "5195:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 767,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5195:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 770,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "5225:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 787,
												"src": "5212:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 769,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5212:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5168:62:3"
									},
									"returnParameters": {
										"id": 772,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5246:0:3"
									},
									"scope": 1435,
									"src": "5143:211:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 799,
										"nodeType": "Block",
										"src": "5953:42:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 795,
														"name": "_owners",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 465,
														"src": "5971:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 797,
													"indexExpression": {
														"id": 796,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 790,
														"src": "5979:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "5971:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 794,
												"id": 798,
												"nodeType": "Return",
												"src": "5964:23:3"
											}
										]
									},
									"documentation": {
										"id": 788,
										"nodeType": "StructuredDocumentation",
										"src": "5362:510:3",
										"text": " @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\n core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\n consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\n `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`."
									},
									"id": 800,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_ownerOf",
									"nameLocation": "5887:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 791,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 790,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "5904:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "5896:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 789,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5896:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5895:17:3"
									},
									"returnParameters": {
										"id": 794,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 793,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 800,
												"src": "5944:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 792,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5944:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5943:9:3"
									},
									"scope": 1435,
									"src": "5878:117:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 812,
										"nodeType": "Block",
										"src": "6195:50:3",
										"statements": [
											{
												"expression": {
													"baseExpression": {
														"id": 808,
														"name": "_tokenApprovals",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 473,
														"src": "6213:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
															"typeString": "mapping(uint256 => address)"
														}
													},
													"id": 810,
													"indexExpression": {
														"id": 809,
														"name": "tokenId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 803,
														"src": "6229:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "IndexAccess",
													"src": "6213:24:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 807,
												"id": 811,
												"nodeType": "Return",
												"src": "6206:31:3"
											}
										]
									},
									"documentation": {
										"id": 801,
										"nodeType": "StructuredDocumentation",
										"src": "6003:107:3",
										"text": " @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted."
									},
									"id": 813,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getApproved",
									"nameLocation": "6125:12:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 804,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 803,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6146:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "6138:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 802,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6138:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6137:17:3"
									},
									"returnParameters": {
										"id": 807,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 806,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 813,
												"src": "6186:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 805,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6186:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6185:9:3"
									},
									"scope": 1435,
									"src": "6116:129:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 848,
										"nodeType": "Block",
										"src": "6674:167:3",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 846,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 830,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 825,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 818,
															"src": "6705:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 828,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "6724:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 827,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "6716:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 826,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "6716:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 829,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "6716:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "6705:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 844,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 838,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 833,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 831,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 816,
																			"src": "6744:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"id": 832,
																			"name": "spender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 818,
																			"src": "6753:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "6744:16:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 835,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 816,
																				"src": "6781:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 836,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 818,
																				"src": "6788:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 834,
																			"name": "isApprovedForAll",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 697,
																			"src": "6764:16:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																				"typeString": "function (address,address) view returns (bool)"
																			}
																		},
																		"id": 837,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6764:32:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "6744:52:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "||",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"id": 843,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 840,
																				"name": "tokenId",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 820,
																				"src": "6813:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 839,
																			"name": "_getApproved",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 813,
																			"src": "6800:12:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																				"typeString": "function (uint256) view returns (address)"
																			}
																		},
																		"id": 841,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "6800:21:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"id": 842,
																		"name": "spender",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 818,
																		"src": "6825:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"src": "6800:32:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "6744:88:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															}
														],
														"id": 845,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "6743:90:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6705:128:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 824,
												"id": 847,
												"nodeType": "Return",
												"src": "6685:148:3"
											}
										]
									},
									"documentation": {
										"id": 814,
										"nodeType": "StructuredDocumentation",
										"src": "6253:306:3",
										"text": " @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\n particular (ignoring whether it is owned by `owner`).\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."
									},
									"id": 849,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isAuthorized",
									"nameLocation": "6574:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 816,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "6596:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "6588:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 815,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6588:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 818,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "6611:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "6603:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 817,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6603:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 820,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "6628:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "6620:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 819,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "6620:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6587:49:3"
									},
									"returnParameters": {
										"id": 824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 823,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 849,
												"src": "6668:4:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 822,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6668:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6667:6:3"
									},
									"scope": 1435,
									"src": "6565:276:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 885,
										"nodeType": "Block",
										"src": "7382:279:3",
										"statements": [
											{
												"condition": {
													"id": 864,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7397:39:3",
													"subExpression": {
														"arguments": [
															{
																"id": 860,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 852,
																"src": "7412:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 861,
																"name": "spender",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 854,
																"src": "7419:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															{
																"id": 862,
																"name": "tokenId",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 856,
																"src": "7428:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																{
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															],
															"id": 859,
															"name": "_isAuthorized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 849,
															"src": "7398:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,address,uint256) view returns (bool)"
															}
														},
														"id": 863,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7398:38:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 884,
												"nodeType": "IfStatement",
												"src": "7393:261:3",
												"trueBody": {
													"id": 883,
													"nodeType": "Block",
													"src": "7438:216:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																},
																"id": 870,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 865,
																	"name": "owner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 852,
																	"src": "7457:5:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"arguments": [
																		{
																			"hexValue": "30",
																			"id": 868,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "7474:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			}
																		],
																		"id": 867,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "7466:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 866,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "7466:7:3",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 869,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "7466:10:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"src": "7457:19:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseBody": {
																"id": 881,
																"nodeType": "Block",
																"src": "7557:86:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 877,
																					"name": "spender",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 854,
																					"src": "7610:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 878,
																					"name": "tokenId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 856,
																					"src": "7619:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 876,
																				"name": "ERC721InsufficientApproval",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 368,
																				"src": "7583:26:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,uint256) pure"
																				}
																			},
																			"id": 879,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7583:44:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 880,
																		"nodeType": "RevertStatement",
																		"src": "7576:51:3"
																	}
																]
															},
															"id": 882,
															"nodeType": "IfStatement",
															"src": "7453:190:3",
															"trueBody": {
																"id": 875,
																"nodeType": "Block",
																"src": "7478:73:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 872,
																					"name": "tokenId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 856,
																					"src": "7527:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 871,
																				"name": "ERC721NonexistentToken",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 342,
																				"src": "7504:22:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																					"typeString": "function (uint256) pure"
																				}
																			},
																			"id": 873,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "7504:31:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 874,
																		"nodeType": "RevertStatement",
																		"src": "7497:38:3"
																	}
																]
															}
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 850,
										"nodeType": "StructuredDocumentation",
										"src": "6849:430:3",
										"text": " @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\n Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\n the `spender` for the specific `tokenId`.\n WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\n assumption."
									},
									"id": 886,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkAuthorized",
									"nameLocation": "7294:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 857,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 852,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "7319:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "7311:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 851,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7311:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 854,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "7334:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "7326:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 853,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "7326:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 856,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "7351:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 886,
												"src": "7343:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 855,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "7343:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "7310:49:3"
									},
									"returnParameters": {
										"id": 858,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7382:0:3"
									},
									"scope": 1435,
									"src": "7285:376:3",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 901,
										"nodeType": "Block",
										"src": "8390:82:3",
										"statements": [
											{
												"id": 900,
												"nodeType": "UncheckedBlock",
												"src": "8401:64:3",
												"statements": [
													{
														"expression": {
															"id": 898,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"baseExpression": {
																	"id": 894,
																	"name": "_balances",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 469,
																	"src": "8426:9:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																		"typeString": "mapping(address => uint256)"
																	}
																},
																"id": 896,
																"indexExpression": {
																	"id": 895,
																	"name": "account",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 889,
																	"src": "8436:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"isConstant": false,
																"isLValue": true,
																"isPure": false,
																"lValueRequested": true,
																"nodeType": "IndexAccess",
																"src": "8426:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "+=",
															"rightHandSide": {
																"id": 897,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 891,
																"src": "8448:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint128",
																	"typeString": "uint128"
																}
															},
															"src": "8426:27:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 899,
														"nodeType": "ExpressionStatement",
														"src": "8426:27:3"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 887,
										"nodeType": "StructuredDocumentation",
										"src": "7669:640:3",
										"text": " @dev Unsafe write access to the balances, used by extensions that \"mint\" tokens using an {ownerOf} override.\n NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\n a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\n WARNING: Increasing an account's balance using this function tends to be paired with an override of the\n {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\n remain consistent with one another."
									},
									"id": 902,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_increaseBalance",
									"nameLocation": "8324:16:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 892,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 889,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "8349:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "8341:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 888,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "8341:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 891,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "8366:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 902,
												"src": "8358:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint128",
													"typeString": "uint128"
												},
												"typeName": {
													"id": 890,
													"name": "uint128",
													"nodeType": "ElementaryTypeName",
													"src": "8358:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint128",
														"typeString": "uint128"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8340:32:3"
									},
									"returnParameters": {
										"id": 893,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8390:0:3"
									},
									"scope": 1435,
									"src": "8315:157:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 991,
										"nodeType": "Block",
										"src": "9173:729:3",
										"statements": [
											{
												"assignments": [
													915
												],
												"declarations": [
													{
														"constant": false,
														"id": 915,
														"mutability": "mutable",
														"name": "from",
														"nameLocation": "9192:4:3",
														"nodeType": "VariableDeclaration",
														"scope": 991,
														"src": "9184:12:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 914,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "9184:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 919,
												"initialValue": {
													"arguments": [
														{
															"id": 917,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 907,
															"src": "9208:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 916,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "9199:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 918,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9199:17:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9184:32:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 925,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 920,
														"name": "auth",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 909,
														"src": "9279:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 923,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9295:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 922,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9287:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 921,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9287:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 924,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9287:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9279:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 933,
												"nodeType": "IfStatement",
												"src": "9275:88:3",
												"trueBody": {
													"id": 932,
													"nodeType": "Block",
													"src": "9299:64:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 927,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 915,
																		"src": "9331:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 928,
																		"name": "auth",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 909,
																		"src": "9337:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 929,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "9343:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 926,
																	"name": "_checkAuthorized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 886,
																	"src": "9314:16:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$_t_uint256_$returns$__$",
																		"typeString": "function (address,address,uint256) view"
																	}
																},
																"id": 930,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9314:37:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 931,
															"nodeType": "ExpressionStatement",
															"src": "9314:37:3"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 939,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 934,
														"name": "from",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 915,
														"src": "9410:4:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 937,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9426:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 936,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9418:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 935,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9418:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 938,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9418:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9410:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 961,
												"nodeType": "IfStatement",
												"src": "9406:263:3",
												"trueBody": {
													"id": 960,
													"nodeType": "Block",
													"src": "9430:239:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 943,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9545:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 942,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9537:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 941,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9537:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9537:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 945,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 907,
																		"src": "9549:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 948,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "9566:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 947,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "9558:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 946,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "9558:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 949,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "9558:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"hexValue": "66616c7365",
																		"id": 950,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "9570:5:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	],
																	"id": 940,
																	"name": "_approve",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		1238,
																		1304
																	],
																	"referencedDeclaration": 1304,
																	"src": "9528:8:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$",
																		"typeString": "function (address,uint256,address,bool)"
																	}
																},
																"id": 951,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "9528:48:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 952,
															"nodeType": "ExpressionStatement",
															"src": "9528:48:3"
														},
														{
															"id": 959,
															"nodeType": "UncheckedBlock",
															"src": "9593:65:3",
															"statements": [
																{
																	"expression": {
																		"id": 957,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 953,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 469,
																				"src": "9622:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 955,
																			"indexExpression": {
																				"id": 954,
																				"name": "from",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 915,
																				"src": "9632:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "9622:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "-=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 956,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9641:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9622:20:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 958,
																	"nodeType": "ExpressionStatement",
																	"src": "9622:20:3"
																}
															]
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 967,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 962,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "9685:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 965,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "9699:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 964,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "9691:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 963,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "9691:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 966,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "9691:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9685:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 976,
												"nodeType": "IfStatement",
												"src": "9681:111:3",
												"trueBody": {
													"id": 975,
													"nodeType": "Block",
													"src": "9703:89:3",
													"statements": [
														{
															"id": 974,
															"nodeType": "UncheckedBlock",
															"src": "9718:63:3",
															"statements": [
																{
																	"expression": {
																		"id": 972,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"baseExpression": {
																				"id": 968,
																				"name": "_balances",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 469,
																				"src": "9747:9:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
																					"typeString": "mapping(address => uint256)"
																				}
																			},
																			"id": 970,
																			"indexExpression": {
																				"id": 969,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 905,
																				"src": "9757:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": true,
																			"nodeType": "IndexAccess",
																			"src": "9747:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 971,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "9764:1:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "9747:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 973,
																	"nodeType": "ExpressionStatement",
																	"src": "9747:18:3"
																}
															]
														}
													]
												}
											},
											{
												"expression": {
													"id": 981,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 977,
															"name": "_owners",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 465,
															"src": "9804:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 979,
														"indexExpression": {
															"id": 978,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 907,
															"src": "9812:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "9804:16:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 980,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 905,
														"src": "9823:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "9804:21:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 982,
												"nodeType": "ExpressionStatement",
												"src": "9804:21:3"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 984,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 915,
															"src": "9852:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 985,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 905,
															"src": "9858:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 986,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 907,
															"src": "9862:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 983,
														"name": "Transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1451,
														"src": "9843:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 987,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "9843:27:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 988,
												"nodeType": "EmitStatement",
												"src": "9838:32:3"
											},
											{
												"expression": {
													"id": 989,
													"name": "from",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 915,
													"src": "9890:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 913,
												"id": 990,
												"nodeType": "Return",
												"src": "9883:11:3"
											}
										]
									},
									"documentation": {
										"id": 903,
										"nodeType": "StructuredDocumentation",
										"src": "8480:592:3",
										"text": " @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\n (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\n The `auth` argument is optional. If the value passed is non 0, then this function will check that\n `auth` is either the owner of the token, or approved to operate on the token (by the owner).\n Emits a {Transfer} event.\n NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}."
									},
									"id": 992,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_update",
									"nameLocation": "9087:7:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 910,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 905,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "9103:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "9095:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 904,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9095:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 907,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "9115:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "9107:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 906,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9107:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 909,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "9132:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "9124:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 908,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9124:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9094:43:3"
									},
									"returnParameters": {
										"id": 913,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 912,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 992,
												"src": "9164:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 911,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9164:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9163:9:3"
									},
									"scope": 1435,
									"src": "9078:824:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1041,
										"nodeType": "Block",
										"src": "10291:282:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1005,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1000,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 995,
														"src": "10306:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1003,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10320:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1002,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10312:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1001,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10312:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1004,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10312:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10306:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1014,
												"nodeType": "IfStatement",
												"src": "10302:89:3",
												"trueBody": {
													"id": 1013,
													"nodeType": "Block",
													"src": "10324:67:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1009,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10376:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1008,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10368:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1007,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10368:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1010,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10368:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1006,
																	"name": "ERC721InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 361,
																	"src": "10346:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1011,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10346:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1012,
															"nodeType": "RevertStatement",
															"src": "10339:40:3"
														}
													]
												}
											},
											{
												"assignments": [
													1016
												],
												"declarations": [
													{
														"constant": false,
														"id": 1016,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "10409:13:3",
														"nodeType": "VariableDeclaration",
														"scope": 1041,
														"src": "10401:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1015,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "10401:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1025,
												"initialValue": {
													"arguments": [
														{
															"id": 1018,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 995,
															"src": "10433:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1019,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 997,
															"src": "10437:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1022,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10454:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1021,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "10446:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1020,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "10446:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1023,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10446:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1017,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 992,
														"src": "10425:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1024,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "10425:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "10401:56:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1031,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1026,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1016,
														"src": "10472:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1029,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "10497:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1028,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "10489:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1027,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "10489:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1030,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "10489:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "10472:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1040,
												"nodeType": "IfStatement",
												"src": "10468:98:3",
												"trueBody": {
													"id": 1039,
													"nodeType": "Block",
													"src": "10501:65:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1035,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "10551:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1034,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "10543:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1033,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "10543:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1036,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "10543:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1032,
																	"name": "ERC721InvalidSender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 356,
																	"src": "10523:19:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1037,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "10523:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1038,
															"nodeType": "RevertStatement",
															"src": "10516:38:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 993,
										"nodeType": "StructuredDocumentation",
										"src": "9910:322:3",
										"text": " @dev Mints `tokenId` and transfers it to `to`.\n WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n Requirements:\n - `tokenId` must not exist.\n - `to` cannot be the zero address.\n Emits a {Transfer} event."
									},
									"id": 1042,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_mint",
									"nameLocation": "10247:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 998,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 995,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10261:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "10253:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 994,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10253:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 997,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10273:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1042,
												"src": "10265:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 996,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10265:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10252:29:3"
									},
									"returnParameters": {
										"id": 999,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10291:0:3"
									},
									"scope": 1435,
									"src": "10238:335:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1056,
										"nodeType": "Block",
										"src": "10993:45:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1051,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1045,
															"src": "11014:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1052,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1047,
															"src": "11018:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1053,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "11027:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1050,
														"name": "_safeMint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1057,
															1083
														],
														"referencedDeclaration": 1083,
														"src": "11004:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,uint256,bytes memory)"
														}
													},
													"id": 1054,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11004:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1055,
												"nodeType": "ExpressionStatement",
												"src": "11004:26:3"
											}
										]
									},
									"documentation": {
										"id": 1043,
										"nodeType": "StructuredDocumentation",
										"src": "10581:349:3",
										"text": " @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\n Requirements:\n - `tokenId` must not exist.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 1057,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "10945:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1048,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1045,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10963:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "10955:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1044,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10955:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1047,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "10975:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1057,
												"src": "10967:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1046,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10967:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10954:29:3"
									},
									"returnParameters": {
										"id": 1049,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10993:0:3"
									},
									"scope": 1435,
									"src": "10936:102:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1082,
										"nodeType": "Block",
										"src": "11349:101:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1068,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1060,
															"src": "11366:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1069,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "11370:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1067,
														"name": "_mint",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1042,
														"src": "11360:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,uint256)"
														}
													},
													"id": 1070,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11360:18:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1071,
												"nodeType": "ExpressionStatement",
												"src": "11360:18:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11420:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1074,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11412:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1073,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11412:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1076,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11412:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1077,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1060,
															"src": "11424:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1078,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1062,
															"src": "11428:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1079,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1064,
															"src": "11437:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1072,
														"name": "_checkOnERC721Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1434,
														"src": "11389:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1080,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11389:53:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1081,
												"nodeType": "ExpressionStatement",
												"src": "11389:53:3"
											}
										]
									},
									"documentation": {
										"id": 1058,
										"nodeType": "StructuredDocumentation",
										"src": "11046:213:3",
										"text": " @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 1083,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeMint",
									"nameLocation": "11274:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1065,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1060,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11292:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "11284:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1059,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11284:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1062,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11304:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "11296:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11296:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1064,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "11326:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1083,
												"src": "11313:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1063,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "11313:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11283:48:3"
									},
									"returnParameters": {
										"id": 1066,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11349:0:3"
									},
									"scope": 1435,
									"src": "11265:185:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1115,
										"nodeType": "Block",
										"src": "11830:191:3",
										"statements": [
											{
												"assignments": [
													1090
												],
												"declarations": [
													{
														"constant": false,
														"id": 1090,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "11849:13:3",
														"nodeType": "VariableDeclaration",
														"scope": 1115,
														"src": "11841:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1089,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "11841:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1102,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1094,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11881:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1093,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11873:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1092,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11873:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1095,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11873:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1096,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1086,
															"src": "11885:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1099,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11902:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1098,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "11894:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1097,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "11894:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1100,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "11894:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1091,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 992,
														"src": "11865:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1101,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "11865:40:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11841:64:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1103,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1090,
														"src": "11920:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1106,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11945:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1105,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "11937:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1104,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "11937:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1107,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "11937:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "11920:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1114,
												"nodeType": "IfStatement",
												"src": "11916:98:3",
												"trueBody": {
													"id": 1113,
													"nodeType": "Block",
													"src": "11949:65:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1110,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1086,
																		"src": "11994:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1109,
																	"name": "ERC721NonexistentToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 342,
																	"src": "11971:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1111,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "11971:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1112,
															"nodeType": "RevertStatement",
															"src": "11964:38:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1084,
										"nodeType": "StructuredDocumentation",
										"src": "11458:325:3",
										"text": " @dev Destroys `tokenId`.\n The approval is cleared when the token is burned.\n This is an internal function that does not check if the sender is authorized to operate on the token.\n Requirements:\n - `tokenId` must exist.\n Emits a {Transfer} event."
									},
									"id": 1116,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_burn",
									"nameLocation": "11798:5:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1087,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1086,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "11812:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1116,
												"src": "11804:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1085,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11804:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11803:17:3"
									},
									"returnParameters": {
										"id": 1088,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "11830:0:3"
									},
									"scope": 1435,
									"src": "11789:232:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1175,
										"nodeType": "Block",
										"src": "12429:399:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1131,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1126,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1121,
														"src": "12444:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1129,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12458:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1128,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12450:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1127,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12450:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1130,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12450:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12444:16:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1140,
												"nodeType": "IfStatement",
												"src": "12440:89:3",
												"trueBody": {
													"id": 1139,
													"nodeType": "Block",
													"src": "12462:67:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 1135,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12514:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 1134,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "12506:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 1133,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "12506:7:3",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 1136,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "12506:10:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1132,
																	"name": "ERC721InvalidReceiver",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 361,
																	"src": "12484:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1137,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12484:33:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1138,
															"nodeType": "RevertStatement",
															"src": "12477:40:3"
														}
													]
												}
											},
											{
												"assignments": [
													1142
												],
												"declarations": [
													{
														"constant": false,
														"id": 1142,
														"mutability": "mutable",
														"name": "previousOwner",
														"nameLocation": "12547:13:3",
														"nodeType": "VariableDeclaration",
														"scope": 1175,
														"src": "12539:21:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1141,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "12539:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1151,
												"initialValue": {
													"arguments": [
														{
															"id": 1144,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1121,
															"src": "12571:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1145,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1123,
															"src": "12575:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1148,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12592:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1147,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "12584:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1146,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "12584:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1149,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12584:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 1143,
														"name": "_update",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 992,
														"src": "12563:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$_t_address_$",
															"typeString": "function (address,uint256,address) returns (address)"
														}
													},
													"id": 1150,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "12563:32:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12539:56:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1157,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1152,
														"name": "previousOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1142,
														"src": "12610:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1155,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "12635:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1154,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "12627:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1153,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "12627:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1156,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "12627:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "12610:27:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1165,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1163,
															"name": "previousOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1142,
															"src": "12714:13:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"id": 1164,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1119,
															"src": "12731:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "12714:21:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"id": 1173,
													"nodeType": "IfStatement",
													"src": "12710:111:3",
													"trueBody": {
														"id": 1172,
														"nodeType": "Block",
														"src": "12737:84:3",
														"statements": [
															{
																"errorCall": {
																	"arguments": [
																		{
																			"id": 1167,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1119,
																			"src": "12780:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 1168,
																			"name": "tokenId",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1123,
																			"src": "12786:7:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		{
																			"id": 1169,
																			"name": "previousOwner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1142,
																			"src": "12795:13:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			},
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1166,
																		"name": "ERC721IncorrectOwner",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 351,
																		"src": "12759:20:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_address_$returns$__$",
																			"typeString": "function (address,uint256,address) pure"
																		}
																	},
																	"id": 1170,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "12759:50:3",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$__$",
																		"typeString": "tuple()"
																	}
																},
																"id": 1171,
																"nodeType": "RevertStatement",
																"src": "12752:57:3"
															}
														]
													}
												},
												"id": 1174,
												"nodeType": "IfStatement",
												"src": "12606:215:3",
												"trueBody": {
													"id": 1162,
													"nodeType": "Block",
													"src": "12639:65:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1159,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1123,
																		"src": "12684:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1158,
																	"name": "ERC721NonexistentToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 342,
																	"src": "12661:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1160,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "12661:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1161,
															"nodeType": "RevertStatement",
															"src": "12654:38:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1117,
										"nodeType": "StructuredDocumentation",
										"src": "12029:323:3",
										"text": " @dev Transfers `tokenId` from `from` to `to`.\n  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n Requirements:\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n Emits a {Transfer} event."
									},
									"id": 1176,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transfer",
									"nameLocation": "12367:9:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1124,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1119,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12385:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "12377:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12377:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1121,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12399:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "12391:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1120,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12391:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1123,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "12411:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1176,
												"src": "12403:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1122,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12403:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12376:43:3"
									},
									"returnParameters": {
										"id": 1125,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "12429:0:3"
									},
									"scope": 1435,
									"src": "12358:470:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1193,
										"nodeType": "Block",
										"src": "13857:55:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1187,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1179,
															"src": "13882:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1188,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1181,
															"src": "13888:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1189,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1183,
															"src": "13892:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"hexValue": "",
															"id": 1190,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "13901:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"id": 1186,
														"name": "_safeTransfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1194,
															1220
														],
														"referencedDeclaration": 1220,
														"src": "13868:13:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1191,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "13868:36:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1192,
												"nodeType": "ExpressionStatement",
												"src": "13868:36:3"
											}
										]
									},
									"documentation": {
										"id": 1177,
										"nodeType": "StructuredDocumentation",
										"src": "12836:940:3",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\n are aware of the ERC721 standard to prevent tokens from being forever locked.\n `data` is additional data, it has no specified format and it is sent in call to `to`.\n This internal function is like {safeTransferFrom} in the sense that it invokes\n {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\n implement alternative mechanisms to perform token transfer, such as signature-based.\n Requirements:\n - `tokenId` token must exist and be owned by `from`.\n - `to` cannot be the zero address.\n - `from` cannot be the zero address.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n Emits a {Transfer} event."
									},
									"id": 1194,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "13791:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1179,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "13813:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "13805:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1178,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13805:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1181,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "13827:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "13819:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1180,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13819:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1183,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "13839:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1194,
												"src": "13831:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13831:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13804:43:3"
									},
									"returnParameters": {
										"id": 1185,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "13857:0:3"
									},
									"scope": 1435,
									"src": "13782:130:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1219,
										"nodeType": "Block",
										"src": "14257:105:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1207,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1197,
															"src": "14278:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1208,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1199,
															"src": "14284:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1209,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1201,
															"src": "14288:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1206,
														"name": "_transfer",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1176,
														"src": "14268:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (address,address,uint256)"
														}
													},
													"id": 1210,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14268:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1211,
												"nodeType": "ExpressionStatement",
												"src": "14268:28:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1213,
															"name": "from",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1197,
															"src": "14330:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1214,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1199,
															"src": "14336:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1215,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1201,
															"src": "14340:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1216,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1203,
															"src": "14349:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1212,
														"name": "_checkOnERC721Received",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1434,
														"src": "14307:22:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (address,address,uint256,bytes memory)"
														}
													},
													"id": 1217,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14307:47:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1218,
												"nodeType": "ExpressionStatement",
												"src": "14307:47:3"
											}
										]
									},
									"documentation": {
										"id": 1195,
										"nodeType": "StructuredDocumentation",
										"src": "13920:229:3",
										"text": " @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\n forwarded in {IERC721Receiver-onERC721Received} to contract recipients."
									},
									"id": 1220,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_safeTransfer",
									"nameLocation": "14164:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1204,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1197,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14186:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "14178:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1196,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14178:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1199,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14200:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "14192:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1198,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14192:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1201,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14212:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "14204:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1200,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14204:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1203,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "14234:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1220,
												"src": "14221:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1202,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "14221:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14177:62:3"
									},
									"returnParameters": {
										"id": 1205,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14257:0:3"
									},
									"scope": 1435,
									"src": "14155:207:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1237,
										"nodeType": "Block",
										"src": "14887:52:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 1231,
															"name": "to",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1223,
															"src": "14907:2:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1232,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1225,
															"src": "14911:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1233,
															"name": "auth",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1227,
															"src": "14920:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"hexValue": "74727565",
															"id": 1234,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "14926:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1230,
														"name": "_approve",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1238,
															1304
														],
														"referencedDeclaration": 1304,
														"src": "14898:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,uint256,address,bool)"
														}
													},
													"id": 1235,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14898:33:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1236,
												"nodeType": "ExpressionStatement",
												"src": "14898:33:3"
											}
										]
									},
									"documentation": {
										"id": 1221,
										"nodeType": "StructuredDocumentation",
										"src": "14370:441:3",
										"text": " @dev Approve `to` to operate on `tokenId`\n The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\n either the owner of the token, or approved to operate on all tokens held by this owner.\n Emits an {Approval} event.\n Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument."
									},
									"id": 1238,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "14826:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1228,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1223,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14843:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "14835:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1222,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14835:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1225,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "14855:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "14847:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1224,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14847:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1227,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "14872:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1238,
												"src": "14864:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1226,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14864:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14834:43:3"
									},
									"returnParameters": {
										"id": 1229,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14887:0:3"
									},
									"scope": 1435,
									"src": "14817:122:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1303,
										"nodeType": "Block",
										"src": "15221:584:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1257,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1250,
														"name": "emitEvent",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1247,
														"src": "15289:9:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"id": 1256,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 1251,
															"name": "auth",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1245,
															"src": "15302:4:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 1254,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "15318:1:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 1253,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15310:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 1252,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "15310:7:3",
																	"typeDescriptions": {}
																}
															},
															"id": 1255,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15310:10:3",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"src": "15302:18:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "15289:31:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1296,
												"nodeType": "IfStatement",
												"src": "15285:471:3",
												"trueBody": {
													"id": 1295,
													"nodeType": "Block",
													"src": "15322:434:3",
													"statements": [
														{
															"assignments": [
																1259
															],
															"declarations": [
																{
																	"constant": false,
																	"id": 1259,
																	"mutability": "mutable",
																	"name": "owner",
																	"nameLocation": "15345:5:3",
																	"nodeType": "VariableDeclaration",
																	"scope": 1295,
																	"src": "15337:13:3",
																	"stateVariable": false,
																	"storageLocation": "default",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	"typeName": {
																		"id": 1258,
																		"name": "address",
																		"nodeType": "ElementaryTypeName",
																		"src": "15337:7:3",
																		"stateMutability": "nonpayable",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	"visibility": "internal"
																}
															],
															"id": 1263,
															"initialValue": {
																"arguments": [
																	{
																		"id": 1261,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1243,
																		"src": "15367:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1260,
																	"name": "_requireOwned",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1370,
																	"src": "15353:13:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
																		"typeString": "function (uint256) view returns (address)"
																	}
																},
																"id": 1262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "15353:22:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "VariableDeclarationStatement",
															"src": "15337:38:3"
														},
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 1279,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 1273,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1269,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1264,
																			"name": "auth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1245,
																			"src": "15506:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"arguments": [
																				{
																					"hexValue": "30",
																					"id": 1267,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"kind": "number",
																					"lValueRequested": false,
																					"nodeType": "Literal",
																					"src": "15522:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					},
																					"value": "0"
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_rational_0_by_1",
																						"typeString": "int_const 0"
																					}
																				],
																				"id": 1266,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "15514:7:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_address_$",
																					"typeString": "type(address)"
																				},
																				"typeName": {
																					"id": 1265,
																					"name": "address",
																					"nodeType": "ElementaryTypeName",
																					"src": "15514:7:3",
																					"typeDescriptions": {}
																				}
																			},
																			"id": 1268,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "typeConversion",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15514:10:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "15506:18:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "&&",
																	"rightExpression": {
																		"commonType": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		"id": 1272,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1270,
																			"name": "owner",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1259,
																			"src": "15528:5:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 1271,
																			"name": "auth",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1245,
																			"src": "15537:4:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		"src": "15528:13:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "15506:35:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"id": 1278,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "UnaryOperation",
																	"operator": "!",
																	"prefix": true,
																	"src": "15545:30:3",
																	"subExpression": {
																		"arguments": [
																			{
																				"id": 1275,
																				"name": "owner",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1259,
																				"src": "15563:5:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 1276,
																				"name": "auth",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1245,
																				"src": "15570:4:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1274,
																			"name": "isApprovedForAll",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 697,
																			"src": "15546:16:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$",
																				"typeString": "function (address,address) view returns (bool)"
																			}
																		},
																		"id": 1277,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15546:29:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "15506:69:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1285,
															"nodeType": "IfStatement",
															"src": "15502:144:3",
															"trueBody": {
																"id": 1284,
																"nodeType": "Block",
																"src": "15577:69:3",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 1281,
																					"name": "auth",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1245,
																					"src": "15625:4:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 1280,
																				"name": "ERC721InvalidApprover",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 373,
																				"src": "15603:21:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 1282,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15603:27:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1283,
																		"nodeType": "RevertStatement",
																		"src": "15596:34:3"
																	}
																]
															}
														},
														{
															"condition": {
																"id": 1286,
																"name": "emitEvent",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1247,
																"src": "15666:9:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 1294,
															"nodeType": "IfStatement",
															"src": "15662:83:3",
															"trueBody": {
																"id": 1293,
																"nodeType": "Block",
																"src": "15677:68:3",
																"statements": [
																	{
																		"eventCall": {
																			"arguments": [
																				{
																					"id": 1288,
																					"name": "owner",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1259,
																					"src": "15710:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1289,
																					"name": "to",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1241,
																					"src": "15717:2:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				},
																				{
																					"id": 1290,
																					"name": "tokenId",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 1243,
																					"src": "15721:7:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					},
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 1287,
																				"name": "Approval",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1460,
																				"src": "15701:8:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
																					"typeString": "function (address,address,uint256)"
																				}
																			},
																			"id": 1291,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "15701:28:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 1292,
																		"nodeType": "EmitStatement",
																		"src": "15696:33:3"
																	}
																]
															}
														}
													]
												}
											},
											{
												"expression": {
													"id": 1301,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1297,
															"name": "_tokenApprovals",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 473,
															"src": "15768:15:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_uint256_$_t_address_$",
																"typeString": "mapping(uint256 => address)"
															}
														},
														"id": 1299,
														"indexExpression": {
															"id": 1298,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1243,
															"src": "15784:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "15768:24:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1300,
														"name": "to",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1241,
														"src": "15795:2:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "15768:29:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 1302,
												"nodeType": "ExpressionStatement",
												"src": "15768:29:3"
											}
										]
									},
									"documentation": {
										"id": 1239,
										"nodeType": "StructuredDocumentation",
										"src": "14947:174:3",
										"text": " @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\n emitted in the context of transfers."
									},
									"id": 1304,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_approve",
									"nameLocation": "15136:8:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1248,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1241,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "15153:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "15145:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1240,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15145:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1243,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "15165:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "15157:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1242,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15157:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1245,
												"mutability": "mutable",
												"name": "auth",
												"nameLocation": "15182:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "15174:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1244,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15174:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1247,
												"mutability": "mutable",
												"name": "emitEvent",
												"nameLocation": "15193:9:3",
												"nodeType": "VariableDeclaration",
												"scope": 1304,
												"src": "15188:14:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1246,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15188:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15144:59:3"
									},
									"returnParameters": {
										"id": 1249,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15221:0:3"
									},
									"scope": 1435,
									"src": "15127:678:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1340,
										"nodeType": "Block",
										"src": "16117:225:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1319,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1314,
														"name": "operator",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1309,
														"src": "16132:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1317,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16152:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1316,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "16144:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1315,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "16144:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1318,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16144:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16132:22:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1325,
												"nodeType": "IfStatement",
												"src": "16128:93:3",
												"trueBody": {
													"id": 1324,
													"nodeType": "Block",
													"src": "16156:65:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1321,
																		"name": "operator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1309,
																		"src": "16200:8:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 1320,
																	"name": "ERC721InvalidOperator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 378,
																	"src": "16178:21:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 1322,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16178:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1323,
															"nodeType": "RevertStatement",
															"src": "16171:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"baseExpression": {
																"id": 1326,
																"name": "_operatorApprovals",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 479,
																"src": "16231:18:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$",
																	"typeString": "mapping(address => mapping(address => bool))"
																}
															},
															"id": 1329,
															"indexExpression": {
																"id": 1327,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1307,
																"src": "16250:5:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "IndexAccess",
															"src": "16231:25:3",
															"typeDescriptions": {
																"typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
																"typeString": "mapping(address => bool)"
															}
														},
														"id": 1330,
														"indexExpression": {
															"id": 1328,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1309,
															"src": "16257:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "16231:35:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 1331,
														"name": "approved",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1311,
														"src": "16269:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "16231:46:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1333,
												"nodeType": "ExpressionStatement",
												"src": "16231:46:3"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 1335,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1307,
															"src": "16308:5:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1336,
															"name": "operator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1309,
															"src": "16315:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 1337,
															"name": "approved",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1311,
															"src": "16325:8:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 1334,
														"name": "ApprovalForAll",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1469,
														"src": "16293:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$",
															"typeString": "function (address,address,bool)"
														}
													},
													"id": 1338,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16293:41:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 1339,
												"nodeType": "EmitStatement",
												"src": "16288:46:3"
											}
										]
									},
									"documentation": {
										"id": 1305,
										"nodeType": "StructuredDocumentation",
										"src": "15813:205:3",
										"text": " @dev Approve `operator` to operate on all of `owner` tokens\n Requirements:\n - operator can't be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"id": 1341,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_setApprovalForAll",
									"nameLocation": "16033:18:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1307,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "16060:5:3",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "16052:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1306,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16052:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1309,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "16075:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "16067:16:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1308,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16067:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1311,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "16090:8:3",
												"nodeType": "VariableDeclaration",
												"scope": 1341,
												"src": "16085:13:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1310,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "16085:4:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16051:48:3"
									},
									"returnParameters": {
										"id": 1313,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16117:0:3"
									},
									"scope": 1435,
									"src": "16024:318:3",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1369,
										"nodeType": "Block",
										"src": "16657:175:3",
										"statements": [
											{
												"assignments": [
													1350
												],
												"declarations": [
													{
														"constant": false,
														"id": 1350,
														"mutability": "mutable",
														"name": "owner",
														"nameLocation": "16676:5:3",
														"nodeType": "VariableDeclaration",
														"scope": 1369,
														"src": "16668:13:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 1349,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "16668:7:3",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1354,
												"initialValue": {
													"arguments": [
														{
															"id": 1352,
															"name": "tokenId",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1344,
															"src": "16693:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1351,
														"name": "_ownerOf",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 800,
														"src": "16684:8:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_address_$",
															"typeString": "function (uint256) view returns (address)"
														}
													},
													"id": 1353,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16684:17:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16668:33:3"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 1360,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1355,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1350,
														"src": "16716:5:3",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 1358,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "16733:1:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 1357,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "16725:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 1356,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "16725:7:3",
																"typeDescriptions": {}
															}
														},
														"id": 1359,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16725:10:3",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "16716:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1366,
												"nodeType": "IfStatement",
												"src": "16712:90:3",
												"trueBody": {
													"id": 1365,
													"nodeType": "Block",
													"src": "16737:65:3",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1362,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1344,
																		"src": "16782:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1361,
																	"name": "ERC721NonexistentToken",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 342,
																	"src": "16759:22:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$returns$__$",
																		"typeString": "function (uint256) pure"
																	}
																},
																"id": 1363,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16759:31:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1364,
															"nodeType": "RevertStatement",
															"src": "16752:38:3"
														}
													]
												}
											},
											{
												"expression": {
													"id": 1367,
													"name": "owner",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1350,
													"src": "16819:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1348,
												"id": 1368,
												"nodeType": "Return",
												"src": "16812:12:3"
											}
										]
									},
									"documentation": {
										"id": 1342,
										"nodeType": "StructuredDocumentation",
										"src": "16350:229:3",
										"text": " @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\n Returns the owner.\n Overrides to ownership logic should be done to {_ownerOf}."
									},
									"id": 1370,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_requireOwned",
									"nameLocation": "16594:13:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1345,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1344,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "16616:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "16608:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1343,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16608:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16607:17:3"
									},
									"returnParameters": {
										"id": 1348,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1347,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1370,
												"src": "16648:7:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1346,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16648:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16647:9:3"
									},
									"scope": 1435,
									"src": "16585:247:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1433,
										"nodeType": "Block",
										"src": "17484:697:3",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1386,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"expression": {
																"id": 1382,
																"name": "to",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1375,
																"src": "17499:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 1383,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "17502:4:3",
															"memberName": "code",
															"nodeType": "MemberAccess",
															"src": "17499:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1384,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "17507:6:3",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "17499:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 1385,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "17516:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "17499:18:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1432,
												"nodeType": "IfStatement",
												"src": "17495:679:3",
												"trueBody": {
													"id": 1431,
													"nodeType": "Block",
													"src": "17519:655:3",
													"statements": [
														{
															"clauses": [
																{
																	"block": {
																		"id": 1411,
																		"nodeType": "Block",
																		"src": "17634:166:3",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					},
																					"id": 1404,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 1400,
																						"name": "retval",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 1398,
																						"src": "17657:6:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "!=",
																					"rightExpression": {
																						"expression": {
																							"expression": {
																								"id": 1401,
																								"name": "IERC721Receiver",
																								"nodeType": "Identifier",
																								"overloadedDeclarations": [],
																								"referencedDeclaration": 1570,
																								"src": "17667:15:3",
																								"typeDescriptions": {
																									"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1570_$",
																									"typeString": "type(contract IERC721Receiver)"
																								}
																							},
																							"id": 1402,
																							"isConstant": false,
																							"isLValue": false,
																							"isPure": true,
																							"lValueRequested": false,
																							"memberLocation": "17683:16:3",
																							"memberName": "onERC721Received",
																							"nodeType": "MemberAccess",
																							"referencedDeclaration": 1569,
																							"src": "17667:32:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$",
																								"typeString": "function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"
																							}
																						},
																						"id": 1403,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"memberLocation": "17700:8:3",
																						"memberName": "selector",
																						"nodeType": "MemberAccess",
																						"src": "17667:41:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_bytes4",
																							"typeString": "bytes4"
																						}
																					},
																					"src": "17657:51:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"id": 1410,
																				"nodeType": "IfStatement",
																				"src": "17653:132:3",
																				"trueBody": {
																					"id": 1409,
																					"nodeType": "Block",
																					"src": "17710:75:3",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [
																									{
																										"id": 1406,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1375,
																										"src": "17762:2:3",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 1405,
																									"name": "ERC721InvalidReceiver",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 361,
																									"src": "17740:21:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																										"typeString": "function (address) pure"
																									}
																								},
																								"id": 1407,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "17740:25:3",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1408,
																							"nodeType": "RevertStatement",
																							"src": "17733:32:3"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 1412,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 1399,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 1398,
																				"mutability": "mutable",
																				"name": "retval",
																				"nameLocation": "17626:6:3",
																				"nodeType": "VariableDeclaration",
																				"scope": 1412,
																				"src": "17619:13:3",
																				"stateVariable": false,
																				"storageLocation": "default",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes4",
																					"typeString": "bytes4"
																				},
																				"typeName": {
																					"id": 1397,
																					"name": "bytes4",
																					"nodeType": "ElementaryTypeName",
																					"src": "17619:6:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes4",
																						"typeString": "bytes4"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "17618:15:3"
																	},
																	"src": "17610:190:3"
																},
																{
																	"block": {
																		"id": 1428,
																		"nodeType": "Block",
																		"src": "17829:334:3",
																		"statements": [
																			{
																				"condition": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 1419,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"expression": {
																							"id": 1416,
																							"name": "reason",
																							"nodeType": "Identifier",
																							"overloadedDeclarations": [],
																							"referencedDeclaration": 1414,
																							"src": "17852:6:3",
																							"typeDescriptions": {
																								"typeIdentifier": "t_bytes_memory_ptr",
																								"typeString": "bytes memory"
																							}
																						},
																						"id": 1417,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"memberLocation": "17859:6:3",
																						"memberName": "length",
																						"nodeType": "MemberAccess",
																						"src": "17852:13:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "==",
																					"rightExpression": {
																						"hexValue": "30",
																						"id": 1418,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "17869:1:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					},
																					"src": "17852:18:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bool",
																						"typeString": "bool"
																					}
																				},
																				"falseBody": {
																					"id": 1426,
																					"nodeType": "Block",
																					"src": "17953:195:3",
																					"statements": [
																						{
																							"AST": {
																								"nodeType": "YulBlock",
																								"src": "18041:88:3",
																								"statements": [
																									{
																										"expression": {
																											"arguments": [
																												{
																													"arguments": [
																														{
																															"kind": "number",
																															"nodeType": "YulLiteral",
																															"src": "18079:2:3",
																															"type": "",
																															"value": "32"
																														},
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "18083:6:3"
																														}
																													],
																													"functionName": {
																														"name": "add",
																														"nodeType": "YulIdentifier",
																														"src": "18075:3:3"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "18075:15:3"
																												},
																												{
																													"arguments": [
																														{
																															"name": "reason",
																															"nodeType": "YulIdentifier",
																															"src": "18098:6:3"
																														}
																													],
																													"functionName": {
																														"name": "mload",
																														"nodeType": "YulIdentifier",
																														"src": "18092:5:3"
																													},
																													"nodeType": "YulFunctionCall",
																													"src": "18092:13:3"
																												}
																											],
																											"functionName": {
																												"name": "revert",
																												"nodeType": "YulIdentifier",
																												"src": "18068:6:3"
																											},
																											"nodeType": "YulFunctionCall",
																											"src": "18068:38:3"
																										},
																										"nodeType": "YulExpressionStatement",
																										"src": "18068:38:3"
																									}
																								]
																							},
																							"documentation": "@solidity memory-safe-assembly",
																							"evmVersion": "shanghai",
																							"externalReferences": [
																								{
																									"declaration": 1414,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "18083:6:3",
																									"valueSize": 1
																								},
																								{
																									"declaration": 1414,
																									"isOffset": false,
																									"isSlot": false,
																									"src": "18098:6:3",
																									"valueSize": 1
																								}
																							],
																							"id": 1425,
																							"nodeType": "InlineAssembly",
																							"src": "18032:97:3"
																						}
																					]
																				},
																				"id": 1427,
																				"nodeType": "IfStatement",
																				"src": "17848:300:3",
																				"trueBody": {
																					"id": 1424,
																					"nodeType": "Block",
																					"src": "17872:75:3",
																					"statements": [
																						{
																							"errorCall": {
																								"arguments": [
																									{
																										"id": 1421,
																										"name": "to",
																										"nodeType": "Identifier",
																										"overloadedDeclarations": [],
																										"referencedDeclaration": 1375,
																										"src": "17924:2:3",
																										"typeDescriptions": {
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									}
																								],
																								"expression": {
																									"argumentTypes": [
																										{
																											"typeIdentifier": "t_address",
																											"typeString": "address"
																										}
																									],
																									"id": 1420,
																									"name": "ERC721InvalidReceiver",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 361,
																									"src": "17902:21:3",
																									"typeDescriptions": {
																										"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																										"typeString": "function (address) pure"
																									}
																								},
																								"id": 1422,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"kind": "functionCall",
																								"lValueRequested": false,
																								"nameLocations": [],
																								"names": [],
																								"nodeType": "FunctionCall",
																								"src": "17902:25:3",
																								"tryCall": false,
																								"typeDescriptions": {
																									"typeIdentifier": "t_tuple$__$",
																									"typeString": "tuple()"
																								}
																							},
																							"id": 1423,
																							"nodeType": "RevertStatement",
																							"src": "17895:32:3"
																						}
																					]
																				}
																			}
																		]
																	},
																	"errorName": "",
																	"id": 1429,
																	"nodeType": "TryCatchClause",
																	"parameters": {
																		"id": 1415,
																		"nodeType": "ParameterList",
																		"parameters": [
																			{
																				"constant": false,
																				"id": 1414,
																				"mutability": "mutable",
																				"name": "reason",
																				"nameLocation": "17821:6:3",
																				"nodeType": "VariableDeclaration",
																				"scope": 1429,
																				"src": "17808:19:3",
																				"stateVariable": false,
																				"storageLocation": "memory",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes"
																				},
																				"typeName": {
																					"id": 1413,
																					"name": "bytes",
																					"nodeType": "ElementaryTypeName",
																					"src": "17808:5:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_bytes_storage_ptr",
																						"typeString": "bytes"
																					}
																				},
																				"visibility": "internal"
																			}
																		],
																		"src": "17807:21:3"
																	},
																	"src": "17801:362:3"
																}
															],
															"externalCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 1391,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1610,
																			"src": "17575:10:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 1392,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "17575:12:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1393,
																		"name": "from",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1373,
																		"src": "17589:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	},
																	{
																		"id": 1394,
																		"name": "tokenId",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1377,
																		"src": "17595:7:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1395,
																		"name": "data",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1379,
																		"src": "17604:4:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"expression": {
																		"arguments": [
																			{
																				"id": 1388,
																				"name": "to",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1375,
																				"src": "17554:2:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			],
																			"id": 1387,
																			"name": "IERC721Receiver",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1570,
																			"src": "17538:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_IERC721Receiver_$1570_$",
																				"typeString": "type(contract IERC721Receiver)"
																			}
																		},
																		"id": 1389,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "17538:19:3",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC721Receiver_$1570",
																			"typeString": "contract IERC721Receiver"
																		}
																	},
																	"id": 1390,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "17558:16:3",
																	"memberName": "onERC721Received",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 1569,
																	"src": "17538:36:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$",
																		"typeString": "function (address,address,uint256,bytes memory) external returns (bytes4)"
																	}
																},
																"id": 1396,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17538:71:3",
																"tryCall": true,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes4",
																	"typeString": "bytes4"
																}
															},
															"id": 1430,
															"nodeType": "TryStatement",
															"src": "17534:629:3"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 1371,
										"nodeType": "StructuredDocumentation",
										"src": "16840:536:3",
										"text": " @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\n recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\n @param from address representing the previous owner of the given token ID\n @param to target address that will receive the tokens\n @param tokenId uint256 ID of the token to be transferred\n @param data bytes optional data to send along with the call"
									},
									"id": 1434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOnERC721Received",
									"nameLocation": "17391:22:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1380,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1373,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "17422:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1434,
												"src": "17414:12:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1372,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17414:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1375,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "17436:2:3",
												"nodeType": "VariableDeclaration",
												"scope": 1434,
												"src": "17428:10:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1374,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "17428:7:3",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1377,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "17448:7:3",
												"nodeType": "VariableDeclaration",
												"scope": 1434,
												"src": "17440:15:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1376,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "17440:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1379,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "17470:4:3",
												"nodeType": "VariableDeclaration",
												"scope": 1434,
												"src": "17457:17:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1378,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "17457:5:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "17413:62:3"
									},
									"returnParameters": {
										"id": 1381,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "17484:0:3"
									},
									"scope": 1435,
									"src": "17382:799:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 1436,
							"src": "794:17390:3",
							"usedErrors": [
								337,
								342,
								351,
								356,
								361,
								368,
								373,
								378
							],
							"usedEvents": [
								1451,
								1460,
								1469
							]
						}
					],
					"src": "110:18076:3"
				},
				"id": 3
			},
			"openzeppelin-contracts/contracts/token/ERC721/IERC721.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
					"exportedSymbols": {
						"IERC165": [
							1911
						],
						"IERC721": [
							1552
						]
					},
					"id": 1553,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1437,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "111:24:4"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "../../utils/introspection/IERC165.sol",
							"id": 1439,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1553,
							"sourceUnit": 1912,
							"src": "139:62:4",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1438,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1911,
										"src": "147:7:4",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1441,
										"name": "IERC165",
										"nameLocations": [
											"297:7:4"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1911,
										"src": "297:7:4"
									},
									"id": 1442,
									"nodeType": "InheritanceSpecifier",
									"src": "297:7:4"
								}
							],
							"canonicalName": "IERC721",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1440,
								"nodeType": "StructuredDocumentation",
								"src": "205:69:4",
								"text": " @dev Required interface of an ERC721 compliant contract."
							},
							"fullyImplemented": false,
							"id": 1552,
							"linearizedBaseContracts": [
								1552,
								1911
							],
							"name": "IERC721",
							"nameLocation": "286:7:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 1443,
										"nodeType": "StructuredDocumentation",
										"src": "312:90:4",
										"text": " @dev Emitted when `tokenId` token is transferred from `from` to `to`."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 1451,
									"name": "Transfer",
									"nameLocation": "414:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1450,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1445,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "439:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "423:20:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1444,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "423:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1447,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "461:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "445:18:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1446,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "445:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1449,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "481:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1451,
												"src": "465:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1448,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "465:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "422:67:4"
									},
									"src": "408:82:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1452,
										"nodeType": "StructuredDocumentation",
										"src": "498:96:4",
										"text": " @dev Emitted when `owner` enables `approved` to manage the `tokenId` token."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 1460,
									"name": "Approval",
									"nameLocation": "606:8:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1459,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1454,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "631:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "615:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1453,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "615:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1456,
												"indexed": true,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "654:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "638:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1455,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "638:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1458,
												"indexed": true,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "680:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1460,
												"src": "664:23:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1457,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "664:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "614:74:4"
									},
									"src": "600:89:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 1461,
										"nodeType": "StructuredDocumentation",
										"src": "697:119:4",
										"text": " @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets."
									},
									"eventSelector": "17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31",
									"id": 1469,
									"name": "ApprovalForAll",
									"nameLocation": "828:14:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 1468,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1463,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "859:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "843:21:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1462,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "843:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1465,
												"indexed": true,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "882:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "866:24:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1464,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "866:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1467,
												"indexed": false,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "897:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1469,
												"src": "892:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1466,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "892:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "842:64:4"
									},
									"src": "822:85:4"
								},
								{
									"documentation": {
										"id": 1470,
										"nodeType": "StructuredDocumentation",
										"src": "915:78:4",
										"text": " @dev Returns the number of tokens in ``owner``'s account."
									},
									"functionSelector": "70a08231",
									"id": 1477,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "1008:9:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1473,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1472,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1026:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1477,
												"src": "1018:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1471,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1018:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1017:15:4"
									},
									"returnParameters": {
										"id": 1476,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1475,
												"mutability": "mutable",
												"name": "balance",
												"nameLocation": "1064:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1477,
												"src": "1056:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1474,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1056:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1055:17:4"
									},
									"scope": 1552,
									"src": "999:74:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1478,
										"nodeType": "StructuredDocumentation",
										"src": "1081:137:4",
										"text": " @dev Returns the owner of the `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "6352211e",
									"id": 1485,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "ownerOf",
									"nameLocation": "1233:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1481,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1480,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1249:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "1241:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1479,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1241:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1240:17:4"
									},
									"returnParameters": {
										"id": 1484,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1483,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1289:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1485,
												"src": "1281:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1482,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1281:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1280:15:4"
									},
									"scope": 1552,
									"src": "1224:72:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1486,
										"nodeType": "StructuredDocumentation",
										"src": "1304:578:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "b88d4fde",
									"id": 1497,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "1897:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1495,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1488,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "1922:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1914:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1487,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1914:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1490,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "1936:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1928:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1489,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1928:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1492,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "1948:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1940:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1940:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1494,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "1972:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1497,
												"src": "1957:19:4",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1493,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1957:5:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1913:64:4"
									},
									"returnParameters": {
										"id": 1496,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1986:0:4"
									},
									"scope": 1552,
									"src": "1888:99:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1498,
										"nodeType": "StructuredDocumentation",
										"src": "1995:720:4",
										"text": " @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n are aware of the ERC721 protocol to prevent tokens from being forever locked.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must exist and be owned by `from`.\n - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\n   {setApprovalForAll}.\n - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\n   a safe transfer.\n Emits a {Transfer} event."
									},
									"functionSelector": "42842e0e",
									"id": 1507,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "2730:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1505,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1500,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "2755:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "2747:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1499,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2747:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1502,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "2769:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "2761:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1501,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2761:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1504,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "2781:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1507,
												"src": "2773:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1503,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2773:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2746:43:4"
									},
									"returnParameters": {
										"id": 1506,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2798:0:4"
									},
									"scope": 1552,
									"src": "2721:78:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1508,
										"nodeType": "StructuredDocumentation",
										"src": "2807:747:4",
										"text": " @dev Transfers `tokenId` token from `from` to `to`.\n WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n understand this adds an external call which potentially creates a reentrancy vulnerability.\n Requirements:\n - `from` cannot be the zero address.\n - `to` cannot be the zero address.\n - `tokenId` token must be owned by `from`.\n - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 1517,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "3569:12:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1515,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1510,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "3590:4:4",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "3582:12:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1509,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3582:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1512,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "3604:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "3596:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1511,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3596:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1514,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "3616:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1517,
												"src": "3608:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1513,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3608:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3581:43:4"
									},
									"returnParameters": {
										"id": 1516,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3633:0:4"
									},
									"scope": 1552,
									"src": "3560:74:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1518,
										"nodeType": "StructuredDocumentation",
										"src": "3642:464:4",
										"text": " @dev Gives permission to `to` to transfer `tokenId` token to another account.\n The approval is cleared when the token is transferred.\n Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n Requirements:\n - The caller must own the token or be an approved operator.\n - `tokenId` must exist.\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 1525,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "4121:7:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1523,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1520,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "4137:2:4",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "4129:10:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1519,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4129:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1522,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4149:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1525,
												"src": "4141:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1521,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4141:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4128:29:4"
									},
									"returnParameters": {
										"id": 1524,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4166:0:4"
									},
									"scope": 1552,
									"src": "4112:55:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1526,
										"nodeType": "StructuredDocumentation",
										"src": "4175:324:4",
										"text": " @dev Approve or remove `operator` as an operator for the caller.\n Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n Requirements:\n - The `operator` cannot be the address zero.\n Emits an {ApprovalForAll} event."
									},
									"functionSelector": "a22cb465",
									"id": 1533,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "setApprovalForAll",
									"nameLocation": "4514:17:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1531,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1528,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4540:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "4532:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1527,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4532:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1530,
												"mutability": "mutable",
												"name": "approved",
												"nameLocation": "4555:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1533,
												"src": "4550:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1529,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4550:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4531:33:4"
									},
									"returnParameters": {
										"id": 1532,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4573:0:4"
									},
									"scope": 1552,
									"src": "4505:69:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1534,
										"nodeType": "StructuredDocumentation",
										"src": "4582:145:4",
										"text": " @dev Returns the account approved for `tokenId` token.\n Requirements:\n - `tokenId` must exist."
									},
									"functionSelector": "081812fc",
									"id": 1541,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getApproved",
									"nameLocation": "4742:11:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1537,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1536,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "4762:7:4",
												"nodeType": "VariableDeclaration",
												"scope": 1541,
												"src": "4754:15:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1535,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4754:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4753:17:4"
									},
									"returnParameters": {
										"id": 1540,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1539,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "4802:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1541,
												"src": "4794:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1538,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4794:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4793:18:4"
									},
									"scope": 1552,
									"src": "4733:79:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1542,
										"nodeType": "StructuredDocumentation",
										"src": "4820:142:4",
										"text": " @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n See {setApprovalForAll}"
									},
									"functionSelector": "e985e9c5",
									"id": 1551,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isApprovedForAll",
									"nameLocation": "4977:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1547,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1544,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "5002:5:4",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "4994:13:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1543,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4994:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1546,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "5017:8:4",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "5009:16:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1545,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5009:7:4",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4993:33:4"
									},
									"returnParameters": {
										"id": 1550,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1549,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1551,
												"src": "5050:4:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1548,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5050:4:4",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5049:6:4"
									},
									"scope": 1552,
									"src": "4968:88:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1553,
							"src": "276:4783:4",
							"usedErrors": [],
							"usedEvents": [
								1451,
								1460,
								1469
							]
						}
					],
					"src": "111:4950:4"
				},
				"id": 4
			},
			"openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/IERC721Receiver.sol",
					"exportedSymbols": {
						"IERC721Receiver": [
							1570
						]
					},
					"id": 1571,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1554,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "119:24:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC721Receiver",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1555,
								"nodeType": "StructuredDocumentation",
								"src": "147:156:5",
								"text": " @title ERC721 token receiver interface\n @dev Interface for any contract that wants to support safeTransfers\n from ERC721 asset contracts."
							},
							"fullyImplemented": false,
							"id": 1570,
							"linearizedBaseContracts": [
								1570
							],
							"name": "IERC721Receiver",
							"nameLocation": "315:15:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1556,
										"nodeType": "StructuredDocumentation",
										"src": "338:509:5",
										"text": " @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n by `operator` from `from`, this function is called.\n It must return its Solidity selector to confirm the token transfer.\n If any other value is returned or the interface is not implemented by the recipient, the transfer will be\n reverted.\n The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`."
									},
									"functionSelector": "150b7a02",
									"id": 1569,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "onERC721Received",
									"nameLocation": "862:16:5",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1565,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1558,
												"mutability": "mutable",
												"name": "operator",
												"nameLocation": "897:8:5",
												"nodeType": "VariableDeclaration",
												"scope": 1569,
												"src": "889:16:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1557,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "889:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1560,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "924:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1569,
												"src": "916:12:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1559,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "916:7:5",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1562,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "947:7:5",
												"nodeType": "VariableDeclaration",
												"scope": 1569,
												"src": "939:15:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1561,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "939:7:5",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1564,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "980:4:5",
												"nodeType": "VariableDeclaration",
												"scope": 1569,
												"src": "965:19:5",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1563,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "965:5:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "878:113:5"
									},
									"returnParameters": {
										"id": 1568,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1567,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1569,
												"src": "1010:6:5",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1566,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "1010:6:5",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1009:8:5"
									},
									"scope": 1570,
									"src": "853:165:5",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1571,
							"src": "305:716:5",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "119:904:5"
				},
				"id": 5
			},
			"openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/extensions/IERC721Metadata.sol",
					"exportedSymbols": {
						"IERC721": [
							1552
						],
						"IERC721Metadata": [
							1598
						]
					},
					"id": 1599,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1572,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "130:24:6"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/token/ERC721/IERC721.sol",
							"file": "../IERC721.sol",
							"id": 1574,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1599,
							"sourceUnit": 1553,
							"src": "158:39:6",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1573,
										"name": "IERC721",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1552,
										"src": "166:7:6",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 1576,
										"name": "IERC721",
										"nameLocations": [
											"368:7:6"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1552,
										"src": "368:7:6"
									},
									"id": 1577,
									"nodeType": "InheritanceSpecifier",
									"src": "368:7:6"
								}
							],
							"canonicalName": "IERC721Metadata",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1575,
								"nodeType": "StructuredDocumentation",
								"src": "201:136:6",
								"text": " @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n @dev See https://eips.ethereum.org/EIPS/eip-721"
							},
							"fullyImplemented": false,
							"id": 1598,
							"linearizedBaseContracts": [
								1598,
								1552,
								1911
							],
							"name": "IERC721Metadata",
							"nameLocation": "349:15:6",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1578,
										"nodeType": "StructuredDocumentation",
										"src": "383:60:6",
										"text": " @dev Returns the token collection name."
									},
									"functionSelector": "06fdde03",
									"id": 1583,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "name",
									"nameLocation": "458:4:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1579,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "462:2:6"
									},
									"returnParameters": {
										"id": 1582,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1581,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1583,
												"src": "488:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1580,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "488:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "487:15:6"
									},
									"scope": 1598,
									"src": "449:54:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1584,
										"nodeType": "StructuredDocumentation",
										"src": "511:62:6",
										"text": " @dev Returns the token collection symbol."
									},
									"functionSelector": "95d89b41",
									"id": 1589,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "symbol",
									"nameLocation": "588:6:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1585,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "594:2:6"
									},
									"returnParameters": {
										"id": 1588,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1587,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1589,
												"src": "620:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1586,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "620:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "619:15:6"
									},
									"scope": 1598,
									"src": "579:56:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 1590,
										"nodeType": "StructuredDocumentation",
										"src": "643:92:6",
										"text": " @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token."
									},
									"functionSelector": "c87b56dd",
									"id": 1597,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "tokenURI",
									"nameLocation": "750:8:6",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1593,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1592,
												"mutability": "mutable",
												"name": "tokenId",
												"nameLocation": "767:7:6",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "759:15:6",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1591,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "759:7:6",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "758:17:6"
									},
									"returnParameters": {
										"id": 1596,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1595,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1597,
												"src": "799:13:6",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1594,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "799:6:6",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "798:15:6"
									},
									"scope": 1598,
									"src": "741:73:6",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1599,
							"src": "339:478:6",
							"usedErrors": [],
							"usedEvents": [
								1451,
								1460,
								1469
							]
						}
					],
					"src": "130:689:6"
				},
				"id": 6
			},
			"openzeppelin-contracts/contracts/utils/Context.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/utils/Context.sol",
					"exportedSymbols": {
						"Context": [
							1620
						]
					},
					"id": 1621,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1600,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:7"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Context",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1601,
								"nodeType": "StructuredDocumentation",
								"src": "132:505:7",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 1620,
							"linearizedBaseContracts": [
								1620
							],
							"name": "Context",
							"nameLocation": "657:7:7",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 1609,
										"nodeType": "Block",
										"src": "734:36:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1606,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "752:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1607,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "756:6:7",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "752:10:7",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 1605,
												"id": 1608,
												"nodeType": "Return",
												"src": "745:17:7"
											}
										]
									},
									"id": 1610,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "681:10:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1602,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "691:2:7"
									},
									"returnParameters": {
										"id": 1605,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1604,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1610,
												"src": "725:7:7",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1603,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "725:7:7",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "724:9:7"
									},
									"scope": 1620,
									"src": "672:98:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1618,
										"nodeType": "Block",
										"src": "845:34:7",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 1615,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "863:3:7",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 1616,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "867:4:7",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "863:8:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 1614,
												"id": 1617,
												"nodeType": "Return",
												"src": "856:15:7"
											}
										]
									},
									"id": 1619,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "787:8:7",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1611,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "795:2:7"
									},
									"returnParameters": {
										"id": 1614,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1613,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1619,
												"src": "829:14:7",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 1612,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "829:5:7",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "828:16:7"
									},
									"scope": 1620,
									"src": "778:101:7",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 1621,
							"src": "639:243:7",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "104:780:7"
				},
				"id": 7
			},
			"openzeppelin-contracts/contracts/utils/Strings.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/utils/Strings.sol",
					"exportedSymbols": {
						"Math": [
							2965
						],
						"SignedMath": [
							3070
						],
						"Strings": [
							1875
						]
					},
					"id": 1876,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1622,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "104:24:8"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/math/Math.sol",
							"file": "./math/Math.sol",
							"id": 1624,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1876,
							"sourceUnit": 2966,
							"src": "132:37:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1623,
										"name": "Math",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 2965,
										"src": "140:4:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
							"file": "./math/SignedMath.sol",
							"id": 1626,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1876,
							"sourceUnit": 3071,
							"src": "171:49:8",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1625,
										"name": "SignedMath",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 3070,
										"src": "179:10:8",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Strings",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1627,
								"nodeType": "StructuredDocumentation",
								"src": "224:36:8",
								"text": " @dev String operations."
							},
							"fullyImplemented": true,
							"id": 1875,
							"linearizedBaseContracts": [
								1875
							],
							"name": "Strings",
							"nameLocation": "270:7:8",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": true,
									"id": 1630,
									"mutability": "constant",
									"name": "HEX_DIGITS",
									"nameLocation": "310:10:8",
									"nodeType": "VariableDeclaration",
									"scope": 1875,
									"src": "285:56:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes16",
										"typeString": "bytes16"
									},
									"typeName": {
										"id": 1628,
										"name": "bytes16",
										"nodeType": "ElementaryTypeName",
										"src": "285:7:8",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes16",
											"typeString": "bytes16"
										}
									},
									"value": {
										"hexValue": "30313233343536373839616263646566",
										"id": 1629,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "string",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "323:18:8",
										"typeDescriptions": {
											"typeIdentifier": "t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f",
											"typeString": "literal_string \"0123456789abcdef\""
										},
										"value": "0123456789abcdef"
									},
									"visibility": "private"
								},
								{
									"constant": true,
									"id": 1633,
									"mutability": "constant",
									"name": "ADDRESS_LENGTH",
									"nameLocation": "371:14:8",
									"nodeType": "VariableDeclaration",
									"scope": 1875,
									"src": "348:42:8",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_uint8",
										"typeString": "uint8"
									},
									"typeName": {
										"id": 1631,
										"name": "uint8",
										"nodeType": "ElementaryTypeName",
										"src": "348:5:8",
										"typeDescriptions": {
											"typeIdentifier": "t_uint8",
											"typeString": "uint8"
										}
									},
									"value": {
										"hexValue": "3230",
										"id": 1632,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "388:2:8",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_20_by_1",
											"typeString": "int_const 20"
										},
										"value": "20"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 1634,
										"nodeType": "StructuredDocumentation",
										"src": "399:83:8",
										"text": " @dev The `value` string doesn't fit in the specified `length`."
									},
									"errorSelector": "e22e27eb",
									"id": 1640,
									"name": "StringsInsufficientHexLength",
									"nameLocation": "494:28:8",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1639,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1636,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "531:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "523:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1635,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "523:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1638,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "546:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1640,
												"src": "538:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1637,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "538:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "522:31:8"
									},
									"src": "488:66:8"
								},
								{
									"body": {
										"id": 1687,
										"nodeType": "Block",
										"src": "731:647:8",
										"statements": [
											{
												"id": 1686,
												"nodeType": "UncheckedBlock",
												"src": "742:629:8",
												"statements": [
													{
														"assignments": [
															1649
														],
														"declarations": [
															{
																"constant": false,
																"id": 1649,
																"mutability": "mutable",
																"name": "length",
																"nameLocation": "775:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1686,
																"src": "767:14:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1648,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "767:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1656,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1655,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"arguments": [
																	{
																		"id": 1652,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1643,
																		"src": "795:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"expression": {
																		"id": 1650,
																		"name": "Math",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2965,
																		"src": "784:4:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_contract$_Math_$2965_$",
																			"typeString": "type(library Math)"
																		}
																	},
																	"id": 1651,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "789:5:8",
																	"memberName": "log10",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 2785,
																	"src": "784:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																		"typeString": "function (uint256) pure returns (uint256)"
																	}
																},
																"id": 1653,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "784:17:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "31",
																"id": 1654,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "804:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "784:21:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "767:38:8"
													},
													{
														"assignments": [
															1658
														],
														"declarations": [
															{
																"constant": false,
																"id": 1658,
																"mutability": "mutable",
																"name": "buffer",
																"nameLocation": "834:6:8",
																"nodeType": "VariableDeclaration",
																"scope": 1686,
																"src": "820:20:8",
																"stateVariable": false,
																"storageLocation": "memory",
																"typeDescriptions": {
																	"typeIdentifier": "t_string_memory_ptr",
																	"typeString": "string"
																},
																"typeName": {
																	"id": 1657,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "820:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1663,
														"initialValue": {
															"arguments": [
																{
																	"id": 1661,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1649,
																	"src": "854:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1660,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "NewExpression",
																"src": "843:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																},
																"typeName": {
																	"id": 1659,
																	"name": "string",
																	"nodeType": "ElementaryTypeName",
																	"src": "847:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_string_storage_ptr",
																		"typeString": "string"
																	}
																}
															},
															"id": 1662,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "843:18:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "820:41:8"
													},
													{
														"assignments": [
															1665
														],
														"declarations": [
															{
																"constant": false,
																"id": 1665,
																"mutability": "mutable",
																"name": "ptr",
																"nameLocation": "884:3:8",
																"nodeType": "VariableDeclaration",
																"scope": 1686,
																"src": "876:11:8",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1664,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "876:7:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1666,
														"nodeType": "VariableDeclarationStatement",
														"src": "876:11:8"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "959:69:8",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "978:35:8",
																	"value": {
																		"arguments": [
																			{
																				"name": "buffer",
																				"nodeType": "YulIdentifier",
																				"src": "989:6:8"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1001:2:8",
																						"type": "",
																						"value": "32"
																					},
																					{
																						"name": "length",
																						"nodeType": "YulIdentifier",
																						"src": "1005:6:8"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "997:3:8"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "997:15:8"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "985:3:8"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "985:28:8"
																	},
																	"variableNames": [
																		{
																			"name": "ptr",
																			"nodeType": "YulIdentifier",
																			"src": "978:3:8"
																		}
																	]
																}
															]
														},
														"documentation": "@solidity memory-safe-assembly",
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 1658,
																"isOffset": false,
																"isSlot": false,
																"src": "989:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1649,
																"isOffset": false,
																"isSlot": false,
																"src": "1005:6:8",
																"valueSize": 1
															},
															{
																"declaration": 1665,
																"isOffset": false,
																"isSlot": false,
																"src": "978:3:8",
																"valueSize": 1
															}
														],
														"id": 1667,
														"nodeType": "InlineAssembly",
														"src": "950:78:8"
													},
													{
														"body": {
															"id": 1682,
															"nodeType": "Block",
															"src": "1055:277:8",
															"statements": [
																{
																	"expression": {
																		"id": 1670,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "--",
																		"prefix": false,
																		"src": "1074:5:8",
																		"subExpression": {
																			"id": 1669,
																			"name": "ptr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1665,
																			"src": "1074:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1671,
																	"nodeType": "ExpressionStatement",
																	"src": "1074:5:8"
																},
																{
																	"AST": {
																		"nodeType": "YulBlock",
																		"src": "1159:88:8",
																		"statements": [
																			{
																				"expression": {
																					"arguments": [
																						{
																							"name": "ptr",
																							"nodeType": "YulIdentifier",
																							"src": "1190:3:8"
																						},
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value",
																											"nodeType": "YulIdentifier",
																											"src": "1204:5:8"
																										},
																										{
																											"kind": "number",
																											"nodeType": "YulLiteral",
																											"src": "1211:2:8",
																											"type": "",
																											"value": "10"
																										}
																									],
																									"functionName": {
																										"name": "mod",
																										"nodeType": "YulIdentifier",
																										"src": "1200:3:8"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "1200:14:8"
																								},
																								{
																									"name": "HEX_DIGITS",
																									"nodeType": "YulIdentifier",
																									"src": "1216:10:8"
																								}
																							],
																							"functionName": {
																								"name": "byte",
																								"nodeType": "YulIdentifier",
																								"src": "1195:4:8"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "1195:32:8"
																						}
																					],
																					"functionName": {
																						"name": "mstore8",
																						"nodeType": "YulIdentifier",
																						"src": "1182:7:8"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "1182:46:8"
																				},
																				"nodeType": "YulExpressionStatement",
																				"src": "1182:46:8"
																			}
																		]
																	},
																	"documentation": "@solidity memory-safe-assembly",
																	"evmVersion": "shanghai",
																	"externalReferences": [
																		{
																			"declaration": 1630,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1216:10:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1665,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1190:3:8",
																			"valueSize": 1
																		},
																		{
																			"declaration": 1643,
																			"isOffset": false,
																			"isSlot": false,
																			"src": "1204:5:8",
																			"valueSize": 1
																		}
																	],
																	"id": 1672,
																	"nodeType": "InlineAssembly",
																	"src": "1150:97:8"
																},
																{
																	"expression": {
																		"id": 1675,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 1673,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1643,
																			"src": "1265:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"hexValue": "3130",
																			"id": 1674,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1274:2:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10_by_1",
																				"typeString": "int_const 10"
																			},
																			"value": "10"
																		},
																		"src": "1265:11:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 1676,
																	"nodeType": "ExpressionStatement",
																	"src": "1265:11:8"
																},
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1679,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1677,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1643,
																			"src": "1299:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 1678,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1308:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1299:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"id": 1681,
																	"nodeType": "IfStatement",
																	"src": "1295:21:8",
																	"trueBody": {
																		"id": 1680,
																		"nodeType": "Break",
																		"src": "1311:5:8"
																	}
																}
															]
														},
														"condition": {
															"hexValue": "74727565",
															"id": 1668,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "bool",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1049:4:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															"value": "true"
														},
														"id": 1683,
														"nodeType": "WhileStatement",
														"src": "1042:290:8"
													},
													{
														"expression": {
															"id": 1684,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1658,
															"src": "1353:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1647,
														"id": 1685,
														"nodeType": "Return",
														"src": "1346:13:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1641,
										"nodeType": "StructuredDocumentation",
										"src": "562:92:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` decimal representation."
									},
									"id": 1688,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toString",
									"nameLocation": "669:8:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1644,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1643,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "686:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "678:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1642,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "678:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "677:15:8"
									},
									"returnParameters": {
										"id": 1647,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1646,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1688,
												"src": "716:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1645,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "716:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "715:15:8"
									},
									"scope": 1875,
									"src": "660:718:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1713,
										"nodeType": "Block",
										"src": "1559:94:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 1701,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 1699,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1691,
																	"src": "1591:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "<",
																"rightExpression": {
																	"hexValue": "30",
																	"id": 1700,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1599:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																},
																"src": "1591:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"falseExpression": {
																"hexValue": "",
																"id": 1703,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1609:2:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																},
																"value": ""
															},
															"id": 1704,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "Conditional",
															"src": "1591:20:8",
															"trueExpression": {
																"hexValue": "2d",
																"id": 1702,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "string",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1603:3:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561",
																	"typeString": "literal_string \"-\""
																},
																"value": "-"
															},
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1708,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1691,
																			"src": "1637:5:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		],
																		"expression": {
																			"id": 1706,
																			"name": "SignedMath",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3070,
																			"src": "1622:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_contract$_SignedMath_$3070_$",
																				"typeString": "type(library SignedMath)"
																			}
																		},
																		"id": 1707,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "1633:3:8",
																		"memberName": "abs",
																		"nodeType": "MemberAccess",
																		"referencedDeclaration": 3069,
																		"src": "1622:14:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_int256_$returns$_t_uint256_$",
																			"typeString": "function (int256) pure returns (uint256)"
																		}
																	},
																	"id": 1709,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "1622:21:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1705,
																"name": "toString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1688,
																"src": "1613:8:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256) pure returns (string memory)"
																}
															},
															"id": 1710,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1613:31:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															},
															{
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														],
														"expression": {
															"id": 1697,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "1577:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_string_storage_ptr_$",
																"typeString": "type(string storage pointer)"
															},
															"typeName": {
																"id": 1696,
																"name": "string",
																"nodeType": "ElementaryTypeName",
																"src": "1577:6:8",
																"typeDescriptions": {}
															}
														},
														"id": 1698,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1584:6:8",
														"memberName": "concat",
														"nodeType": "MemberAccess",
														"src": "1577:13:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_stringconcat_pure$__$returns$_t_string_memory_ptr_$",
															"typeString": "function () pure returns (string memory)"
														}
													},
													"id": 1711,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1577:68:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1695,
												"id": 1712,
												"nodeType": "Return",
												"src": "1570:75:8"
											}
										]
									},
									"documentation": {
										"id": 1689,
										"nodeType": "StructuredDocumentation",
										"src": "1386:91:8",
										"text": " @dev Converts a `int256` to its ASCII `string` decimal representation."
									},
									"id": 1714,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toStringSigned",
									"nameLocation": "1492:14:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1692,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1691,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1514:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "1507:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 1690,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1507:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1506:14:8"
									},
									"returnParameters": {
										"id": 1695,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1694,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1714,
												"src": "1544:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1693,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1544:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1543:15:8"
									},
									"scope": 1875,
									"src": "1483:170:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1733,
										"nodeType": "Block",
										"src": "1837:104:8",
										"statements": [
											{
												"id": 1732,
												"nodeType": "UncheckedBlock",
												"src": "1848:86:8",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"id": 1723,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1717,
																	"src": "1892:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1729,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"arguments": [
																			{
																				"id": 1726,
																				"name": "value",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 1717,
																				"src": "1911:5:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"expression": {
																				"id": 1724,
																				"name": "Math",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2965,
																				"src": "1899:4:8",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_contract$_Math_$2965_$",
																					"typeString": "type(library Math)"
																				}
																			},
																			"id": 1725,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "1904:6:8",
																			"memberName": "log256",
																			"nodeType": "MemberAccess",
																			"referencedDeclaration": 2907,
																			"src": "1899:11:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																				"typeString": "function (uint256) pure returns (uint256)"
																			}
																		},
																		"id": 1727,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1899:18:8",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "+",
																	"rightExpression": {
																		"hexValue": "31",
																		"id": 1728,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1920:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	},
																	"src": "1899:22:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 1722,
																"name": "toHexString",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	1734,
																	1817,
																	1837
																],
																"referencedDeclaration": 1817,
																"src": "1880:11:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
																	"typeString": "function (uint256,uint256) pure returns (string memory)"
																}
															},
															"id": 1730,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1880:42:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_string_memory_ptr",
																"typeString": "string memory"
															}
														},
														"functionReturnParameters": 1721,
														"id": 1731,
														"nodeType": "Return",
														"src": "1873:49:8"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1715,
										"nodeType": "StructuredDocumentation",
										"src": "1661:96:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."
									},
									"id": 1734,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "1772:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1718,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1717,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "1792:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1734,
												"src": "1784:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1716,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1784:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1783:15:8"
									},
									"returnParameters": {
										"id": 1721,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1720,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1734,
												"src": "1822:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1719,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1822:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1821:15:8"
									},
									"scope": 1875,
									"src": "1763:178:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1816,
										"nodeType": "Block",
										"src": "2159:448:8",
										"statements": [
											{
												"assignments": [
													1745
												],
												"declarations": [
													{
														"constant": false,
														"id": 1745,
														"mutability": "mutable",
														"name": "localValue",
														"nameLocation": "2178:10:8",
														"nodeType": "VariableDeclaration",
														"scope": 1816,
														"src": "2170:18:8",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 1744,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "2170:7:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1747,
												"initialValue": {
													"id": 1746,
													"name": "value",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 1737,
													"src": "2191:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2170:26:8"
											},
											{
												"assignments": [
													1749
												],
												"declarations": [
													{
														"constant": false,
														"id": 1749,
														"mutability": "mutable",
														"name": "buffer",
														"nameLocation": "2220:6:8",
														"nodeType": "VariableDeclaration",
														"scope": 1816,
														"src": "2207:19:8",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 1748,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2207:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 1758,
												"initialValue": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1756,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 1754,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 1752,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2239:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 1753,
																	"name": "length",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1739,
																	"src": "2243:6:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2239:10:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"hexValue": "32",
																"id": 1755,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2252:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "2239:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 1751,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "NewExpression",
														"src": "2229:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (uint256) pure returns (bytes memory)"
														},
														"typeName": {
															"id": 1750,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "2233:5:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														}
													},
													"id": 1757,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2229:25:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2207:47:8"
											},
											{
												"expression": {
													"id": 1763,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1759,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "2265:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1761,
														"indexExpression": {
															"hexValue": "30",
															"id": 1760,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2272:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2265:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "30",
														"id": 1762,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2277:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d",
															"typeString": "literal_string \"0\""
														},
														"value": "0"
													},
													"src": "2265:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1764,
												"nodeType": "ExpressionStatement",
												"src": "2265:15:8"
											},
											{
												"expression": {
													"id": 1769,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"baseExpression": {
															"id": 1765,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "2291:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 1767,
														"indexExpression": {
															"hexValue": "31",
															"id": 1766,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2298:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"nodeType": "IndexAccess",
														"src": "2291:9:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes1",
															"typeString": "bytes1"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "78",
														"id": 1768,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "string",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2303:3:8",
														"typeDescriptions": {
															"typeIdentifier": "t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83",
															"typeString": "literal_string \"x\""
														},
														"value": "x"
													},
													"src": "2291:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes1",
														"typeString": "bytes1"
													}
												},
												"id": 1770,
												"nodeType": "ExpressionStatement",
												"src": "2291:15:8"
											},
											{
												"body": {
													"id": 1799,
													"nodeType": "Block",
													"src": "2362:98:8",
													"statements": [
														{
															"expression": {
																"id": 1793,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"baseExpression": {
																		"id": 1785,
																		"name": "buffer",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1749,
																		"src": "2377:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	},
																	"id": 1787,
																	"indexExpression": {
																		"id": 1786,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1772,
																		"src": "2384:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"nodeType": "IndexAccess",
																	"src": "2377:9:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"baseExpression": {
																		"id": 1788,
																		"name": "HEX_DIGITS",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1630,
																		"src": "2389:10:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes16",
																			"typeString": "bytes16"
																		}
																	},
																	"id": 1792,
																	"indexExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 1791,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 1789,
																			"name": "localValue",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1745,
																			"src": "2400:10:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "&",
																		"rightExpression": {
																			"hexValue": "307866",
																			"id": 1790,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "2413:3:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_15_by_1",
																				"typeString": "int_const 15"
																			},
																			"value": "0xf"
																		},
																		"src": "2400:16:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "2389:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes1",
																		"typeString": "bytes1"
																	}
																},
																"src": "2377:40:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes1",
																	"typeString": "bytes1"
																}
															},
															"id": 1794,
															"nodeType": "ExpressionStatement",
															"src": "2377:40:8"
														},
														{
															"expression": {
																"id": 1797,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 1795,
																	"name": "localValue",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1745,
																	"src": "2432:10:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": ">>=",
																"rightHandSide": {
																	"hexValue": "34",
																	"id": 1796,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2447:1:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "2432:16:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 1798,
															"nodeType": "ExpressionStatement",
															"src": "2432:16:8"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1781,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1779,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1772,
														"src": "2350:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "31",
														"id": 1780,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2354:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "2350:5:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1800,
												"initializationExpression": {
													"assignments": [
														1772
													],
													"declarations": [
														{
															"constant": false,
															"id": 1772,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "2330:1:8",
															"nodeType": "VariableDeclaration",
															"scope": 1800,
															"src": "2322:9:8",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 1771,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "2322:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 1778,
													"initialValue": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1777,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1775,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "32",
																"id": 1773,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2334:1:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 1774,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1739,
																"src": "2338:6:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "2334:10:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 1776,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2347:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "2334:14:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "2322:26:8"
												},
												"loopExpression": {
													"expression": {
														"id": 1783,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "--",
														"prefix": true,
														"src": "2357:3:8",
														"subExpression": {
															"id": 1782,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1772,
															"src": "2359:1:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 1784,
													"nodeType": "ExpressionStatement",
													"src": "2357:3:8"
												},
												"nodeType": "ForStatement",
												"src": "2317:143:8"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 1803,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1801,
														"name": "localValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1745,
														"src": "2474:10:8",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "30",
														"id": 1802,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "2488:1:8",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "2474:15:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 1810,
												"nodeType": "IfStatement",
												"src": "2470:98:8",
												"trueBody": {
													"id": 1809,
													"nodeType": "Block",
													"src": "2491:77:8",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"id": 1805,
																		"name": "value",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1737,
																		"src": "2542:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	{
																		"id": 1806,
																		"name": "length",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1739,
																		"src": "2549:6:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		{
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	],
																	"id": 1804,
																	"name": "StringsInsufficientHexLength",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1640,
																	"src": "2513:28:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$",
																		"typeString": "function (uint256,uint256) pure"
																	}
																},
																"id": 1807,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2513:43:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 1808,
															"nodeType": "RevertStatement",
															"src": "2506:50:8"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 1813,
															"name": "buffer",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1749,
															"src": "2592:6:8",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 1812,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"nodeType": "ElementaryTypeNameExpression",
														"src": "2585:6:8",
														"typeDescriptions": {
															"typeIdentifier": "t_type$_t_string_storage_ptr_$",
															"typeString": "type(string storage pointer)"
														},
														"typeName": {
															"id": 1811,
															"name": "string",
															"nodeType": "ElementaryTypeName",
															"src": "2585:6:8",
															"typeDescriptions": {}
														}
													},
													"id": 1814,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "typeConversion",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2585:14:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1743,
												"id": 1815,
												"nodeType": "Return",
												"src": "2578:21:8"
											}
										]
									},
									"documentation": {
										"id": 1735,
										"nodeType": "StructuredDocumentation",
										"src": "1949:114:8",
										"text": " @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."
									},
									"id": 1817,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2078:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1740,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1737,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "2098:5:8",
												"nodeType": "VariableDeclaration",
												"scope": 1817,
												"src": "2090:13:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1736,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2090:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1739,
												"mutability": "mutable",
												"name": "length",
												"nameLocation": "2113:6:8",
												"nodeType": "VariableDeclaration",
												"scope": 1817,
												"src": "2105:14:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1738,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2105:7:8",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2089:31:8"
									},
									"returnParameters": {
										"id": 1743,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1742,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1817,
												"src": "2144:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1741,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2144:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2143:15:8"
									},
									"scope": 1875,
									"src": "2069:538:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1836,
										"nodeType": "Block",
										"src": "2845:77:8",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1830,
																			"name": "addr",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1820,
																			"src": "2891:4:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		],
																		"id": 1829,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "2883:7:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_uint160_$",
																			"typeString": "type(uint160)"
																		},
																		"typeName": {
																			"id": 1828,
																			"name": "uint160",
																			"nodeType": "ElementaryTypeName",
																			"src": "2883:7:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1831,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "2883:13:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint160",
																		"typeString": "uint160"
																	}
																],
																"id": 1827,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "2875:7:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 1826,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "2875:7:8",
																	"typeDescriptions": {}
																}
															},
															"id": 1832,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "2875:22:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 1833,
															"name": "ADDRESS_LENGTH",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 1633,
															"src": "2899:14:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														],
														"id": 1825,
														"name": "toHexString",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															1734,
															1817,
															1837
														],
														"referencedDeclaration": 1817,
														"src": "2863:11:8",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$",
															"typeString": "function (uint256,uint256) pure returns (string memory)"
														}
													},
													"id": 1834,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2863:51:8",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_string_memory_ptr",
														"typeString": "string memory"
													}
												},
												"functionReturnParameters": 1824,
												"id": 1835,
												"nodeType": "Return",
												"src": "2856:58:8"
											}
										]
									},
									"documentation": {
										"id": 1818,
										"nodeType": "StructuredDocumentation",
										"src": "2615:151:8",
										"text": " @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n representation."
									},
									"id": 1837,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "toHexString",
									"nameLocation": "2781:11:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1821,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1820,
												"mutability": "mutable",
												"name": "addr",
												"nameLocation": "2801:4:8",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "2793:12:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 1819,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2793:7:8",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2792:14:8"
									},
									"returnParameters": {
										"id": 1824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1823,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1837,
												"src": "2830:13:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1822,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2830:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2829:15:8"
									},
									"scope": 1875,
									"src": "2772:150:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1873,
										"nodeType": "Block",
										"src": "3082:106:8",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 1871,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 1857,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1849,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1840,
																		"src": "3106:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1848,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3100:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1847,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3100:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1850,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3100:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1851,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3109:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3100:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"expression": {
																"arguments": [
																	{
																		"id": 1854,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1842,
																		"src": "3125:1:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_string_memory_ptr",
																			"typeString": "string memory"
																		}
																	],
																	"id": 1853,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "3119:5:8",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																		"typeString": "type(bytes storage pointer)"
																	},
																	"typeName": {
																		"id": 1852,
																		"name": "bytes",
																		"nodeType": "ElementaryTypeName",
																		"src": "3119:5:8",
																		"typeDescriptions": {}
																	}
																},
																"id": 1855,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "typeConversion",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3119:8:8",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 1856,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3128:6:8",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "3119:15:8",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "3100:34:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														},
														"id": 1870,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1861,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1840,
																			"src": "3154:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1860,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3148:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1859,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3148:5:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1862,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3148:8:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1858,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3138:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1863,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3138:19:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 1867,
																			"name": "b",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1842,
																			"src": "3177:1:8",
																			"typeDescriptions": {
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_string_memory_ptr",
																				"typeString": "string memory"
																			}
																		],
																		"id": 1866,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "3171:5:8",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
																			"typeString": "type(bytes storage pointer)"
																		},
																		"typeName": {
																			"id": 1865,
																			"name": "bytes",
																			"nodeType": "ElementaryTypeName",
																			"src": "3171:5:8",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 1868,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "3171:8:8",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																],
																"id": 1864,
																"name": "keccak256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967288,
																"src": "3161:9:8",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
																	"typeString": "function (bytes memory) pure returns (bytes32)"
																}
															},
															"id": 1869,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3161:19:8",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes32",
																"typeString": "bytes32"
															}
														},
														"src": "3138:42:8",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "3100:80:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1846,
												"id": 1872,
												"nodeType": "Return",
												"src": "3093:87:8"
											}
										]
									},
									"documentation": {
										"id": 1838,
										"nodeType": "StructuredDocumentation",
										"src": "2930:68:8",
										"text": " @dev Returns true if the two strings are equal."
									},
									"id": 1874,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "equal",
									"nameLocation": "3013:5:8",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1843,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1840,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3033:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1874,
												"src": "3019:15:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1839,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3019:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1842,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3050:1:8",
												"nodeType": "VariableDeclaration",
												"scope": 1874,
												"src": "3036:15:8",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 1841,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3036:6:8",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3018:34:8"
									},
									"returnParameters": {
										"id": 1846,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1845,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1874,
												"src": "3076:4:8",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1844,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "3076:4:8",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3075:6:8"
									},
									"scope": 1875,
									"src": "3004:184:8",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 1876,
							"src": "262:2929:8",
							"usedErrors": [
								1640
							],
							"usedEvents": []
						}
					],
					"src": "104:3089:8"
				},
				"id": 8
			},
			"openzeppelin-contracts/contracts/utils/introspection/ERC165.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/utils/introspection/ERC165.sol",
					"exportedSymbols": {
						"ERC165": [
							1899
						],
						"IERC165": [
							1911
						]
					},
					"id": 1900,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1877,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "117:24:9"
						},
						{
							"absolutePath": "openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
							"file": "./IERC165.sol",
							"id": 1879,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 1900,
							"sourceUnit": 1912,
							"src": "145:38:9",
							"symbolAliases": [
								{
									"foreign": {
										"id": 1878,
										"name": "IERC165",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 1911,
										"src": "153:7:9",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 1881,
										"name": "IERC165",
										"nameLocations": [
											"706:7:9"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 1911,
										"src": "706:7:9"
									},
									"id": 1882,
									"nodeType": "InheritanceSpecifier",
									"src": "706:7:9"
								}
							],
							"canonicalName": "ERC165",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 1880,
								"nodeType": "StructuredDocumentation",
								"src": "187:489:9",
								"text": " @dev Implementation of the {IERC165} interface.\n Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n for the additional interface id that will be supported. For example:\n ```solidity\n function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n }\n ```"
							},
							"fullyImplemented": true,
							"id": 1899,
							"linearizedBaseContracts": [
								1899,
								1911
							],
							"name": "ERC165",
							"nameLocation": "696:6:9",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"baseFunctions": [
										1910
									],
									"body": {
										"id": 1897,
										"nodeType": "Block",
										"src": "867:66:9",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													},
													"id": 1895,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 1890,
														"name": "interfaceId",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 1885,
														"src": "885:11:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 1892,
																	"name": "IERC165",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1911,
																	"src": "905:7:9",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1911_$",
																		"typeString": "type(contract IERC165)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_contract$_IERC165_$1911_$",
																		"typeString": "type(contract IERC165)"
																	}
																],
																"id": 1891,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "900:4:9",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 1893,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "900:13:9",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_contract$_IERC165_$1911",
																"typeString": "type(contract IERC165)"
															}
														},
														"id": 1894,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "914:11:9",
														"memberName": "interfaceId",
														"nodeType": "MemberAccess",
														"src": "900:25:9",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes4",
															"typeString": "bytes4"
														}
													},
													"src": "885:40:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 1889,
												"id": 1896,
												"nodeType": "Return",
												"src": "878:47:9"
											}
										]
									},
									"documentation": {
										"id": 1883,
										"nodeType": "StructuredDocumentation",
										"src": "721:58:9",
										"text": " @dev See {IERC165-supportsInterface}."
									},
									"functionSelector": "01ffc9a7",
									"id": 1898,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "794:17:9",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1886,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1885,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "819:11:9",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "812:18:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1884,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "812:6:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "811:20:9"
									},
									"returnParameters": {
										"id": 1889,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1888,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1898,
												"src": "861:4:9",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1887,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "861:4:9",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "860:6:9"
									},
									"scope": 1899,
									"src": "785:148:9",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								}
							],
							"scope": 1900,
							"src": "678:258:9",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "117:821:9"
				},
				"id": 9
			},
			"openzeppelin-contracts/contracts/utils/introspection/IERC165.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/utils/introspection/IERC165.sol",
					"exportedSymbols": {
						"IERC165": [
							1911
						]
					},
					"id": 1912,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1901,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "118:24:10"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC165",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 1902,
								"nodeType": "StructuredDocumentation",
								"src": "146:287:10",
								"text": " @dev Interface of the ERC165 standard, as defined in the\n https://eips.ethereum.org/EIPS/eip-165[EIP].\n Implementers can declare support of contract interfaces, which can then be\n queried by others ({ERC165Checker}).\n For an implementation, see {ERC165}."
							},
							"fullyImplemented": false,
							"id": 1911,
							"linearizedBaseContracts": [
								1911
							],
							"name": "IERC165",
							"nameLocation": "445:7:10",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1903,
										"nodeType": "StructuredDocumentation",
										"src": "460:347:10",
										"text": " @dev Returns true if this contract implements the interface defined by\n `interfaceId`. See the corresponding\n https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n to learn more about how these ids are created.\n This function call must use less than 30 000 gas."
									},
									"functionSelector": "01ffc9a7",
									"id": 1910,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "supportsInterface",
									"nameLocation": "822:17:10",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1906,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1905,
												"mutability": "mutable",
												"name": "interfaceId",
												"nameLocation": "847:11:10",
												"nodeType": "VariableDeclaration",
												"scope": 1910,
												"src": "840:18:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes4",
													"typeString": "bytes4"
												},
												"typeName": {
													"id": 1904,
													"name": "bytes4",
													"nodeType": "ElementaryTypeName",
													"src": "840:6:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes4",
														"typeString": "bytes4"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "839:20:10"
									},
									"returnParameters": {
										"id": 1909,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1908,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1910,
												"src": "883:4:10",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1907,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "883:4:10",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "882:6:10"
									},
									"scope": 1911,
									"src": "813:76:10",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 1912,
							"src": "435:457:10",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "118:776:10"
				},
				"id": 10
			},
			"openzeppelin-contracts/contracts/utils/math/Math.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/utils/math/Math.sol",
					"exportedSymbols": {
						"Math": [
							2965
						]
					},
					"id": 2966,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1913,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "106:24:11"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Math",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 1914,
								"nodeType": "StructuredDocumentation",
								"src": "134:75:11",
								"text": " @dev Standard math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 2965,
							"linearizedBaseContracts": [
								2965
							],
							"name": "Math",
							"nameLocation": "219:4:11",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 1915,
										"nodeType": "StructuredDocumentation",
										"src": "231:52:11",
										"text": " @dev Muldiv operation overflow."
									},
									"errorSelector": "227bc153",
									"id": 1917,
									"name": "MathOverflowedMulDiv",
									"nameLocation": "295:20:11",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 1916,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "315:2:11"
									},
									"src": "289:29:11"
								},
								{
									"canonicalName": "Math.Rounding",
									"id": 1922,
									"members": [
										{
											"id": 1918,
											"name": "Floor",
											"nameLocation": "351:5:11",
											"nodeType": "EnumValue",
											"src": "351:5:11"
										},
										{
											"id": 1919,
											"name": "Ceil",
											"nameLocation": "395:4:11",
											"nodeType": "EnumValue",
											"src": "395:4:11"
										},
										{
											"id": 1920,
											"name": "Trunc",
											"nameLocation": "438:5:11",
											"nodeType": "EnumValue",
											"src": "438:5:11"
										},
										{
											"id": 1921,
											"name": "Expand",
											"nameLocation": "469:6:11",
											"nodeType": "EnumValue",
											"src": "469:6:11"
										}
									],
									"name": "Rounding",
									"nameLocation": "331:8:11",
									"nodeType": "EnumDefinition",
									"src": "326:174:11"
								},
								{
									"body": {
										"id": 1953,
										"nodeType": "Block",
										"src": "685:146:11",
										"statements": [
											{
												"id": 1952,
												"nodeType": "UncheckedBlock",
												"src": "696:128:11",
												"statements": [
													{
														"assignments": [
															1935
														],
														"declarations": [
															{
																"constant": false,
																"id": 1935,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "729:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 1952,
																"src": "721:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 1934,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "721:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 1939,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1938,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1936,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1925,
																"src": "733:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 1937,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1927,
																"src": "737:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "733:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "721:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1942,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1940,
																"name": "c",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1935,
																"src": "757:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 1941,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1925,
																"src": "761:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "757:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1947,
														"nodeType": "IfStatement",
														"src": "753:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1943,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "772:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1944,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "779:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1945,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "771:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1933,
															"id": 1946,
															"nodeType": "Return",
															"src": "764:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1948,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "804:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 1949,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1935,
																	"src": "810:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1950,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "803:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1933,
														"id": 1951,
														"nodeType": "Return",
														"src": "796:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1923,
										"nodeType": "StructuredDocumentation",
										"src": "508:95:11",
										"text": " @dev Returns the addition of two unsigned integers, with an overflow flag."
									},
									"id": 1954,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryAdd",
									"nameLocation": "618:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1928,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1925,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "633:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "625:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1924,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "625:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1927,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "644:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "636:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1926,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "636:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "624:22:11"
									},
									"returnParameters": {
										"id": 1933,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1930,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "670:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1929,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "670:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1932,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1954,
												"src": "676:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1931,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "676:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "669:15:11"
									},
									"scope": 2965,
									"src": "609:222:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 1981,
										"nodeType": "Block",
										"src": "1019:118:11",
										"statements": [
											{
												"id": 1980,
												"nodeType": "UncheckedBlock",
												"src": "1030:100:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1968,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1966,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1959,
																"src": "1059:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"id": 1967,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1957,
																"src": "1063:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1059:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 1973,
														"nodeType": "IfStatement",
														"src": "1055:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 1969,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1074:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 1970,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1081:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1971,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1073:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1965,
															"id": 1972,
															"nodeType": "Return",
															"src": "1066:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 1974,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1106:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 1977,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 1975,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1957,
																		"src": "1112:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 1976,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 1959,
																		"src": "1116:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "1112:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 1978,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1105:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1965,
														"id": 1979,
														"nodeType": "Return",
														"src": "1098:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1955,
										"nodeType": "StructuredDocumentation",
										"src": "839:98:11",
										"text": " @dev Returns the subtraction of two unsigned integers, with an overflow flag."
									},
									"id": 1982,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "trySub",
									"nameLocation": "952:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1960,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1957,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "967:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "959:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1956,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "959:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1959,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "978:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "970:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1958,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "970:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "958:22:11"
									},
									"returnParameters": {
										"id": 1965,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1962,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "1004:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1961,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1004:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1964,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 1982,
												"src": "1010:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1963,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1010:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1003:15:11"
									},
									"scope": 2965,
									"src": "943:194:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2023,
										"nodeType": "Block",
										"src": "1328:427:11",
										"statements": [
											{
												"id": 2022,
												"nodeType": "UncheckedBlock",
												"src": "1339:409:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 1996,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 1994,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1985,
																"src": "1601:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 1995,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1606:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1601:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2001,
														"nodeType": "IfStatement",
														"src": "1597:28:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "74727565",
																		"id": 1997,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1617:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "true"
																	},
																	{
																		"hexValue": "30",
																		"id": 1998,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1623:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 1999,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1616:9:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1993,
															"id": 2000,
															"nodeType": "Return",
															"src": "1609:16:11"
														}
													},
													{
														"assignments": [
															2003
														],
														"declarations": [
															{
																"constant": false,
																"id": 2003,
																"mutability": "mutable",
																"name": "c",
																"nameLocation": "1648:1:11",
																"nodeType": "VariableDeclaration",
																"scope": 2022,
																"src": "1640:9:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2002,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1640:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2007,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2006,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2004,
																"name": "a",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1985,
																"src": "1652:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2005,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1987,
																"src": "1656:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1652:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "1640:17:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2012,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2010,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2008,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2003,
																	"src": "1676:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2009,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 1985,
																	"src": "1680:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "1676:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "!=",
															"rightExpression": {
																"id": 2011,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 1987,
																"src": "1685:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "1676:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2017,
														"nodeType": "IfStatement",
														"src": "1672:33:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2013,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1696:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2014,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "1703:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2015,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "1695:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 1993,
															"id": 2016,
															"nodeType": "Return",
															"src": "1688:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2018,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1728:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"id": 2019,
																	"name": "c",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2003,
																	"src": "1734:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2020,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "1727:9:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 1993,
														"id": 2021,
														"nodeType": "Return",
														"src": "1720:16:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 1983,
										"nodeType": "StructuredDocumentation",
										"src": "1145:101:11",
										"text": " @dev Returns the multiplication of two unsigned integers, with an overflow flag."
									},
									"id": 2024,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMul",
									"nameLocation": "1261:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 1988,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1985,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1276:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "1268:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1984,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1268:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1987,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1287:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "1279:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1986,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1279:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1267:22:11"
									},
									"returnParameters": {
										"id": 1993,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 1990,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "1313:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 1989,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1313:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 1992,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2024,
												"src": "1319:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 1991,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1319:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1312:15:11"
									},
									"scope": 2965,
									"src": "1252:503:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2051,
										"nodeType": "Block",
										"src": "1947:119:11",
										"statements": [
											{
												"id": 2050,
												"nodeType": "UncheckedBlock",
												"src": "1958:101:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2038,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2036,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2029,
																"src": "1987:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2037,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1992:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "1987:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2043,
														"nodeType": "IfStatement",
														"src": "1983:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2039,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2003:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2040,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2010:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2041,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2002:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2035,
															"id": 2042,
															"nodeType": "Return",
															"src": "1995:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2044,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2035:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2047,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2045,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2027,
																		"src": "2041:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2046,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2029,
																		"src": "2045:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2041:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2048,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2034:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2035,
														"id": 2049,
														"nodeType": "Return",
														"src": "2027:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2025,
										"nodeType": "StructuredDocumentation",
										"src": "1763:102:11",
										"text": " @dev Returns the division of two unsigned integers, with a division by zero flag."
									},
									"id": 2052,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryDiv",
									"nameLocation": "1880:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2030,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2027,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "1895:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1887:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2026,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1887:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2029,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "1906:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1898:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2028,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1898:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1886:22:11"
									},
									"returnParameters": {
										"id": 2035,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2032,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1932:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2031,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "1932:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2034,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2052,
												"src": "1938:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2033,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1938:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1931:15:11"
									},
									"scope": 2965,
									"src": "1871:195:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2079,
										"nodeType": "Block",
										"src": "2268:119:11",
										"statements": [
											{
												"id": 2078,
												"nodeType": "UncheckedBlock",
												"src": "2279:101:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2066,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2064,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2057,
																"src": "2308:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2065,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2313:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "2308:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2071,
														"nodeType": "IfStatement",
														"src": "2304:29:11",
														"trueBody": {
															"expression": {
																"components": [
																	{
																		"hexValue": "66616c7365",
																		"id": 2067,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "bool",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2324:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		"value": "false"
																	},
																	{
																		"hexValue": "30",
																		"id": 2068,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "2331:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	}
																],
																"id": 2069,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "2323:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$_t_bool_$_t_rational_0_by_1_$",
																	"typeString": "tuple(bool,int_const 0)"
																}
															},
															"functionReturnParameters": 2063,
															"id": 2070,
															"nodeType": "Return",
															"src": "2316:17:11"
														}
													},
													{
														"expression": {
															"components": [
																{
																	"hexValue": "74727565",
																	"id": 2072,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "2356:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2075,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2073,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2055,
																		"src": "2362:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "%",
																	"rightExpression": {
																		"id": 2074,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2057,
																		"src": "2366:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "2362:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2076,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "2355:13:11",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_bool_$_t_uint256_$",
																"typeString": "tuple(bool,uint256)"
															}
														},
														"functionReturnParameters": 2063,
														"id": 2077,
														"nodeType": "Return",
														"src": "2348:20:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2053,
										"nodeType": "StructuredDocumentation",
										"src": "2074:112:11",
										"text": " @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag."
									},
									"id": 2080,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "tryMod",
									"nameLocation": "2201:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2058,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2055,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2216:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "2208:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2054,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2208:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2057,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2227:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "2219:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2056,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2219:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2207:22:11"
									},
									"returnParameters": {
										"id": 2063,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2060,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "2253:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2059,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "2253:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2062,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2080,
												"src": "2259:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2061,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2259:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2252:15:11"
									},
									"scope": 2965,
									"src": "2192:195:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2097,
										"nodeType": "Block",
										"src": "2529:39:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2092,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2090,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2083,
															"src": "2547:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2091,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2085,
															"src": "2551:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2547:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2094,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2085,
														"src": "2559:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2095,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2547:13:11",
													"trueExpression": {
														"id": 2093,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2083,
														"src": "2555:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2089,
												"id": 2096,
												"nodeType": "Return",
												"src": "2540:20:11"
											}
										]
									},
									"documentation": {
										"id": 2081,
										"nodeType": "StructuredDocumentation",
										"src": "2395:61:11",
										"text": " @dev Returns the largest of two numbers."
									},
									"id": 2098,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "2471:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2086,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2083,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2483:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "2475:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2082,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2475:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2085,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2494:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "2486:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2084,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2486:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2474:22:11"
									},
									"returnParameters": {
										"id": 2089,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2088,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2098,
												"src": "2520:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2087,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2520:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2519:9:11"
									},
									"scope": 2965,
									"src": "2462:106:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2115,
										"nodeType": "Block",
										"src": "2711:39:11",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2110,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2108,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2101,
															"src": "2729:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2109,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2103,
															"src": "2733:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "2729:5:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2112,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2103,
														"src": "2741:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2113,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "2729:13:11",
													"trueExpression": {
														"id": 2111,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2101,
														"src": "2737:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2107,
												"id": 2114,
												"nodeType": "Return",
												"src": "2722:20:11"
											}
										]
									},
									"documentation": {
										"id": 2099,
										"nodeType": "StructuredDocumentation",
										"src": "2576:62:11",
										"text": " @dev Returns the smallest of two numbers."
									},
									"id": 2116,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "2653:3:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2104,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2101,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2665:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "2657:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2100,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2657:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2103,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2676:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "2668:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2102,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2668:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2656:22:11"
									},
									"returnParameters": {
										"id": 2107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2116,
												"src": "2702:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2105,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2702:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2701:9:11"
									},
									"scope": 2965,
									"src": "2644:106:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2138,
										"nodeType": "Block",
										"src": "2940:85:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2128,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2126,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2119,
																	"src": "2997:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 2127,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2121,
																	"src": "3001:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "2997:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2129,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "2996:7:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2135,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2132,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2130,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2119,
																		"src": "3007:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "^",
																	"rightExpression": {
																		"id": 2131,
																		"name": "b",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2121,
																		"src": "3011:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "3007:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 2133,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "3006:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "/",
														"rightExpression": {
															"hexValue": "32",
															"id": 2134,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3016:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "3006:11:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "2996:21:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2125,
												"id": 2137,
												"nodeType": "Return",
												"src": "2989:28:11"
											}
										]
									},
									"documentation": {
										"id": 2117,
										"nodeType": "StructuredDocumentation",
										"src": "2758:105:11",
										"text": " @dev Returns the average of two numbers. The result is rounded towards\n zero."
									},
									"id": 2139,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "2878:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2122,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2119,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "2894:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "2886:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2118,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2886:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2121,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "2905:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "2897:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2120,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2897:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2885:22:11"
									},
									"returnParameters": {
										"id": 2125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2124,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2139,
												"src": "2931:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2123,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "2931:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2930:9:11"
									},
									"scope": 2965,
									"src": "2869:156:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2172,
										"nodeType": "Block",
										"src": "3325:268:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2151,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2149,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2144,
														"src": "3340:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2150,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3345:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "3340:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2157,
												"nodeType": "IfStatement",
												"src": "3336:130:11",
												"trueBody": {
													"id": 2156,
													"nodeType": "Block",
													"src": "3348:118:11",
													"statements": [
														{
															"expression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2154,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2152,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2142,
																	"src": "3449:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "/",
																"rightExpression": {
																	"id": 2153,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2144,
																	"src": "3453:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "3449:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"functionReturnParameters": 2148,
															"id": 2155,
															"nodeType": "Return",
															"src": "3442:12:11"
														}
													]
												}
											},
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2158,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2142,
															"src": "3557:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 2159,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3562:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "3557:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2169,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2167,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2164,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2162,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2142,
																			"src": "3571:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"hexValue": "31",
																			"id": 2163,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "3575:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "3571:5:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2165,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "3570:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "/",
															"rightExpression": {
																"id": 2166,
																"name": "b",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2144,
																"src": "3580:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "3570:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"hexValue": "31",
															"id": 2168,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "3584:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "3570:15:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 2170,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "3557:28:11",
													"trueExpression": {
														"hexValue": "30",
														"id": 2161,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "3566:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2148,
												"id": 2171,
												"nodeType": "Return",
												"src": "3550:35:11"
											}
										]
									},
									"documentation": {
										"id": 2140,
										"nodeType": "StructuredDocumentation",
										"src": "3033:215:11",
										"text": " @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds towards infinity instead\n of rounding towards zero."
									},
									"id": 2173,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "ceilDiv",
									"nameLocation": "3263:7:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2145,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2142,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "3279:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "3271:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2141,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3271:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2144,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "3290:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "3282:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2143,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3282:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3270:22:11"
									},
									"returnParameters": {
										"id": 2148,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2147,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2173,
												"src": "3316:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2146,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3316:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3315:9:11"
									},
									"scope": 2965,
									"src": "3254:339:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2298,
										"nodeType": "Block",
										"src": "4023:4097:11",
										"statements": [
											{
												"id": 2297,
												"nodeType": "UncheckedBlock",
												"src": "4034:4079:11",
												"statements": [
													{
														"assignments": [
															2186
														],
														"declarations": [
															{
																"constant": false,
																"id": 2186,
																"mutability": "mutable",
																"name": "prod0",
																"nameLocation": "4367:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2297,
																"src": "4359:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2185,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4359:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2190,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2189,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2187,
																"name": "x",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2176,
																"src": "4375:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"id": 2188,
																"name": "y",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2178,
																"src": "4379:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "4375:5:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "4359:21:11"
													},
													{
														"assignments": [
															2192
														],
														"declarations": [
															{
																"constant": false,
																"id": 2192,
																"mutability": "mutable",
																"name": "prod1",
																"nameLocation": "4448:5:11",
																"nodeType": "VariableDeclaration",
																"scope": 2297,
																"src": "4440:13:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2191,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "4440:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2193,
														"nodeType": "VariableDeclarationStatement",
														"src": "4440:13:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "4521:125:11",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "4540:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "4557:1:11"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "4560:1:11"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "4567:1:11",
																						"type": "",
																						"value": "0"
																					}
																				],
																				"functionName": {
																					"name": "not",
																					"nodeType": "YulIdentifier",
																					"src": "4563:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4563:6:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "4550:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4550:20:11"
																	},
																	"variables": [
																		{
																			"name": "mm",
																			"nodeType": "YulTypedName",
																			"src": "4544:2:11",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "4588:43:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "4605:2:11"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "4609:5:11"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "4601:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4601:14:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "mm",
																						"nodeType": "YulIdentifier",
																						"src": "4620:2:11"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "4624:5:11"
																					}
																				],
																				"functionName": {
																					"name": "lt",
																					"nodeType": "YulIdentifier",
																					"src": "4617:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "4617:13:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "4597:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "4597:34:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "4588:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "4609:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "4624:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2192,
																"isOffset": false,
																"isSlot": false,
																"src": "4588:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2176,
																"isOffset": false,
																"isSlot": false,
																"src": "4557:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2178,
																"isOffset": false,
																"isSlot": false,
																"src": "4560:1:11",
																"valueSize": 1
															}
														],
														"id": 2194,
														"nodeType": "InlineAssembly",
														"src": "4512:134:11"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2197,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2195,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2192,
																"src": "4730:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "30",
																"id": 2196,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4739:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "4730:10:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2203,
														"nodeType": "IfStatement",
														"src": "4726:373:11",
														"trueBody": {
															"id": 2202,
															"nodeType": "Block",
															"src": "4742:357:11",
															"statements": [
																{
																	"expression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2200,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 2198,
																			"name": "prod0",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2186,
																			"src": "5064:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "/",
																		"rightExpression": {
																			"id": 2199,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2180,
																			"src": "5072:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "5064:19:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"functionReturnParameters": 2184,
																	"id": 2201,
																	"nodeType": "Return",
																	"src": "5057:26:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2206,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2204,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2180,
																"src": "5208:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<=",
															"rightExpression": {
																"id": 2205,
																"name": "prod1",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2192,
																"src": "5223:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "5208:20:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2211,
														"nodeType": "IfStatement",
														"src": "5204:90:11",
														"trueBody": {
															"id": 2210,
															"nodeType": "Block",
															"src": "5230:64:11",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 2207,
																			"name": "MathOverflowedMulDiv",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 1917,
																			"src": "5256:20:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 2208,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "5256:22:11",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 2209,
																	"nodeType": "RevertStatement",
																	"src": "5249:29:11"
																}
															]
														}
													},
													{
														"assignments": [
															2213
														],
														"declarations": [
															{
																"constant": false,
																"id": 2213,
																"mutability": "mutable",
																"name": "remainder",
																"nameLocation": "5564:9:11",
																"nodeType": "VariableDeclaration",
																"scope": 2297,
																"src": "5556:17:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2212,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "5556:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2214,
														"nodeType": "VariableDeclarationStatement",
														"src": "5556:17:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "5597:298:11",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "5668:38:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "x",
																				"nodeType": "YulIdentifier",
																				"src": "5688:1:11"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "5691:1:11"
																			},
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "5694:11:11"
																			}
																		],
																		"functionName": {
																			"name": "mulmod",
																			"nodeType": "YulIdentifier",
																			"src": "5681:6:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5681:25:11"
																	},
																	"variableNames": [
																		{
																			"name": "remainder",
																			"nodeType": "YulIdentifier",
																			"src": "5668:9:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5791:41:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod1",
																				"nodeType": "YulIdentifier",
																				"src": "5804:5:11"
																			},
																			{
																				"arguments": [
																					{
																						"name": "remainder",
																						"nodeType": "YulIdentifier",
																						"src": "5814:9:11"
																					},
																					{
																						"name": "prod0",
																						"nodeType": "YulIdentifier",
																						"src": "5825:5:11"
																					}
																				],
																				"functionName": {
																					"name": "gt",
																					"nodeType": "YulIdentifier",
																					"src": "5811:2:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "5811:20:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5800:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5800:32:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod1",
																			"nodeType": "YulIdentifier",
																			"src": "5791:5:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "5850:30:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "5863:5:11"
																			},
																			{
																				"name": "remainder",
																				"nodeType": "YulIdentifier",
																				"src": "5870:9:11"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "5859:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "5859:21:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "5850:5:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2180,
																"isOffset": false,
																"isSlot": false,
																"src": "5694:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "5825:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "5850:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "5863:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2192,
																"isOffset": false,
																"isSlot": false,
																"src": "5791:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2192,
																"isOffset": false,
																"isSlot": false,
																"src": "5804:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2213,
																"isOffset": false,
																"isSlot": false,
																"src": "5668:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2213,
																"isOffset": false,
																"isSlot": false,
																"src": "5814:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2213,
																"isOffset": false,
																"isSlot": false,
																"src": "5870:9:11",
																"valueSize": 1
															},
															{
																"declaration": 2176,
																"isOffset": false,
																"isSlot": false,
																"src": "5688:1:11",
																"valueSize": 1
															},
															{
																"declaration": 2178,
																"isOffset": false,
																"isSlot": false,
																"src": "5691:1:11",
																"valueSize": 1
															}
														],
														"id": 2215,
														"nodeType": "InlineAssembly",
														"src": "5588:307:11"
													},
													{
														"assignments": [
															2217
														],
														"declarations": [
															{
																"constant": false,
																"id": 2217,
																"mutability": "mutable",
																"name": "twos",
																"nameLocation": "6112:4:11",
																"nodeType": "VariableDeclaration",
																"scope": 2297,
																"src": "6104:12:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2216,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6104:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2224,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2223,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2218,
																"name": "denominator",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2180,
																"src": "6119:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "&",
															"rightExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2221,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "30",
																			"id": 2219,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6134:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "-",
																		"rightExpression": {
																			"id": 2220,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2180,
																			"src": "6138:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6134:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2222,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6133:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6119:31:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6104:46:11"
													},
													{
														"AST": {
															"nodeType": "YulBlock",
															"src": "6174:371:11",
															"statements": [
																{
																	"nodeType": "YulAssignment",
																	"src": "6241:37:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "denominator",
																				"nodeType": "YulIdentifier",
																				"src": "6260:11:11"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "6273:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "6256:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6256:22:11"
																	},
																	"variableNames": [
																		{
																			"name": "denominator",
																			"nodeType": "YulIdentifier",
																			"src": "6241:11:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6348:25:11",
																	"value": {
																		"arguments": [
																			{
																				"name": "prod0",
																				"nodeType": "YulIdentifier",
																				"src": "6361:5:11"
																			},
																			{
																				"name": "twos",
																				"nodeType": "YulIdentifier",
																				"src": "6368:4:11"
																			}
																		],
																		"functionName": {
																			"name": "div",
																			"nodeType": "YulIdentifier",
																			"src": "6357:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6357:16:11"
																	},
																	"variableNames": [
																		{
																			"name": "prod0",
																			"nodeType": "YulIdentifier",
																			"src": "6348:5:11"
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "6491:39:11",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "6511:1:11",
																								"type": "",
																								"value": "0"
																							},
																							{
																								"name": "twos",
																								"nodeType": "YulIdentifier",
																								"src": "6514:4:11"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "6507:3:11"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "6507:12:11"
																					},
																					{
																						"name": "twos",
																						"nodeType": "YulIdentifier",
																						"src": "6521:4:11"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "6503:3:11"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "6503:23:11"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "6528:1:11",
																				"type": "",
																				"value": "1"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "6499:3:11"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "6499:31:11"
																	},
																	"variableNames": [
																		{
																			"name": "twos",
																			"nodeType": "YulIdentifier",
																			"src": "6491:4:11"
																		}
																	]
																}
															]
														},
														"evmVersion": "shanghai",
														"externalReferences": [
															{
																"declaration": 2180,
																"isOffset": false,
																"isSlot": false,
																"src": "6241:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2180,
																"isOffset": false,
																"isSlot": false,
																"src": "6260:11:11",
																"valueSize": 1
															},
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "6348:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2186,
																"isOffset": false,
																"isSlot": false,
																"src": "6361:5:11",
																"valueSize": 1
															},
															{
																"declaration": 2217,
																"isOffset": false,
																"isSlot": false,
																"src": "6273:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2217,
																"isOffset": false,
																"isSlot": false,
																"src": "6368:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2217,
																"isOffset": false,
																"isSlot": false,
																"src": "6491:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2217,
																"isOffset": false,
																"isSlot": false,
																"src": "6514:4:11",
																"valueSize": 1
															},
															{
																"declaration": 2217,
																"isOffset": false,
																"isSlot": false,
																"src": "6521:4:11",
																"valueSize": 1
															}
														],
														"id": 2225,
														"nodeType": "InlineAssembly",
														"src": "6165:380:11"
													},
													{
														"expression": {
															"id": 2230,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2226,
																"name": "prod0",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2186,
																"src": "6614:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "|=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2229,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2227,
																	"name": "prod1",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2192,
																	"src": "6623:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2228,
																	"name": "twos",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2217,
																	"src": "6631:4:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "6623:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "6614:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2231,
														"nodeType": "ExpressionStatement",
														"src": "6614:21:11"
													},
													{
														"assignments": [
															2233
														],
														"declarations": [
															{
																"constant": false,
																"id": 2233,
																"mutability": "mutable",
																"name": "inverse",
																"nameLocation": "6966:7:11",
																"nodeType": "VariableDeclaration",
																"scope": 2297,
																"src": "6958:15:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2232,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "6958:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2240,
														"initialValue": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2239,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"components": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 2236,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"hexValue": "33",
																			"id": 2234,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "6977:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_3_by_1",
																				"typeString": "int_const 3"
																			},
																			"value": "3"
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "*",
																		"rightExpression": {
																			"id": 2235,
																			"name": "denominator",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2180,
																			"src": "6981:11:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "6977:15:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	}
																],
																"id": 2237,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "6976:17:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "^",
															"rightExpression": {
																"hexValue": "32",
																"id": 2238,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "6996:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "6976:21:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "6958:39:11"
													},
													{
														"expression": {
															"id": 2247,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2241,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "7218:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2246,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2242,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7229:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2245,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2243,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "7233:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2244,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2233,
																		"src": "7247:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7233:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7229:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7218:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2248,
														"nodeType": "ExpressionStatement",
														"src": "7218:36:11"
													},
													{
														"expression": {
															"id": 2255,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2249,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "7288:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2254,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2250,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7299:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2253,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2251,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "7303:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2252,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2233,
																		"src": "7317:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7303:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7299:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7288:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2256,
														"nodeType": "ExpressionStatement",
														"src": "7288:36:11"
													},
													{
														"expression": {
															"id": 2263,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2257,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "7359:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2258,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7370:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2261,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2259,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "7374:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2260,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2233,
																		"src": "7388:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7374:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7370:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7359:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2264,
														"nodeType": "ExpressionStatement",
														"src": "7359:36:11"
													},
													{
														"expression": {
															"id": 2271,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2265,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "7430:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2270,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2266,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7441:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2269,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2267,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "7445:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2268,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2233,
																		"src": "7459:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7445:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7441:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7430:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2272,
														"nodeType": "ExpressionStatement",
														"src": "7430:36:11"
													},
													{
														"expression": {
															"id": 2279,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2273,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "7501:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2278,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2274,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7512:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2277,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2275,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "7516:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2276,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2233,
																		"src": "7530:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7516:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7512:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7501:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2280,
														"nodeType": "ExpressionStatement",
														"src": "7501:36:11"
													},
													{
														"expression": {
															"id": 2287,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2281,
																"name": "inverse",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2233,
																"src": "7573:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "*=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2286,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "32",
																	"id": 2282,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "7584:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"nodeType": "BinaryOperation",
																"operator": "-",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2285,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2283,
																		"name": "denominator",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2180,
																		"src": "7588:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "*",
																	"rightExpression": {
																		"id": 2284,
																		"name": "inverse",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2233,
																		"src": "7602:7:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "7588:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "7584:25:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "7573:36:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2288,
														"nodeType": "ExpressionStatement",
														"src": "7573:36:11"
													},
													{
														"expression": {
															"id": 2293,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2289,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2183,
																"src": "8049:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2292,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2290,
																	"name": "prod0",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2186,
																	"src": "8058:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "*",
																"rightExpression": {
																	"id": 2291,
																	"name": "inverse",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2233,
																	"src": "8066:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "8058:15:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "8049:24:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2294,
														"nodeType": "ExpressionStatement",
														"src": "8049:24:11"
													},
													{
														"expression": {
															"id": 2295,
															"name": "result",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2183,
															"src": "8095:6:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2184,
														"id": 2296,
														"nodeType": "Return",
														"src": "8088:13:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2174,
										"nodeType": "StructuredDocumentation",
										"src": "3601:318:11",
										"text": " @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n denominator == 0.\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n Uniswap Labs also under MIT license."
									},
									"id": 2299,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "3934:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2181,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2176,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "3949:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2299,
												"src": "3941:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2175,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3941:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2178,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "3960:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2299,
												"src": "3952:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2177,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3952:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2180,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "3971:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2299,
												"src": "3963:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2179,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3963:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3940:43:11"
									},
									"returnParameters": {
										"id": 2184,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2183,
												"mutability": "mutable",
												"name": "result",
												"nameLocation": "4015:6:11",
												"nodeType": "VariableDeclaration",
												"scope": 2299,
												"src": "4007:14:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2182,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4007:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4006:16:11"
									},
									"scope": 2965,
									"src": "3925:4195:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2341,
										"nodeType": "Block",
										"src": "8367:198:11",
										"statements": [
											{
												"assignments": [
													2315
												],
												"declarations": [
													{
														"constant": false,
														"id": 2315,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "8386:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2341,
														"src": "8378:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2314,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "8378:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2321,
												"initialValue": {
													"arguments": [
														{
															"id": 2317,
															"name": "x",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2302,
															"src": "8402:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2318,
															"name": "y",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2304,
															"src": "8405:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														{
															"id": 2319,
															"name": "denominator",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2306,
															"src": "8408:11:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 2316,
														"name": "mulDiv",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															2299,
															2342
														],
														"referencedDeclaration": 2299,
														"src": "8395:6:11",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
															"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
														}
													},
													"id": 2320,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "8395:25:11",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "8378:42:11"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 2332,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [
															{
																"id": 2323,
																"name": "rounding",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2309,
																"src": "8452:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_enum$_Rounding_$1922",
																	"typeString": "enum Math.Rounding"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_enum$_Rounding_$1922",
																	"typeString": "enum Math.Rounding"
																}
															],
															"id": 2322,
															"name": "unsignedRoundsUp",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2964,
															"src": "8435:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1922_$returns$_t_bool_$",
																"typeString": "function (enum Math.Rounding) pure returns (bool)"
															}
														},
														"id": 2324,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8435:26:11",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 2331,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2326,
																	"name": "x",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2302,
																	"src": "8472:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2327,
																	"name": "y",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2304,
																	"src": "8475:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"id": 2328,
																	"name": "denominator",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2306,
																	"src": "8478:11:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2325,
																"name": "mulmod",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967280,
																"src": "8465:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2329,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8465:25:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 2330,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "8493:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "8465:29:11",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "8435:59:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2338,
												"nodeType": "IfStatement",
												"src": "8431:103:11",
												"trueBody": {
													"id": 2337,
													"nodeType": "Block",
													"src": "8496:38:11",
													"statements": [
														{
															"expression": {
																"id": 2335,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 2333,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2315,
																	"src": "8511:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "Assignment",
																"operator": "+=",
																"rightHandSide": {
																	"hexValue": "31",
																	"id": 2334,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "8521:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "8511:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"id": 2336,
															"nodeType": "ExpressionStatement",
															"src": "8511:11:11"
														}
													]
												}
											},
											{
												"expression": {
													"id": 2339,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2315,
													"src": "8551:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2313,
												"id": 2340,
												"nodeType": "Return",
												"src": "8544:13:11"
											}
										]
									},
									"documentation": {
										"id": 2300,
										"nodeType": "StructuredDocumentation",
										"src": "8128:123:11",
										"text": " @notice Calculates x * y / denominator with full precision, following the selected rounding direction."
									},
									"id": 2342,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "mulDiv",
									"nameLocation": "8266:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2310,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2302,
												"mutability": "mutable",
												"name": "x",
												"nameLocation": "8281:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "8273:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2301,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8273:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2304,
												"mutability": "mutable",
												"name": "y",
												"nameLocation": "8292:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "8284:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2303,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8284:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2306,
												"mutability": "mutable",
												"name": "denominator",
												"nameLocation": "8303:11:11",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "8295:19:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2305,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8295:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2309,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "8325:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "8316:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1922",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2308,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2307,
														"name": "Rounding",
														"nameLocations": [
															"8316:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1922,
														"src": "8316:8:11"
													},
													"referencedDeclaration": 1922,
													"src": "8316:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1922",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8272:62:11"
									},
									"returnParameters": {
										"id": 2313,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2312,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2342,
												"src": "8358:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2311,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8358:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8357:9:11"
									},
									"scope": 2965,
									"src": "8257:308:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2453,
										"nodeType": "Block",
										"src": "8864:1616:11",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2352,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 2350,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2345,
														"src": "8879:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "30",
														"id": 2351,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "8884:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "8879:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 2356,
												"nodeType": "IfStatement",
												"src": "8875:47:11",
												"trueBody": {
													"id": 2355,
													"nodeType": "Block",
													"src": "8887:35:11",
													"statements": [
														{
															"expression": {
																"hexValue": "30",
																"id": 2353,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "8909:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"functionReturnParameters": 2349,
															"id": 2354,
															"nodeType": "Return",
															"src": "8902:8:11"
														}
													]
												}
											},
											{
												"assignments": [
													2358
												],
												"declarations": [
													{
														"constant": false,
														"id": 2358,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "9621:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2453,
														"src": "9613:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2357,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "9613:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2367,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 2366,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"hexValue": "31",
														"id": 2359,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "9630:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"nodeType": "BinaryOperation",
													"operator": "<<",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2364,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"id": 2361,
																			"name": "a",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2345,
																			"src": "9641:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 2360,
																		"name": "log2",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [
																			2621,
																			2656
																		],
																		"referencedDeclaration": 2621,
																		"src": "9636:4:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																			"typeString": "function (uint256) pure returns (uint256)"
																		}
																	},
																	"id": 2362,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "functionCall",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "9636:7:11",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2363,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "9647:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "9636:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"id": 2365,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "9635:14:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "9630:19:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "9613:36:11"
											},
											{
												"id": 2452,
												"nodeType": "UncheckedBlock",
												"src": "10056:417:11",
												"statements": [
													{
														"expression": {
															"id": 2377,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2368,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10081:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2376,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2373,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2369,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10091:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2372,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2370,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10100:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2371,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10104:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10100:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10091:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2374,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10090:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2375,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10115:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10090:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10081:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2378,
														"nodeType": "ExpressionStatement",
														"src": "10081:35:11"
													},
													{
														"expression": {
															"id": 2388,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2379,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10131:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2387,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2384,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2380,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10141:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2383,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2381,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10150:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2382,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10154:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10150:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10141:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2385,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10140:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2386,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10165:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10140:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10131:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2389,
														"nodeType": "ExpressionStatement",
														"src": "10131:35:11"
													},
													{
														"expression": {
															"id": 2399,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2390,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10181:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2398,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2395,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2391,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10191:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2394,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2392,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10200:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2393,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10204:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10200:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10191:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2396,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10190:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2397,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10215:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10190:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10181:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2400,
														"nodeType": "ExpressionStatement",
														"src": "10181:35:11"
													},
													{
														"expression": {
															"id": 2410,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2401,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10231:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2409,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2406,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2402,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10241:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2405,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2403,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10250:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2404,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10254:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10250:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10241:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2407,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10240:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2408,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10265:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10240:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10231:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2411,
														"nodeType": "ExpressionStatement",
														"src": "10231:35:11"
													},
													{
														"expression": {
															"id": 2421,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2412,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10281:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2420,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2417,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2413,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10291:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2416,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2414,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10300:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2415,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10304:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10300:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10291:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2418,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10290:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2419,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10315:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10290:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10281:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2422,
														"nodeType": "ExpressionStatement",
														"src": "10281:35:11"
													},
													{
														"expression": {
															"id": 2432,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2423,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10331:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2431,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2428,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2424,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10341:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2427,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2425,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10350:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2426,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10354:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10350:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10341:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2429,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10340:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2430,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10365:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10340:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10331:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2433,
														"nodeType": "ExpressionStatement",
														"src": "10331:35:11"
													},
													{
														"expression": {
															"id": 2443,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftHandSide": {
																"id": 2434,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2358,
																"src": "10381:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "Assignment",
															"operator": "=",
															"rightHandSide": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2442,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 2439,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 2435,
																				"name": "result",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 2358,
																				"src": "10391:6:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "+",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2438,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"id": 2436,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2345,
																					"src": "10400:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "/",
																				"rightExpression": {
																					"id": 2437,
																					"name": "result",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2358,
																					"src": "10404:6:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10400:10:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "10391:19:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 2440,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "10390:21:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2441,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "10415:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "10390:26:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "10381:35:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"id": 2444,
														"nodeType": "ExpressionStatement",
														"src": "10381:35:11"
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 2446,
																	"name": "result",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2358,
																	"src": "10442:6:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 2449,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 2447,
																		"name": "a",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2345,
																		"src": "10450:1:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "/",
																	"rightExpression": {
																		"id": 2448,
																		"name": "result",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 2358,
																		"src": "10454:6:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "10450:10:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2445,
																"name": "min",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2116,
																"src": "10438:3:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256,uint256) pure returns (uint256)"
																}
															},
															"id": 2450,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10438:23:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2349,
														"id": 2451,
														"nodeType": "Return",
														"src": "10431:30:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2343,
										"nodeType": "StructuredDocumentation",
										"src": "8573:228:11",
										"text": " @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n towards zero.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."
									},
									"id": 2454,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "8816:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2346,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2345,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "8829:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "8821:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2344,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8821:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8820:11:11"
									},
									"returnParameters": {
										"id": 2349,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2348,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2454,
												"src": "8855:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2347,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "8855:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8854:9:11"
									},
									"scope": 2965,
									"src": "8807:1673:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2488,
										"nodeType": "Block",
										"src": "10661:169:11",
										"statements": [
											{
												"id": 2487,
												"nodeType": "UncheckedBlock",
												"src": "10672:151:11",
												"statements": [
													{
														"assignments": [
															2466
														],
														"declarations": [
															{
																"constant": false,
																"id": 2466,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "10705:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2487,
																"src": "10697:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2465,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "10697:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2470,
														"initialValue": {
															"arguments": [
																{
																	"id": 2468,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2457,
																	"src": "10719:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2467,
																"name": "sqrt",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2454,
																	2489
																],
																"referencedDeclaration": 2454,
																"src": "10714:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2469,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "10714:7:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "10697:24:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2471,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2466,
																"src": "10743:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2480,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2473,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2460,
																						"src": "10770:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2472,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2964,
																					"src": "10753:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1922_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2474,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "10753:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2479,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2477,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 2475,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2466,
																						"src": "10783:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "*",
																					"rightExpression": {
																						"id": 2476,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2466,
																						"src": "10792:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "10783:15:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2478,
																					"name": "a",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2457,
																					"src": "10801:1:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "10783:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "10753:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2482,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10809:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2483,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "10753:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2481,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "10805:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2484,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "10752:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "10743:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2464,
														"id": 2486,
														"nodeType": "Return",
														"src": "10736:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2455,
										"nodeType": "StructuredDocumentation",
										"src": "10488:91:11",
										"text": " @notice Calculates sqrt(a), following the selected rounding direction."
									},
									"id": 2489,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sqrt",
									"nameLocation": "10594:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2461,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2457,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "10607:1:11",
												"nodeType": "VariableDeclaration",
												"scope": 2489,
												"src": "10599:9:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2456,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10599:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2460,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "10619:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2489,
												"src": "10610:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1922",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2459,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2458,
														"name": "Rounding",
														"nameLocations": [
															"10610:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1922,
														"src": "10610:8:11"
													},
													"referencedDeclaration": 1922,
													"src": "10610:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1922",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10598:30:11"
									},
									"returnParameters": {
										"id": 2464,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2463,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2489,
												"src": "10652:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2462,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10652:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10651:9:11"
									},
									"scope": 2965,
									"src": "10585:245:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2620,
										"nodeType": "Block",
										"src": "11027:958:11",
										"statements": [
											{
												"assignments": [
													2498
												],
												"declarations": [
													{
														"constant": false,
														"id": 2498,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "11046:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2620,
														"src": "11038:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2497,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "11038:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2500,
												"initialValue": {
													"hexValue": "30",
													"id": 2499,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "11055:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "11038:18:11"
											},
											{
												"id": 2617,
												"nodeType": "UncheckedBlock",
												"src": "11067:887:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2505,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2503,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2501,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11096:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2502,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11105:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "11096:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2504,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11111:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11096:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2515,
														"nodeType": "IfStatement",
														"src": "11092:102:11",
														"trueBody": {
															"id": 2514,
															"nodeType": "Block",
															"src": "11114:80:11",
															"statements": [
																{
																	"expression": {
																		"id": 2508,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2506,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11133:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2507,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11143:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11133:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2509,
																	"nodeType": "ExpressionStatement",
																	"src": "11133:13:11"
																},
																{
																	"expression": {
																		"id": 2512,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2510,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11165:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2511,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11175:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "11165:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2513,
																	"nodeType": "ExpressionStatement",
																	"src": "11165:13:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2520,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2518,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2516,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11212:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2517,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11221:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "11212:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2519,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11226:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11212:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2530,
														"nodeType": "IfStatement",
														"src": "11208:99:11",
														"trueBody": {
															"id": 2529,
															"nodeType": "Block",
															"src": "11229:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 2523,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2521,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11248:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2522,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11258:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11248:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2524,
																	"nodeType": "ExpressionStatement",
																	"src": "11248:12:11"
																},
																{
																	"expression": {
																		"id": 2527,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2525,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11279:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2526,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11289:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "11279:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2528,
																	"nodeType": "ExpressionStatement",
																	"src": "11279:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2535,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2533,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2531,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11325:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2532,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11334:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "11325:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2534,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11339:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11325:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2545,
														"nodeType": "IfStatement",
														"src": "11321:99:11",
														"trueBody": {
															"id": 2544,
															"nodeType": "Block",
															"src": "11342:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 2538,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2536,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11361:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2537,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11371:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11361:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2539,
																	"nodeType": "ExpressionStatement",
																	"src": "11361:12:11"
																},
																{
																	"expression": {
																		"id": 2542,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2540,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11392:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2541,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11402:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "11392:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2543,
																	"nodeType": "ExpressionStatement",
																	"src": "11392:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2550,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2546,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11438:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2547,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11447:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "11438:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2549,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11452:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11438:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2560,
														"nodeType": "IfStatement",
														"src": "11434:99:11",
														"trueBody": {
															"id": 2559,
															"nodeType": "Block",
															"src": "11455:78:11",
															"statements": [
																{
																	"expression": {
																		"id": 2553,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2551,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11474:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2552,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11484:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11474:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2554,
																	"nodeType": "ExpressionStatement",
																	"src": "11474:12:11"
																},
																{
																	"expression": {
																		"id": 2557,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2555,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11505:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2556,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11515:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "11505:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2558,
																	"nodeType": "ExpressionStatement",
																	"src": "11505:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2565,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2563,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2561,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11551:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2562,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11560:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "11551:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2564,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11564:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11551:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2575,
														"nodeType": "IfStatement",
														"src": "11547:96:11",
														"trueBody": {
															"id": 2574,
															"nodeType": "Block",
															"src": "11567:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2568,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2566,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11586:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2567,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11596:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11586:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2569,
																	"nodeType": "ExpressionStatement",
																	"src": "11586:11:11"
																},
																{
																	"expression": {
																		"id": 2572,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2570,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11616:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2571,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11626:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "11616:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2573,
																	"nodeType": "ExpressionStatement",
																	"src": "11616:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2580,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2578,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2576,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11661:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2577,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11670:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "11661:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2579,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11674:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11661:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2590,
														"nodeType": "IfStatement",
														"src": "11657:96:11",
														"trueBody": {
															"id": 2589,
															"nodeType": "Block",
															"src": "11677:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2583,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2581,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11696:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2582,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11706:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11696:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2584,
																	"nodeType": "ExpressionStatement",
																	"src": "11696:11:11"
																},
																{
																	"expression": {
																		"id": 2587,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2585,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11726:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2586,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11736:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "11726:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2588,
																	"nodeType": "ExpressionStatement",
																	"src": "11726:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2595,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2593,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2591,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11771:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2592,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11780:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "11771:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2594,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11784:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11771:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2605,
														"nodeType": "IfStatement",
														"src": "11767:96:11",
														"trueBody": {
															"id": 2604,
															"nodeType": "Block",
															"src": "11787:76:11",
															"statements": [
																{
																	"expression": {
																		"id": 2598,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2596,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2492,
																			"src": "11806:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2597,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11816:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11806:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2599,
																	"nodeType": "ExpressionStatement",
																	"src": "11806:11:11"
																},
																{
																	"expression": {
																		"id": 2602,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2600,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11836:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2601,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11846:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "11836:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2603,
																	"nodeType": "ExpressionStatement",
																	"src": "11836:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2610,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2608,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2606,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2492,
																	"src": "11881:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2607,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "11890:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "11881:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2609,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "11894:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "11881:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2616,
														"nodeType": "IfStatement",
														"src": "11877:66:11",
														"trueBody": {
															"id": 2615,
															"nodeType": "Block",
															"src": "11897:46:11",
															"statements": [
																{
																	"expression": {
																		"id": 2613,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2611,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2498,
																			"src": "11916:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2612,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "11926:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "11916:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2614,
																	"nodeType": "ExpressionStatement",
																	"src": "11916:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2618,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2498,
													"src": "11971:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2496,
												"id": 2619,
												"nodeType": "Return",
												"src": "11964:13:11"
											}
										]
									},
									"documentation": {
										"id": 2490,
										"nodeType": "StructuredDocumentation",
										"src": "10838:122:11",
										"text": " @dev Return the log in base 2 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2621,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "10975:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2493,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2492,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10988:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "10980:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2491,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10980:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10979:15:11"
									},
									"returnParameters": {
										"id": 2496,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2495,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2621,
												"src": "11018:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2494,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11018:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11017:9:11"
									},
									"scope": 2965,
									"src": "10966:1019:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2655,
										"nodeType": "Block",
										"src": "12224:173:11",
										"statements": [
											{
												"id": 2654,
												"nodeType": "UncheckedBlock",
												"src": "12235:155:11",
												"statements": [
													{
														"assignments": [
															2633
														],
														"declarations": [
															{
																"constant": false,
																"id": 2633,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "12268:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2654,
																"src": "12260:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2632,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "12260:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2637,
														"initialValue": {
															"arguments": [
																{
																	"id": 2635,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2624,
																	"src": "12282:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2634,
																"name": "log2",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2621,
																	2656
																],
																"referencedDeclaration": 2621,
																"src": "12277:4:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2636,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "12277:11:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "12260:28:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2652,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2638,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2633,
																"src": "12310:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2647,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2640,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2627,
																						"src": "12337:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2639,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2964,
																					"src": "12320:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1922_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2641,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "12320:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2646,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2644,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2642,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "12350:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"id": 2643,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2633,
																						"src": "12355:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "12350:11:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2645,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2624,
																					"src": "12364:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "12350:19:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "12320:49:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2649,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12376:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2650,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "12320:57:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2648,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12372:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2651,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "12319:59:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "12310:68:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2631,
														"id": 2653,
														"nodeType": "Return",
														"src": "12303:75:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2622,
										"nodeType": "StructuredDocumentation",
										"src": "11993:145:11",
										"text": " @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2656,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log2",
									"nameLocation": "12153:4:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2628,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2624,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12166:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2656,
												"src": "12158:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2623,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12158:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2627,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "12182:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2656,
												"src": "12173:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1922",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2626,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2625,
														"name": "Rounding",
														"nameLocations": [
															"12173:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1922,
														"src": "12173:8:11"
													},
													"referencedDeclaration": 1922,
													"src": "12173:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1922",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12157:34:11"
									},
									"returnParameters": {
										"id": 2631,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2630,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2656,
												"src": "12215:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2629,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12215:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12214:9:11"
									},
									"scope": 2965,
									"src": "12144:253:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2784,
										"nodeType": "Block",
										"src": "12596:886:11",
										"statements": [
											{
												"assignments": [
													2665
												],
												"declarations": [
													{
														"constant": false,
														"id": 2665,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "12615:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2784,
														"src": "12607:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2664,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "12607:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2667,
												"initialValue": {
													"hexValue": "30",
													"id": 2666,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "12624:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "12607:18:11"
											},
											{
												"id": 2781,
												"nodeType": "UncheckedBlock",
												"src": "12636:815:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2672,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2668,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "12665:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																},
																"id": 2671,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2669,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12674:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2670,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12680:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "12674:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(57 digits omitted)...0000"
																}
															},
															"src": "12665:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2684,
														"nodeType": "IfStatement",
														"src": "12661:106:11",
														"trueBody": {
															"id": 2683,
															"nodeType": "Block",
															"src": "12684:83:11",
															"statements": [
																{
																	"expression": {
																		"id": 2677,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2673,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2659,
																			"src": "12703:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			},
																			"id": 2676,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2674,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12712:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3634",
																				"id": 2675,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12718:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_64_by_1",
																					"typeString": "int_const 64"
																				},
																				"value": "64"
																			},
																			"src": "12712:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(57 digits omitted)...0000"
																			}
																		},
																		"src": "12703:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2678,
																	"nodeType": "ExpressionStatement",
																	"src": "12703:17:11"
																},
																{
																	"expression": {
																		"id": 2681,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2679,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "12739:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2680,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12749:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "12739:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2682,
																	"nodeType": "ExpressionStatement",
																	"src": "12739:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2689,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2685,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "12785:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																},
																"id": 2688,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2686,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12794:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2687,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12800:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "12794:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																	"typeString": "int_const 1000...(25 digits omitted)...0000"
																}
															},
															"src": "12785:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2701,
														"nodeType": "IfStatement",
														"src": "12781:106:11",
														"trueBody": {
															"id": 2700,
															"nodeType": "Block",
															"src": "12804:83:11",
															"statements": [
																{
																	"expression": {
																		"id": 2694,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2690,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2659,
																			"src": "12823:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			},
																			"id": 2693,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2691,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12832:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3332",
																				"id": 2692,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12838:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_32_by_1",
																					"typeString": "int_const 32"
																				},
																				"value": "32"
																			},
																			"src": "12832:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000000000000000000000000000_by_1",
																				"typeString": "int_const 1000...(25 digits omitted)...0000"
																			}
																		},
																		"src": "12823:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2695,
																	"nodeType": "ExpressionStatement",
																	"src": "12823:17:11"
																},
																{
																	"expression": {
																		"id": 2698,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2696,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "12859:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2697,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12869:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "12859:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2699,
																	"nodeType": "ExpressionStatement",
																	"src": "12859:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2706,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2702,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "12905:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																},
																"id": 2705,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2703,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12914:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2704,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "12920:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "12914:8:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000000000000000_by_1",
																	"typeString": "int_const 10000000000000000"
																}
															},
															"src": "12905:17:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2718,
														"nodeType": "IfStatement",
														"src": "12901:106:11",
														"trueBody": {
															"id": 2717,
															"nodeType": "Block",
															"src": "12924:83:11",
															"statements": [
																{
																	"expression": {
																		"id": 2711,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2707,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2659,
																			"src": "12943:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			},
																			"id": 2710,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2708,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12952:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "3136",
																				"id": 2709,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "12958:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_16_by_1",
																					"typeString": "int_const 16"
																				},
																				"value": "16"
																			},
																			"src": "12952:8:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000000000000000_by_1",
																				"typeString": "int_const 10000000000000000"
																			}
																		},
																		"src": "12943:17:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2712,
																	"nodeType": "ExpressionStatement",
																	"src": "12943:17:11"
																},
																{
																	"expression": {
																		"id": 2715,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2713,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "12979:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2714,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "12989:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "12979:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2716,
																	"nodeType": "ExpressionStatement",
																	"src": "12979:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2723,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2719,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "13025:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																},
																"id": 2722,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2720,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13034:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2721,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13040:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "13034:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100000000_by_1",
																	"typeString": "int_const 100000000"
																}
															},
															"src": "13025:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2735,
														"nodeType": "IfStatement",
														"src": "13021:103:11",
														"trueBody": {
															"id": 2734,
															"nodeType": "Block",
															"src": "13043:81:11",
															"statements": [
																{
																	"expression": {
																		"id": 2728,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2724,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2659,
																			"src": "13062:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			},
																			"id": 2727,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2725,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13071:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "38",
																				"id": 2726,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13077:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_8_by_1",
																					"typeString": "int_const 8"
																				},
																				"value": "8"
																			},
																			"src": "13071:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100000000_by_1",
																				"typeString": "int_const 100000000"
																			}
																		},
																		"src": "13062:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2729,
																	"nodeType": "ExpressionStatement",
																	"src": "13062:16:11"
																},
																{
																	"expression": {
																		"id": 2732,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2730,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "13097:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2731,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13107:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "13097:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2733,
																	"nodeType": "ExpressionStatement",
																	"src": "13097:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2740,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2736,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "13142:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																},
																"id": 2739,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2737,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13151:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "34",
																	"id": 2738,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13157:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_4_by_1",
																		"typeString": "int_const 4"
																	},
																	"value": "4"
																},
																"src": "13151:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10000_by_1",
																	"typeString": "int_const 10000"
																}
															},
															"src": "13142:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2752,
														"nodeType": "IfStatement",
														"src": "13138:103:11",
														"trueBody": {
															"id": 2751,
															"nodeType": "Block",
															"src": "13160:81:11",
															"statements": [
																{
																	"expression": {
																		"id": 2745,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2741,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2659,
																			"src": "13179:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			},
																			"id": 2744,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2742,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13188:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "34",
																				"id": 2743,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13194:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_4_by_1",
																					"typeString": "int_const 4"
																				},
																				"value": "4"
																			},
																			"src": "13188:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_10000_by_1",
																				"typeString": "int_const 10000"
																			}
																		},
																		"src": "13179:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2746,
																	"nodeType": "ExpressionStatement",
																	"src": "13179:16:11"
																},
																{
																	"expression": {
																		"id": 2749,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2747,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "13214:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2748,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13224:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "13214:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2750,
																	"nodeType": "ExpressionStatement",
																	"src": "13214:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2757,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2753,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "13259:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																},
																"id": 2756,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2754,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13268:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "32",
																	"id": 2755,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13274:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_2_by_1",
																		"typeString": "int_const 2"
																	},
																	"value": "2"
																},
																"src": "13268:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_100_by_1",
																	"typeString": "int_const 100"
																}
															},
															"src": "13259:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2769,
														"nodeType": "IfStatement",
														"src": "13255:103:11",
														"trueBody": {
															"id": 2768,
															"nodeType": "Block",
															"src": "13277:81:11",
															"statements": [
																{
																	"expression": {
																		"id": 2762,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2758,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2659,
																			"src": "13296:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "/=",
																		"rightHandSide": {
																			"commonType": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			},
																			"id": 2761,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"leftExpression": {
																				"hexValue": "3130",
																				"id": 2759,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13305:2:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_10_by_1",
																					"typeString": "int_const 10"
																				},
																				"value": "10"
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "**",
																			"rightExpression": {
																				"hexValue": "32",
																				"id": 2760,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "13311:1:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_2_by_1",
																					"typeString": "int_const 2"
																				},
																				"value": "2"
																			},
																			"src": "13305:7:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_100_by_1",
																				"typeString": "int_const 100"
																			}
																		},
																		"src": "13296:16:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2763,
																	"nodeType": "ExpressionStatement",
																	"src": "13296:16:11"
																},
																{
																	"expression": {
																		"id": 2766,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2764,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "13331:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2765,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13341:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "13331:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2767,
																	"nodeType": "ExpressionStatement",
																	"src": "13331:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2774,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2770,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2659,
																"src": "13376:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">=",
															"rightExpression": {
																"commonType": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																},
																"id": 2773,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"leftExpression": {
																	"hexValue": "3130",
																	"id": 2771,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13385:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_10_by_1",
																		"typeString": "int_const 10"
																	},
																	"value": "10"
																},
																"nodeType": "BinaryOperation",
																"operator": "**",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 2772,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "13391:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "13385:7:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_10_by_1",
																	"typeString": "int_const 10"
																}
															},
															"src": "13376:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2780,
														"nodeType": "IfStatement",
														"src": "13372:68:11",
														"trueBody": {
															"id": 2779,
															"nodeType": "Block",
															"src": "13394:46:11",
															"statements": [
																{
																	"expression": {
																		"id": 2777,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2775,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2665,
																			"src": "13413:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2776,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13423:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "13413:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2778,
																	"nodeType": "ExpressionStatement",
																	"src": "13413:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2782,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2665,
													"src": "13468:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2663,
												"id": 2783,
												"nodeType": "Return",
												"src": "13461:13:11"
											}
										]
									},
									"documentation": {
										"id": 2657,
										"nodeType": "StructuredDocumentation",
										"src": "12405:123:11",
										"text": " @dev Return the log in base 10 of a positive value rounded towards zero.\n Returns 0 if given 0."
									},
									"id": 2785,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "12543:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2660,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2659,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12557:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "12549:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2658,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12549:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12548:15:11"
									},
									"returnParameters": {
										"id": 2663,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2662,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2785,
												"src": "12587:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2661,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12587:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12586:9:11"
									},
									"scope": 2965,
									"src": "12534:948:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2819,
										"nodeType": "Block",
										"src": "13723:175:11",
										"statements": [
											{
												"id": 2818,
												"nodeType": "UncheckedBlock",
												"src": "13734:157:11",
												"statements": [
													{
														"assignments": [
															2797
														],
														"declarations": [
															{
																"constant": false,
																"id": 2797,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "13767:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2818,
																"src": "13759:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2796,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "13759:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2801,
														"initialValue": {
															"arguments": [
																{
																	"id": 2799,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2788,
																	"src": "13782:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2798,
																"name": "log10",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2785,
																	2820
																],
																"referencedDeclaration": 2785,
																"src": "13776:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2800,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "13776:12:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "13759:29:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2816,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2802,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2797,
																"src": "13810:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2811,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2804,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2791,
																						"src": "13837:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2803,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2964,
																					"src": "13820:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1922_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2805,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "13820:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2810,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2808,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "3130",
																						"id": 2806,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "13850:2:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_10_by_1",
																							"typeString": "int_const 10"
																						},
																						"value": "10"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "**",
																					"rightExpression": {
																						"id": 2807,
																						"name": "result",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2797,
																						"src": "13856:6:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "13850:12:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2809,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2788,
																					"src": "13865:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "13850:20:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "13820:50:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2813,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13877:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2814,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "13820:58:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2812,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "13873:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2815,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "13819:60:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "13810:69:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2795,
														"id": 2817,
														"nodeType": "Return",
														"src": "13803:76:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2786,
										"nodeType": "StructuredDocumentation",
										"src": "13490:146:11",
										"text": " @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2820,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log10",
									"nameLocation": "13651:5:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2792,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2788,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "13665:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2820,
												"src": "13657:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2787,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13657:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2791,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "13681:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2820,
												"src": "13672:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1922",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2790,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2789,
														"name": "Rounding",
														"nameLocations": [
															"13672:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1922,
														"src": "13672:8:11"
													},
													"referencedDeclaration": 1922,
													"src": "13672:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1922",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13656:34:11"
									},
									"returnParameters": {
										"id": 2795,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2794,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2820,
												"src": "13714:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2793,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13714:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13713:9:11"
									},
									"scope": 2965,
									"src": "13642:256:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2906,
										"nodeType": "Block",
										"src": "14226:624:11",
										"statements": [
											{
												"assignments": [
													2829
												],
												"declarations": [
													{
														"constant": false,
														"id": 2829,
														"mutability": "mutable",
														"name": "result",
														"nameLocation": "14245:6:11",
														"nodeType": "VariableDeclaration",
														"scope": 2906,
														"src": "14237:14:11",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 2828,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14237:7:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 2831,
												"initialValue": {
													"hexValue": "30",
													"id": 2830,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "14254:1:11",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14237:18:11"
											},
											{
												"id": 2903,
												"nodeType": "UncheckedBlock",
												"src": "14266:553:11",
												"statements": [
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2836,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2834,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2832,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2823,
																	"src": "14295:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "313238",
																	"id": 2833,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14304:3:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_128_by_1",
																		"typeString": "int_const 128"
																	},
																	"value": "128"
																},
																"src": "14295:12:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2835,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14310:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14295:16:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2846,
														"nodeType": "IfStatement",
														"src": "14291:101:11",
														"trueBody": {
															"id": 2845,
															"nodeType": "Block",
															"src": "14313:79:11",
															"statements": [
																{
																	"expression": {
																		"id": 2839,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2837,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2823,
																			"src": "14332:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "313238",
																			"id": 2838,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14342:3:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_128_by_1",
																				"typeString": "int_const 128"
																			},
																			"value": "128"
																		},
																		"src": "14332:13:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2840,
																	"nodeType": "ExpressionStatement",
																	"src": "14332:13:11"
																},
																{
																	"expression": {
																		"id": 2843,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2841,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2829,
																			"src": "14364:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2842,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14374:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14364:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2844,
																	"nodeType": "ExpressionStatement",
																	"src": "14364:12:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2851,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2849,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2847,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2823,
																	"src": "14410:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3634",
																	"id": 2848,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14419:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_64_by_1",
																		"typeString": "int_const 64"
																	},
																	"value": "64"
																},
																"src": "14410:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2850,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14424:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14410:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2861,
														"nodeType": "IfStatement",
														"src": "14406:98:11",
														"trueBody": {
															"id": 2860,
															"nodeType": "Block",
															"src": "14427:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 2854,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2852,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2823,
																			"src": "14446:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3634",
																			"id": 2853,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14456:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_64_by_1",
																				"typeString": "int_const 64"
																			},
																			"value": "64"
																		},
																		"src": "14446:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2855,
																	"nodeType": "ExpressionStatement",
																	"src": "14446:12:11"
																},
																{
																	"expression": {
																		"id": 2858,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2856,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2829,
																			"src": "14477:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "38",
																			"id": 2857,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14487:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_8_by_1",
																				"typeString": "int_const 8"
																			},
																			"value": "8"
																		},
																		"src": "14477:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2859,
																	"nodeType": "ExpressionStatement",
																	"src": "14477:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2866,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2864,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2862,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2823,
																	"src": "14522:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3332",
																	"id": 2863,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14531:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_32_by_1",
																		"typeString": "int_const 32"
																	},
																	"value": "32"
																},
																"src": "14522:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2865,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14536:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14522:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2876,
														"nodeType": "IfStatement",
														"src": "14518:98:11",
														"trueBody": {
															"id": 2875,
															"nodeType": "Block",
															"src": "14539:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 2869,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2867,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2823,
																			"src": "14558:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3332",
																			"id": 2868,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14568:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_32_by_1",
																				"typeString": "int_const 32"
																			},
																			"value": "32"
																		},
																		"src": "14558:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2870,
																	"nodeType": "ExpressionStatement",
																	"src": "14558:12:11"
																},
																{
																	"expression": {
																		"id": 2873,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2871,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2829,
																			"src": "14589:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "34",
																			"id": 2872,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14599:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_4_by_1",
																				"typeString": "int_const 4"
																			},
																			"value": "4"
																		},
																		"src": "14589:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2874,
																	"nodeType": "ExpressionStatement",
																	"src": "14589:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2881,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2879,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2877,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2823,
																	"src": "14634:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "3136",
																	"id": 2878,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14643:2:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_16_by_1",
																		"typeString": "int_const 16"
																	},
																	"value": "16"
																},
																"src": "14634:11:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2880,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14648:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14634:15:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2891,
														"nodeType": "IfStatement",
														"src": "14630:98:11",
														"trueBody": {
															"id": 2890,
															"nodeType": "Block",
															"src": "14651:77:11",
															"statements": [
																{
																	"expression": {
																		"id": 2884,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2882,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2823,
																			"src": "14670:5:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": ">>=",
																		"rightHandSide": {
																			"hexValue": "3136",
																			"id": 2883,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14680:2:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_16_by_1",
																				"typeString": "int_const 16"
																			},
																			"value": "16"
																		},
																		"src": "14670:12:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2885,
																	"nodeType": "ExpressionStatement",
																	"src": "14670:12:11"
																},
																{
																	"expression": {
																		"id": 2888,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2886,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2829,
																			"src": "14701:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "32",
																			"id": 2887,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14711:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_2_by_1",
																				"typeString": "int_const 2"
																			},
																			"value": "2"
																		},
																		"src": "14701:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2889,
																	"nodeType": "ExpressionStatement",
																	"src": "14701:11:11"
																}
															]
														}
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2896,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 2894,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 2892,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2823,
																	"src": "14746:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "38",
																	"id": 2893,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "14755:1:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_8_by_1",
																		"typeString": "int_const 8"
																	},
																	"value": "8"
																},
																"src": "14746:10:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": ">",
															"rightExpression": {
																"hexValue": "30",
																"id": 2895,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "14759:1:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															},
															"src": "14746:14:11",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 2902,
														"nodeType": "IfStatement",
														"src": "14742:66:11",
														"trueBody": {
															"id": 2901,
															"nodeType": "Block",
															"src": "14762:46:11",
															"statements": [
																{
																	"expression": {
																		"id": 2899,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftHandSide": {
																			"id": 2897,
																			"name": "result",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 2829,
																			"src": "14781:6:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "Assignment",
																		"operator": "+=",
																		"rightHandSide": {
																			"hexValue": "31",
																			"id": 2898,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "14791:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"src": "14781:11:11",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"id": 2900,
																	"nodeType": "ExpressionStatement",
																	"src": "14781:11:11"
																}
															]
														}
													}
												]
											},
											{
												"expression": {
													"id": 2904,
													"name": "result",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 2829,
													"src": "14836:6:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"functionReturnParameters": 2827,
												"id": 2905,
												"nodeType": "Return",
												"src": "14829:13:11"
											}
										]
									},
									"documentation": {
										"id": 2821,
										"nodeType": "StructuredDocumentation",
										"src": "13906:251:11",
										"text": " @dev Return the log in base 256 of a positive value rounded towards zero.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."
									},
									"id": 2907,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "14172:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2824,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2823,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14187:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2907,
												"src": "14179:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2822,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14179:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14178:15:11"
									},
									"returnParameters": {
										"id": 2827,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2826,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2907,
												"src": "14217:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2825,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14217:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14216:9:11"
									},
									"scope": 2965,
									"src": "14163:687:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2944,
										"nodeType": "Block",
										"src": "15093:182:11",
										"statements": [
											{
												"id": 2943,
												"nodeType": "UncheckedBlock",
												"src": "15104:164:11",
												"statements": [
													{
														"assignments": [
															2919
														],
														"declarations": [
															{
																"constant": false,
																"id": 2919,
																"mutability": "mutable",
																"name": "result",
																"nameLocation": "15137:6:11",
																"nodeType": "VariableDeclaration",
																"scope": 2943,
																"src": "15129:14:11",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 2918,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15129:7:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 2923,
														"initialValue": {
															"arguments": [
																{
																	"id": 2921,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2910,
																	"src": "15153:5:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 2920,
																"name": "log256",
																"nodeType": "Identifier",
																"overloadedDeclarations": [
																	2907,
																	2945
																],
																"referencedDeclaration": 2907,
																"src": "15146:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_pure$_t_uint256_$returns$_t_uint256_$",
																	"typeString": "function (uint256) pure returns (uint256)"
																}
															},
															"id": 2922,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15146:13:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15129:30:11"
													},
													{
														"expression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 2941,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 2924,
																"name": "result",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 2919,
																"src": "15181:6:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"components": [
																	{
																		"condition": {
																			"commonType": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			},
																			"id": 2936,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 2926,
																						"name": "rounding",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 2913,
																						"src": "15208:8:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_enum$_Rounding_$1922",
																							"typeString": "enum Math.Rounding"
																						}
																					],
																					"id": 2925,
																					"name": "unsignedRoundsUp",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2964,
																					"src": "15191:16:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_function_internal_pure$_t_enum$_Rounding_$1922_$returns$_t_bool_$",
																						"typeString": "function (enum Math.Rounding) pure returns (bool)"
																					}
																				},
																				"id": 2927,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "functionCall",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "15191:26:11",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "&&",
																			"rightExpression": {
																				"commonType": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				"id": 2935,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"leftExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 2933,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"hexValue": "31",
																						"id": 2928,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "15221:1:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "<<",
																					"rightExpression": {
																						"components": [
																							{
																								"commonType": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								},
																								"id": 2931,
																								"isConstant": false,
																								"isLValue": false,
																								"isPure": false,
																								"lValueRequested": false,
																								"leftExpression": {
																									"id": 2929,
																									"name": "result",
																									"nodeType": "Identifier",
																									"overloadedDeclarations": [],
																									"referencedDeclaration": 2919,
																									"src": "15227:6:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_uint256",
																										"typeString": "uint256"
																									}
																								},
																								"nodeType": "BinaryOperation",
																								"operator": "<<",
																								"rightExpression": {
																									"hexValue": "33",
																									"id": 2930,
																									"isConstant": false,
																									"isLValue": false,
																									"isPure": true,
																									"kind": "number",
																									"lValueRequested": false,
																									"nodeType": "Literal",
																									"src": "15237:1:11",
																									"typeDescriptions": {
																										"typeIdentifier": "t_rational_3_by_1",
																										"typeString": "int_const 3"
																									},
																									"value": "3"
																								},
																								"src": "15227:11:11",
																								"typeDescriptions": {
																									"typeIdentifier": "t_uint256",
																									"typeString": "uint256"
																								}
																							}
																						],
																						"id": 2932,
																						"isConstant": false,
																						"isInlineArray": false,
																						"isLValue": false,
																						"isPure": false,
																						"lValueRequested": false,
																						"nodeType": "TupleExpression",
																						"src": "15226:13:11",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"src": "15221:18:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"nodeType": "BinaryOperation",
																				"operator": "<",
																				"rightExpression": {
																					"id": 2934,
																					"name": "value",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 2910,
																					"src": "15242:5:11",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"src": "15221:26:11",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bool",
																					"typeString": "bool"
																				}
																			},
																			"src": "15191:56:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bool",
																				"typeString": "bool"
																			}
																		},
																		"falseExpression": {
																			"hexValue": "30",
																			"id": 2938,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "15254:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"id": 2939,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "Conditional",
																		"src": "15191:64:11",
																		"trueExpression": {
																			"hexValue": "31",
																			"id": 2937,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "15250:1:11",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_1_by_1",
																				"typeString": "int_const 1"
																			},
																			"value": "1"
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint8",
																			"typeString": "uint8"
																		}
																	}
																],
																"id": 2940,
																"isConstant": false,
																"isInlineArray": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"nodeType": "TupleExpression",
																"src": "15190:66:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint8",
																	"typeString": "uint8"
																}
															},
															"src": "15181:75:11",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 2917,
														"id": 2942,
														"nodeType": "Return",
														"src": "15174:82:11"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 2908,
										"nodeType": "StructuredDocumentation",
										"src": "14858:147:11",
										"text": " @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."
									},
									"id": 2945,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "log256",
									"nameLocation": "15020:6:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2914,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2910,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "15035:5:11",
												"nodeType": "VariableDeclaration",
												"scope": 2945,
												"src": "15027:13:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2909,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15027:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2913,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15051:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2945,
												"src": "15042:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1922",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2912,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2911,
														"name": "Rounding",
														"nameLocations": [
															"15042:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1922,
														"src": "15042:8:11"
													},
													"referencedDeclaration": 1922,
													"src": "15042:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1922",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15026:34:11"
									},
									"returnParameters": {
										"id": 2917,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2916,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2945,
												"src": "15084:7:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 2915,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15084:7:11",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15083:9:11"
									},
									"scope": 2965,
									"src": "15011:264:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 2963,
										"nodeType": "Block",
										"src": "15478:50:11",
										"statements": [
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													},
													"id": 2961,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"id": 2959,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"arguments": [
																{
																	"id": 2956,
																	"name": "rounding",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 2949,
																	"src": "15502:8:11",
																	"typeDescriptions": {
																		"typeIdentifier": "t_enum$_Rounding_$1922",
																		"typeString": "enum Math.Rounding"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_enum$_Rounding_$1922",
																		"typeString": "enum Math.Rounding"
																	}
																],
																"id": 2955,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15496:5:11",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint8_$",
																	"typeString": "type(uint8)"
																},
																"typeName": {
																	"id": 2954,
																	"name": "uint8",
																	"nodeType": "ElementaryTypeName",
																	"src": "15496:5:11",
																	"typeDescriptions": {}
																}
															},
															"id": 2957,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15496:15:11",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "%",
														"rightExpression": {
															"hexValue": "32",
															"id": 2958,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "15514:1:11",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_2_by_1",
																"typeString": "int_const 2"
															},
															"value": "2"
														},
														"src": "15496:19:11",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "31",
														"id": 2960,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "15519:1:11",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "15496:24:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 2953,
												"id": 2962,
												"nodeType": "Return",
												"src": "15489:31:11"
											}
										]
									},
									"documentation": {
										"id": 2946,
										"nodeType": "StructuredDocumentation",
										"src": "15283:115:11",
										"text": " @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers."
									},
									"id": 2964,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "unsignedRoundsUp",
									"nameLocation": "15413:16:11",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2950,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2949,
												"mutability": "mutable",
												"name": "rounding",
												"nameLocation": "15439:8:11",
												"nodeType": "VariableDeclaration",
												"scope": 2964,
												"src": "15430:17:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_enum$_Rounding_$1922",
													"typeString": "enum Math.Rounding"
												},
												"typeName": {
													"id": 2948,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 2947,
														"name": "Rounding",
														"nameLocations": [
															"15430:8:11"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 1922,
														"src": "15430:8:11"
													},
													"referencedDeclaration": 1922,
													"src": "15430:8:11",
													"typeDescriptions": {
														"typeIdentifier": "t_enum$_Rounding_$1922",
														"typeString": "enum Math.Rounding"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15429:19:11"
									},
									"returnParameters": {
										"id": 2953,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2952,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2964,
												"src": "15472:4:11",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 2951,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "15472:4:11",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15471:6:11"
									},
									"scope": 2965,
									"src": "15404:124:11",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 2966,
							"src": "211:15320:11",
							"usedErrors": [
								1917
							],
							"usedEvents": []
						}
					],
					"src": "106:15427:11"
				},
				"id": 11
			},
			"openzeppelin-contracts/contracts/utils/math/SignedMath.sol": {
				"ast": {
					"absolutePath": "openzeppelin-contracts/contracts/utils/math/SignedMath.sol",
					"exportedSymbols": {
						"SignedMath": [
							3070
						]
					},
					"id": 3071,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 2967,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".20"
							],
							"nodeType": "PragmaDirective",
							"src": "112:24:12"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SignedMath",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2968,
								"nodeType": "StructuredDocumentation",
								"src": "140:82:12",
								"text": " @dev Standard signed math utilities missing in the Solidity language."
							},
							"fullyImplemented": true,
							"id": 3070,
							"linearizedBaseContracts": [
								3070
							],
							"name": "SignedMath",
							"nameLocation": "232:10:12",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 2985,
										"nodeType": "Block",
										"src": "388:39:12",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2980,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2978,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2971,
															"src": "406:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"id": 2979,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2973,
															"src": "410:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "406:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 2982,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2973,
														"src": "418:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 2983,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "406:13:12",
													"trueExpression": {
														"id": 2981,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2971,
														"src": "414:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2977,
												"id": 2984,
												"nodeType": "Return",
												"src": "399:20:12"
											}
										]
									},
									"documentation": {
										"id": 2969,
										"nodeType": "StructuredDocumentation",
										"src": "250:68:12",
										"text": " @dev Returns the largest of two signed numbers."
									},
									"id": 2986,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "max",
									"nameLocation": "333:3:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2974,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2971,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "344:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "337:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2970,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "337:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2973,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "354:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "347:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2972,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "347:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "336:20:12"
									},
									"returnParameters": {
										"id": 2977,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2976,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 2986,
												"src": "380:6:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2975,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "380:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "379:8:12"
									},
									"scope": 3070,
									"src": "324:103:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3003,
										"nodeType": "Block",
										"src": "574:39:12",
										"statements": [
											{
												"expression": {
													"condition": {
														"commonType": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"id": 2998,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 2996,
															"name": "a",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2989,
															"src": "592:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "<",
														"rightExpression": {
															"id": 2997,
															"name": "b",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 2991,
															"src": "596:1:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"src": "592:5:12",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"falseExpression": {
														"id": 3000,
														"name": "b",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2991,
														"src": "604:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"id": 3001,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "Conditional",
													"src": "592:13:12",
													"trueExpression": {
														"id": 2999,
														"name": "a",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 2989,
														"src": "600:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 2995,
												"id": 3002,
												"nodeType": "Return",
												"src": "585:20:12"
											}
										]
									},
									"documentation": {
										"id": 2987,
										"nodeType": "StructuredDocumentation",
										"src": "435:69:12",
										"text": " @dev Returns the smallest of two signed numbers."
									},
									"id": 3004,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "min",
									"nameLocation": "519:3:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2992,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2989,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "530:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 3004,
												"src": "523:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2988,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "523:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 2991,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "540:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 3004,
												"src": "533:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2990,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "533:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "522:20:12"
									},
									"returnParameters": {
										"id": 2995,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 2994,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3004,
												"src": "566:6:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 2993,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "566:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "565:8:12"
									},
									"scope": 3070,
									"src": "510:103:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3047,
										"nodeType": "Block",
										"src": "824:166:12",
										"statements": [
											{
												"assignments": [
													3015
												],
												"declarations": [
													{
														"constant": false,
														"id": 3015,
														"mutability": "mutable",
														"name": "x",
														"nameLocation": "895:1:12",
														"nodeType": "VariableDeclaration",
														"scope": 3047,
														"src": "888:8:12",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														},
														"typeName": {
															"id": 3014,
															"name": "int256",
															"nodeType": "ElementaryTypeName",
															"src": "888:6:12",
															"typeDescriptions": {
																"typeIdentifier": "t_int256",
																"typeString": "int256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 3028,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3027,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3018,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"id": 3016,
																	"name": "a",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3007,
																	"src": "900:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"id": 3017,
																	"name": "b",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 3009,
																	"src": "904:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "900:5:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3019,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "899:7:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3025,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3022,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3020,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3007,
																				"src": "911:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3021,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3009,
																				"src": "915:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "911:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3023,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "910:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": ">>",
																"rightExpression": {
																	"hexValue": "31",
																	"id": 3024,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "921:1:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_1_by_1",
																		"typeString": "int_const 1"
																	},
																	"value": "1"
																},
																"src": "910:12:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3026,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "909:14:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "899:24:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "888:35:12"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													},
													"id": 3045,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 3029,
														"name": "x",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 3015,
														"src": "941:1:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "+",
													"rightExpression": {
														"components": [
															{
																"commonType": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																},
																"id": 3043,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"arguments": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			},
																			"id": 3037,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"arguments": [
																					{
																						"id": 3034,
																						"name": "x",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 3015,
																						"src": "961:1:12",
																						"typeDescriptions": {
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					}
																				],
																				"expression": {
																					"argumentTypes": [
																						{
																							"typeIdentifier": "t_int256",
																							"typeString": "int256"
																						}
																					],
																					"id": 3033,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "953:7:12",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint256_$",
																						"typeString": "type(uint256)"
																					},
																					"typeName": {
																						"id": 3032,
																						"name": "uint256",
																						"nodeType": "ElementaryTypeName",
																						"src": "953:7:12",
																						"typeDescriptions": {}
																					}
																				},
																				"id": 3035,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"kind": "typeConversion",
																				"lValueRequested": false,
																				"nameLocations": [],
																				"names": [],
																				"nodeType": "FunctionCall",
																				"src": "953:10:12",
																				"tryCall": false,
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": ">>",
																			"rightExpression": {
																				"hexValue": "323535",
																				"id": 3036,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "967:3:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_255_by_1",
																					"typeString": "int_const 255"
																				},
																				"value": "255"
																			},
																			"src": "953:17:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		],
																		"id": 3031,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "946:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_int256_$",
																			"typeString": "type(int256)"
																		},
																		"typeName": {
																			"id": 3030,
																			"name": "int256",
																			"nodeType": "ElementaryTypeName",
																			"src": "946:6:12",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 3038,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "946:25:12",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&",
																"rightExpression": {
																	"components": [
																		{
																			"commonType": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			},
																			"id": 3041,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftExpression": {
																				"id": 3039,
																				"name": "a",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3007,
																				"src": "975:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"nodeType": "BinaryOperation",
																			"operator": "^",
																			"rightExpression": {
																				"id": 3040,
																				"name": "b",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 3009,
																				"src": "979:1:12",
																				"typeDescriptions": {
																					"typeIdentifier": "t_int256",
																					"typeString": "int256"
																				}
																			},
																			"src": "975:5:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		}
																	],
																	"id": 3042,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "974:7:12",
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																},
																"src": "946:35:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_int256",
																	"typeString": "int256"
																}
															}
														],
														"id": 3044,
														"isConstant": false,
														"isInlineArray": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "TupleExpression",
														"src": "945:37:12",
														"typeDescriptions": {
															"typeIdentifier": "t_int256",
															"typeString": "int256"
														}
													},
													"src": "941:41:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"functionReturnParameters": 3013,
												"id": 3046,
												"nodeType": "Return",
												"src": "934:48:12"
											}
										]
									},
									"documentation": {
										"id": 3005,
										"nodeType": "StructuredDocumentation",
										"src": "621:129:12",
										"text": " @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."
									},
									"id": 3048,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "average",
									"nameLocation": "765:7:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3010,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3007,
												"mutability": "mutable",
												"name": "a",
												"nameLocation": "780:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "773:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3006,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "773:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 3009,
												"mutability": "mutable",
												"name": "b",
												"nameLocation": "790:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "783:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3008,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "783:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "772:20:12"
									},
									"returnParameters": {
										"id": 3013,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3012,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3048,
												"src": "816:6:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3011,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "816:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "815:8:12"
									},
									"scope": 3070,
									"src": "756:234:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 3068,
										"nodeType": "Block",
										"src": "1139:163:12",
										"statements": [
											{
												"id": 3067,
												"nodeType": "UncheckedBlock",
												"src": "1150:145:12",
												"statements": [
													{
														"expression": {
															"arguments": [
																{
																	"condition": {
																		"commonType": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		},
																		"id": 3060,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"id": 3058,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3051,
																			"src": "1267:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": ">=",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 3059,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "1272:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "1267:6:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"falseExpression": {
																		"id": 3063,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"nodeType": "UnaryOperation",
																		"operator": "-",
																		"prefix": true,
																		"src": "1280:2:12",
																		"subExpression": {
																			"id": 3062,
																			"name": "n",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 3051,
																			"src": "1281:1:12",
																			"typeDescriptions": {
																				"typeIdentifier": "t_int256",
																				"typeString": "int256"
																			}
																		},
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"id": 3064,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "Conditional",
																	"src": "1267:15:12",
																	"trueExpression": {
																		"id": 3061,
																		"name": "n",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 3051,
																		"src": "1276:1:12",
																		"typeDescriptions": {
																			"typeIdentifier": "t_int256",
																			"typeString": "int256"
																		}
																	},
																	"typeDescriptions": {
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_int256",
																		"typeString": "int256"
																	}
																],
																"id": 3057,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1259:7:12",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_uint256_$",
																	"typeString": "type(uint256)"
																},
																"typeName": {
																	"id": 3056,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "1259:7:12",
																	"typeDescriptions": {}
																}
															},
															"id": 3065,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1259:24:12",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"functionReturnParameters": 3055,
														"id": 3066,
														"nodeType": "Return",
														"src": "1252:31:12"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 3049,
										"nodeType": "StructuredDocumentation",
										"src": "998:80:12",
										"text": " @dev Returns the absolute unsigned value of a signed value."
									},
									"id": 3069,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "abs",
									"nameLocation": "1093:3:12",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 3052,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3051,
												"mutability": "mutable",
												"name": "n",
												"nameLocation": "1104:1:12",
												"nodeType": "VariableDeclaration",
												"scope": 3069,
												"src": "1097:8:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_int256",
													"typeString": "int256"
												},
												"typeName": {
													"id": 3050,
													"name": "int256",
													"nodeType": "ElementaryTypeName",
													"src": "1097:6:12",
													"typeDescriptions": {
														"typeIdentifier": "t_int256",
														"typeString": "int256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1096:10:12"
									},
									"returnParameters": {
										"id": 3055,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 3054,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 3069,
												"src": "1130:7:12",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 3053,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1130:7:12",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1129:9:12"
									},
									"scope": 3070,
									"src": "1084:218:12",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								}
							],
							"scope": 3071,
							"src": "224:1081:12",
							"usedErrors": [],
							"usedEvents": []
						}
					],
					"src": "112:1195:12"
				},
				"id": 12
			}
		}
	}
}